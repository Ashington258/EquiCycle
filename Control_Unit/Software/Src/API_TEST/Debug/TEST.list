
TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000623c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080064d4  080064d4  000164d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800651c  0800651c  0001651c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006524  08006524  00016524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006528  08006528  00016528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800652c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b4  24000010  0800653c  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240000c4  0800653c  000200c4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   000104ec  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00001f52  00000000  00000000  0003056d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000ab0  00000000  00000000  000324c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000840  00000000  00000000  00032f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000356e9  00000000  00000000  000337b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000113cc  00000000  00000000  00068e99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00155d0f  00000000  00000000  0007a265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00002bd0  00000000  00000000  001cff74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004d  00000000  00000000  001d2b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080064bc 	.word	0x080064bc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080064bc 	.word	0x080064bc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b590      	push	{r4, r7, lr}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005da:	f000 fa93 	bl	8000b04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005de:	f000 f819 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 f8e1 	bl	80007a8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005e6:	f000 f893 	bl	8000710 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  uint8_t UART_BUF[] = "Hello World \r\n";
 80005ea:	4b08      	ldr	r3, [pc, #32]	; (800060c <main+0x38>)
 80005ec:	463c      	mov	r4, r7
 80005ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005f0:	c407      	stmia	r4!, {r0, r1, r2}
 80005f2:	8023      	strh	r3, [r4, #0]
 80005f4:	3402      	adds	r4, #2
 80005f6:	0c1b      	lsrs	r3, r3, #16
 80005f8:	7023      	strb	r3, [r4, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_UART_Transmit(&huart1,UART_BUF,sizeof(UART_BUF),0xffff);
 80005fa:	4639      	mov	r1, r7
 80005fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000600:	220f      	movs	r2, #15
 8000602:	4803      	ldr	r0, [pc, #12]	; (8000610 <main+0x3c>)
 8000604:	f004 f9dc 	bl	80049c0 <HAL_UART_Transmit>
 8000608:	e7f7      	b.n	80005fa <main+0x26>
 800060a:	bf00      	nop
 800060c:	080064d4 	.word	0x080064d4
 8000610:	2400002c 	.word	0x2400002c

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b09c      	sub	sp, #112	; 0x70
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800061e:	224c      	movs	r2, #76	; 0x4c
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f005 ff1e 	bl	8006464 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2220      	movs	r2, #32
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f005 ff18 	bl	8006464 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000634:	2002      	movs	r0, #2
 8000636:	f001 fb27 	bl	8001c88 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800063a:	2300      	movs	r3, #0
 800063c:	603b      	str	r3, [r7, #0]
 800063e:	4b32      	ldr	r3, [pc, #200]	; (8000708 <SystemClock_Config+0xf4>)
 8000640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000642:	4a31      	ldr	r2, [pc, #196]	; (8000708 <SystemClock_Config+0xf4>)
 8000644:	f023 0301 	bic.w	r3, r3, #1
 8000648:	62d3      	str	r3, [r2, #44]	; 0x2c
 800064a:	4b2f      	ldr	r3, [pc, #188]	; (8000708 <SystemClock_Config+0xf4>)
 800064c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	603b      	str	r3, [r7, #0]
 8000654:	4b2d      	ldr	r3, [pc, #180]	; (800070c <SystemClock_Config+0xf8>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800065c:	4a2b      	ldr	r2, [pc, #172]	; (800070c <SystemClock_Config+0xf8>)
 800065e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000662:	6193      	str	r3, [r2, #24]
 8000664:	4b29      	ldr	r3, [pc, #164]	; (800070c <SystemClock_Config+0xf8>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800066c:	603b      	str	r3, [r7, #0]
 800066e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000670:	bf00      	nop
 8000672:	4b26      	ldr	r3, [pc, #152]	; (800070c <SystemClock_Config+0xf8>)
 8000674:	699b      	ldr	r3, [r3, #24]
 8000676:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800067a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800067e:	d1f8      	bne.n	8000672 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000680:	2302      	movs	r3, #2
 8000682:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000684:	2301      	movs	r3, #1
 8000686:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000688:	2340      	movs	r3, #64	; 0x40
 800068a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068c:	2302      	movs	r3, #2
 800068e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000690:	2300      	movs	r3, #0
 8000692:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000694:	2304      	movs	r3, #4
 8000696:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000698:	230c      	movs	r3, #12
 800069a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800069c:	2302      	movs	r3, #2
 800069e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006a8:	230c      	movs	r3, #12
 80006aa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 80006b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ba:	4618      	mov	r0, r3
 80006bc:	f001 fb1e 	bl	8001cfc <HAL_RCC_OscConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006c6:	f000 f8a7 	bl	8000818 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ca:	233f      	movs	r3, #63	; 0x3f
 80006cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ce:	2303      	movs	r3, #3
 80006d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80006d6:	2308      	movs	r3, #8
 80006d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006da:	2340      	movs	r3, #64	; 0x40
 80006dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006de:	2340      	movs	r3, #64	; 0x40
 80006e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006e6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006e8:	2340      	movs	r3, #64	; 0x40
 80006ea:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	2101      	movs	r1, #1
 80006f0:	4618      	mov	r0, r3
 80006f2:	f001 ff5d 	bl	80025b0 <HAL_RCC_ClockConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0xec>
  {
    Error_Handler();
 80006fc:	f000 f88c 	bl	8000818 <Error_Handler>
  }
}
 8000700:	bf00      	nop
 8000702:	3770      	adds	r7, #112	; 0x70
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	58000400 	.word	0x58000400
 800070c:	58024800 	.word	0x58024800

08000710 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000714:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <MX_USART1_UART_Init+0x90>)
 8000716:	4a23      	ldr	r2, [pc, #140]	; (80007a4 <MX_USART1_UART_Init+0x94>)
 8000718:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800071a:	4b21      	ldr	r3, [pc, #132]	; (80007a0 <MX_USART1_UART_Init+0x90>)
 800071c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000720:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <MX_USART1_UART_Init+0x90>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <MX_USART1_UART_Init+0x90>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800072e:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <MX_USART1_UART_Init+0x90>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <MX_USART1_UART_Init+0x90>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <MX_USART1_UART_Init+0x90>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <MX_USART1_UART_Init+0x90>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000746:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <MX_USART1_UART_Init+0x90>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800074c:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <MX_USART1_UART_Init+0x90>)
 800074e:	2200      	movs	r2, #0
 8000750:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <MX_USART1_UART_Init+0x90>)
 8000754:	2200      	movs	r2, #0
 8000756:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000758:	4811      	ldr	r0, [pc, #68]	; (80007a0 <MX_USART1_UART_Init+0x90>)
 800075a:	f004 f8e1 	bl	8004920 <HAL_UART_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000764:	f000 f858 	bl	8000818 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000768:	2100      	movs	r1, #0
 800076a:	480d      	ldr	r0, [pc, #52]	; (80007a0 <MX_USART1_UART_Init+0x90>)
 800076c:	f005 fdb0 	bl	80062d0 <HAL_UARTEx_SetTxFifoThreshold>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000776:	f000 f84f 	bl	8000818 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800077a:	2100      	movs	r1, #0
 800077c:	4808      	ldr	r0, [pc, #32]	; (80007a0 <MX_USART1_UART_Init+0x90>)
 800077e:	f005 fde5 	bl	800634c <HAL_UARTEx_SetRxFifoThreshold>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000788:	f000 f846 	bl	8000818 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	; (80007a0 <MX_USART1_UART_Init+0x90>)
 800078e:	f005 fd66 	bl	800625e <HAL_UARTEx_DisableFifoMode>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000798:	f000 f83e 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	2400002c 	.word	0x2400002c
 80007a4:	40011000 	.word	0x40011000

080007a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	4b19      	ldr	r3, [pc, #100]	; (8000814 <MX_GPIO_Init+0x6c>)
 80007b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b4:	4a17      	ldr	r2, [pc, #92]	; (8000814 <MX_GPIO_Init+0x6c>)
 80007b6:	f043 0302 	orr.w	r3, r3, #2
 80007ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007be:	4b15      	ldr	r3, [pc, #84]	; (8000814 <MX_GPIO_Init+0x6c>)
 80007c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007c4:	f003 0302 	and.w	r3, r3, #2
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007cc:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_GPIO_Init+0x6c>)
 80007ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d2:	4a10      	ldr	r2, [pc, #64]	; (8000814 <MX_GPIO_Init+0x6c>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007dc:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <MX_GPIO_Init+0x6c>)
 80007de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ea:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <MX_GPIO_Init+0x6c>)
 80007ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f0:	4a08      	ldr	r2, [pc, #32]	; (8000814 <MX_GPIO_Init+0x6c>)
 80007f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_GPIO_Init+0x6c>)
 80007fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000808:	bf00      	nop
 800080a:	3714      	adds	r7, #20
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	58024400 	.word	0x58024400

08000818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800081c:	b672      	cpsid	i
}
 800081e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000820:	e7fe      	b.n	8000820 <Error_Handler+0x8>
	...

08000824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082a:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <HAL_MspInit+0x30>)
 800082c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000830:	4a08      	ldr	r2, [pc, #32]	; (8000854 <HAL_MspInit+0x30>)
 8000832:	f043 0302 	orr.w	r3, r3, #2
 8000836:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <HAL_MspInit+0x30>)
 800083c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000840:	f003 0302 	and.w	r3, r3, #2
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	58024400 	.word	0x58024400

08000858 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b0ba      	sub	sp, #232	; 0xe8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000860:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000870:	f107 0310 	add.w	r3, r7, #16
 8000874:	22c0      	movs	r2, #192	; 0xc0
 8000876:	2100      	movs	r1, #0
 8000878:	4618      	mov	r0, r3
 800087a:	f005 fdf3 	bl	8006464 <memset>
  if(huart->Instance==USART1)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a2a      	ldr	r2, [pc, #168]	; (800092c <HAL_UART_MspInit+0xd4>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d14d      	bne.n	8000924 <HAL_UART_MspInit+0xcc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000888:	f04f 0201 	mov.w	r2, #1
 800088c:	f04f 0300 	mov.w	r3, #0
 8000890:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000894:	2300      	movs	r3, #0
 8000896:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800089a:	f107 0310 	add.w	r3, r7, #16
 800089e:	4618      	mov	r0, r3
 80008a0:	f002 fa12 	bl	8002cc8 <HAL_RCCEx_PeriphCLKConfig>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80008aa:	f7ff ffb5 	bl	8000818 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008ae:	4b20      	ldr	r3, [pc, #128]	; (8000930 <HAL_UART_MspInit+0xd8>)
 80008b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80008b4:	4a1e      	ldr	r2, [pc, #120]	; (8000930 <HAL_UART_MspInit+0xd8>)
 80008b6:	f043 0310 	orr.w	r3, r3, #16
 80008ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80008be:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <HAL_UART_MspInit+0xd8>)
 80008c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80008c4:	f003 0310 	and.w	r3, r3, #16
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008cc:	4b18      	ldr	r3, [pc, #96]	; (8000930 <HAL_UART_MspInit+0xd8>)
 80008ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d2:	4a17      	ldr	r2, [pc, #92]	; (8000930 <HAL_UART_MspInit+0xd8>)
 80008d4:	f043 0302 	orr.w	r3, r3, #2
 80008d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008dc:	4b14      	ldr	r3, [pc, #80]	; (8000930 <HAL_UART_MspInit+0xd8>)
 80008de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e2:	f003 0302 	and.w	r3, r3, #2
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80008ea:	23c0      	movs	r3, #192	; 0xc0
 80008ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f0:	2302      	movs	r3, #2
 80008f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000902:	2307      	movs	r3, #7
 8000904:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000908:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800090c:	4619      	mov	r1, r3
 800090e:	4809      	ldr	r0, [pc, #36]	; (8000934 <HAL_UART_MspInit+0xdc>)
 8000910:	f001 f80a 	bl	8001928 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000914:	2200      	movs	r2, #0
 8000916:	2100      	movs	r1, #0
 8000918:	2025      	movs	r0, #37	; 0x25
 800091a:	f000 fa6c 	bl	8000df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800091e:	2025      	movs	r0, #37	; 0x25
 8000920:	f000 fa83 	bl	8000e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000924:	bf00      	nop
 8000926:	37e8      	adds	r7, #232	; 0xe8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40011000 	.word	0x40011000
 8000930:	58024400 	.word	0x58024400
 8000934:	58020400 	.word	0x58020400

08000938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800093c:	e7fe      	b.n	800093c <NMI_Handler+0x4>

0800093e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000942:	e7fe      	b.n	8000942 <HardFault_Handler+0x4>

08000944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <MemManage_Handler+0x4>

0800094a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094e:	e7fe      	b.n	800094e <BusFault_Handler+0x4>

08000950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <UsageFault_Handler+0x4>

08000956 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000984:	f000 f930 	bl	8000be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}

0800098c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000990:	4802      	ldr	r0, [pc, #8]	; (800099c <USART1_IRQHandler+0x10>)
 8000992:	f004 f8a3 	bl	8004adc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	2400002c 	.word	0x2400002c

080009a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009a4:	4b37      	ldr	r3, [pc, #220]	; (8000a84 <SystemInit+0xe4>)
 80009a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009aa:	4a36      	ldr	r2, [pc, #216]	; (8000a84 <SystemInit+0xe4>)
 80009ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009b4:	4b34      	ldr	r3, [pc, #208]	; (8000a88 <SystemInit+0xe8>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f003 030f 	and.w	r3, r3, #15
 80009bc:	2b06      	cmp	r3, #6
 80009be:	d807      	bhi.n	80009d0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009c0:	4b31      	ldr	r3, [pc, #196]	; (8000a88 <SystemInit+0xe8>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f023 030f 	bic.w	r3, r3, #15
 80009c8:	4a2f      	ldr	r2, [pc, #188]	; (8000a88 <SystemInit+0xe8>)
 80009ca:	f043 0307 	orr.w	r3, r3, #7
 80009ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80009d0:	4b2e      	ldr	r3, [pc, #184]	; (8000a8c <SystemInit+0xec>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a2d      	ldr	r2, [pc, #180]	; (8000a8c <SystemInit+0xec>)
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80009dc:	4b2b      	ldr	r3, [pc, #172]	; (8000a8c <SystemInit+0xec>)
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80009e2:	4b2a      	ldr	r3, [pc, #168]	; (8000a8c <SystemInit+0xec>)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	4929      	ldr	r1, [pc, #164]	; (8000a8c <SystemInit+0xec>)
 80009e8:	4b29      	ldr	r3, [pc, #164]	; (8000a90 <SystemInit+0xf0>)
 80009ea:	4013      	ands	r3, r2
 80009ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009ee:	4b26      	ldr	r3, [pc, #152]	; (8000a88 <SystemInit+0xe8>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f003 0308 	and.w	r3, r3, #8
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d007      	beq.n	8000a0a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009fa:	4b23      	ldr	r3, [pc, #140]	; (8000a88 <SystemInit+0xe8>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f023 030f 	bic.w	r3, r3, #15
 8000a02:	4a21      	ldr	r2, [pc, #132]	; (8000a88 <SystemInit+0xe8>)
 8000a04:	f043 0307 	orr.w	r3, r3, #7
 8000a08:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000a0a:	4b20      	ldr	r3, [pc, #128]	; (8000a8c <SystemInit+0xec>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000a10:	4b1e      	ldr	r3, [pc, #120]	; (8000a8c <SystemInit+0xec>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000a16:	4b1d      	ldr	r3, [pc, #116]	; (8000a8c <SystemInit+0xec>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000a1c:	4b1b      	ldr	r3, [pc, #108]	; (8000a8c <SystemInit+0xec>)
 8000a1e:	4a1d      	ldr	r2, [pc, #116]	; (8000a94 <SystemInit+0xf4>)
 8000a20:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000a22:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <SystemInit+0xec>)
 8000a24:	4a1c      	ldr	r2, [pc, #112]	; (8000a98 <SystemInit+0xf8>)
 8000a26:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000a28:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <SystemInit+0xec>)
 8000a2a:	4a1c      	ldr	r2, [pc, #112]	; (8000a9c <SystemInit+0xfc>)
 8000a2c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a2e:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <SystemInit+0xec>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a34:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <SystemInit+0xec>)
 8000a36:	4a19      	ldr	r2, [pc, #100]	; (8000a9c <SystemInit+0xfc>)
 8000a38:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a3a:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <SystemInit+0xec>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <SystemInit+0xec>)
 8000a42:	4a16      	ldr	r2, [pc, #88]	; (8000a9c <SystemInit+0xfc>)
 8000a44:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a46:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <SystemInit+0xec>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <SystemInit+0xec>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <SystemInit+0xec>)
 8000a52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a56:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <SystemInit+0xec>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000a5e:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <SystemInit+0x100>)
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <SystemInit+0x104>)
 8000a64:	4013      	ands	r3, r2
 8000a66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a6a:	d202      	bcs.n	8000a72 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a6c:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <SystemInit+0x108>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <SystemInit+0x10c>)
 8000a74:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000a78:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	e000ed00 	.word	0xe000ed00
 8000a88:	52002000 	.word	0x52002000
 8000a8c:	58024400 	.word	0x58024400
 8000a90:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a94:	02020200 	.word	0x02020200
 8000a98:	01ff0000 	.word	0x01ff0000
 8000a9c:	01010280 	.word	0x01010280
 8000aa0:	5c001000 	.word	0x5c001000
 8000aa4:	ffff0000 	.word	0xffff0000
 8000aa8:	51008108 	.word	0x51008108
 8000aac:	52004000 	.word	0x52004000

08000ab0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ab0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ae8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ab4:	f7ff ff74 	bl	80009a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ab8:	480c      	ldr	r0, [pc, #48]	; (8000aec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aba:	490d      	ldr	r1, [pc, #52]	; (8000af0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000abc:	4a0d      	ldr	r2, [pc, #52]	; (8000af4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac0:	e002      	b.n	8000ac8 <LoopCopyDataInit>

08000ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ac6:	3304      	adds	r3, #4

08000ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000acc:	d3f9      	bcc.n	8000ac2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ace:	4a0a      	ldr	r2, [pc, #40]	; (8000af8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ad0:	4c0a      	ldr	r4, [pc, #40]	; (8000afc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad4:	e001      	b.n	8000ada <LoopFillZerobss>

08000ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad8:	3204      	adds	r2, #4

08000ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000adc:	d3fb      	bcc.n	8000ad6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ade:	f005 fcc9 	bl	8006474 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ae2:	f7ff fd77 	bl	80005d4 <main>
  bx  lr
 8000ae6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ae8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000aec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000af0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000af4:	0800652c 	.word	0x0800652c
  ldr r2, =_sbss
 8000af8:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000afc:	240000c4 	.word	0x240000c4

08000b00 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b00:	e7fe      	b.n	8000b00 <ADC3_IRQHandler>
	...

08000b04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b0a:	2003      	movs	r0, #3
 8000b0c:	f000 f968 	bl	8000de0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000b10:	f001 ff04 	bl	800291c <HAL_RCC_GetSysClockFreq>
 8000b14:	4602      	mov	r2, r0
 8000b16:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <HAL_Init+0x68>)
 8000b18:	699b      	ldr	r3, [r3, #24]
 8000b1a:	0a1b      	lsrs	r3, r3, #8
 8000b1c:	f003 030f 	and.w	r3, r3, #15
 8000b20:	4913      	ldr	r1, [pc, #76]	; (8000b70 <HAL_Init+0x6c>)
 8000b22:	5ccb      	ldrb	r3, [r1, r3]
 8000b24:	f003 031f 	and.w	r3, r3, #31
 8000b28:	fa22 f303 	lsr.w	r3, r2, r3
 8000b2c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <HAL_Init+0x68>)
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	f003 030f 	and.w	r3, r3, #15
 8000b36:	4a0e      	ldr	r2, [pc, #56]	; (8000b70 <HAL_Init+0x6c>)
 8000b38:	5cd3      	ldrb	r3, [r2, r3]
 8000b3a:	f003 031f 	and.w	r3, r3, #31
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	fa22 f303 	lsr.w	r3, r2, r3
 8000b44:	4a0b      	ldr	r2, [pc, #44]	; (8000b74 <HAL_Init+0x70>)
 8000b46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000b48:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_Init+0x74>)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b4e:	200f      	movs	r0, #15
 8000b50:	f000 f814 	bl	8000b7c <HAL_InitTick>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e002      	b.n	8000b64 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000b5e:	f7ff fe61 	bl	8000824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b62:	2300      	movs	r3, #0
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	58024400 	.word	0x58024400
 8000b70:	080064e4 	.word	0x080064e4
 8000b74:	24000004 	.word	0x24000004
 8000b78:	24000000 	.word	0x24000000

08000b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000b84:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <HAL_InitTick+0x60>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d101      	bne.n	8000b90 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	e021      	b.n	8000bd4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000b90:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <HAL_InitTick+0x64>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <HAL_InitTick+0x60>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f000 f94d 	bl	8000e46 <HAL_SYSTICK_Config>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e00e      	b.n	8000bd4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2b0f      	cmp	r3, #15
 8000bba:	d80a      	bhi.n	8000bd2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	6879      	ldr	r1, [r7, #4]
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	f000 f917 	bl	8000df6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bc8:	4a06      	ldr	r2, [pc, #24]	; (8000be4 <HAL_InitTick+0x68>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	e000      	b.n	8000bd4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	2400000c 	.word	0x2400000c
 8000be0:	24000000 	.word	0x24000000
 8000be4:	24000008 	.word	0x24000008

08000be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_IncTick+0x20>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <HAL_IncTick+0x24>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <HAL_IncTick+0x24>)
 8000bfa:	6013      	str	r3, [r2, #0]
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	2400000c 	.word	0x2400000c
 8000c0c:	240000c0 	.word	0x240000c0

08000c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return uwTick;
 8000c14:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <HAL_GetTick+0x14>)
 8000c16:	681b      	ldr	r3, [r3, #0]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	240000c0 	.word	0x240000c0

08000c28 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000c2c:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <HAL_GetREVID+0x14>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	0c1b      	lsrs	r3, r3, #16
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	5c001000 	.word	0x5c001000

08000c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c50:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <__NVIC_SetPriorityGrouping+0x40>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c56:	68ba      	ldr	r2, [r7, #8]
 8000c58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <__NVIC_SetPriorityGrouping+0x44>)
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c6e:	4a04      	ldr	r2, [pc, #16]	; (8000c80 <__NVIC_SetPriorityGrouping+0x40>)
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	60d3      	str	r3, [r2, #12]
}
 8000c74:	bf00      	nop
 8000c76:	3714      	adds	r7, #20
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000ed00 	.word	0xe000ed00
 8000c84:	05fa0000 	.word	0x05fa0000

08000c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c8c:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	0a1b      	lsrs	r3, r3, #8
 8000c92:	f003 0307 	and.w	r3, r3, #7
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000cae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	db0b      	blt.n	8000cce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cb6:	88fb      	ldrh	r3, [r7, #6]
 8000cb8:	f003 021f 	and.w	r2, r3, #31
 8000cbc:	4907      	ldr	r1, [pc, #28]	; (8000cdc <__NVIC_EnableIRQ+0x38>)
 8000cbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cc2:	095b      	lsrs	r3, r3, #5
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000e100 	.word	0xe000e100

08000ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	6039      	str	r1, [r7, #0]
 8000cea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000cec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db0a      	blt.n	8000d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	490c      	ldr	r1, [pc, #48]	; (8000d2c <__NVIC_SetPriority+0x4c>)
 8000cfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cfe:	0112      	lsls	r2, r2, #4
 8000d00:	b2d2      	uxtb	r2, r2
 8000d02:	440b      	add	r3, r1
 8000d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d08:	e00a      	b.n	8000d20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4908      	ldr	r1, [pc, #32]	; (8000d30 <__NVIC_SetPriority+0x50>)
 8000d10:	88fb      	ldrh	r3, [r7, #6]
 8000d12:	f003 030f 	and.w	r3, r3, #15
 8000d16:	3b04      	subs	r3, #4
 8000d18:	0112      	lsls	r2, r2, #4
 8000d1a:	b2d2      	uxtb	r2, r2
 8000d1c:	440b      	add	r3, r1
 8000d1e:	761a      	strb	r2, [r3, #24]
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000e100 	.word	0xe000e100
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b089      	sub	sp, #36	; 0x24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	f1c3 0307 	rsb	r3, r3, #7
 8000d4e:	2b04      	cmp	r3, #4
 8000d50:	bf28      	it	cs
 8000d52:	2304      	movcs	r3, #4
 8000d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3304      	adds	r3, #4
 8000d5a:	2b06      	cmp	r3, #6
 8000d5c:	d902      	bls.n	8000d64 <NVIC_EncodePriority+0x30>
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	3b03      	subs	r3, #3
 8000d62:	e000      	b.n	8000d66 <NVIC_EncodePriority+0x32>
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d68:	f04f 32ff 	mov.w	r2, #4294967295
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43da      	mvns	r2, r3
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	401a      	ands	r2, r3
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	fa01 f303 	lsl.w	r3, r1, r3
 8000d86:	43d9      	mvns	r1, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	4313      	orrs	r3, r2
         );
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3724      	adds	r7, #36	; 0x24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
	...

08000d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dac:	d301      	bcc.n	8000db2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dae:	2301      	movs	r3, #1
 8000db0:	e00f      	b.n	8000dd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000db2:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <SysTick_Config+0x40>)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dba:	210f      	movs	r1, #15
 8000dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc0:	f7ff ff8e 	bl	8000ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc4:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <SysTick_Config+0x40>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dca:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <SysTick_Config+0x40>)
 8000dcc:	2207      	movs	r2, #7
 8000dce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	e000e010 	.word	0xe000e010

08000de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f7ff ff29 	bl	8000c40 <__NVIC_SetPriorityGrouping>
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b086      	sub	sp, #24
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	60b9      	str	r1, [r7, #8]
 8000e00:	607a      	str	r2, [r7, #4]
 8000e02:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e04:	f7ff ff40 	bl	8000c88 <__NVIC_GetPriorityGrouping>
 8000e08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	68b9      	ldr	r1, [r7, #8]
 8000e0e:	6978      	ldr	r0, [r7, #20]
 8000e10:	f7ff ff90 	bl	8000d34 <NVIC_EncodePriority>
 8000e14:	4602      	mov	r2, r0
 8000e16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff ff5f 	bl	8000ce0 <__NVIC_SetPriority>
}
 8000e22:	bf00      	nop
 8000e24:	3718      	adds	r7, #24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	4603      	mov	r3, r0
 8000e32:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ff33 	bl	8000ca4 <__NVIC_EnableIRQ>
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f7ff ffa4 	bl	8000d9c <SysTick_Config>
 8000e54:	4603      	mov	r3, r0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8000e68:	f7ff fed2 	bl	8000c10 <HAL_GetTick>
 8000e6c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d101      	bne.n	8000e78 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	e2dc      	b.n	8001432 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d008      	beq.n	8000e96 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2280      	movs	r2, #128	; 0x80
 8000e88:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e2cd      	b.n	8001432 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a76      	ldr	r2, [pc, #472]	; (8001074 <HAL_DMA_Abort+0x214>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d04a      	beq.n	8000f36 <HAL_DMA_Abort+0xd6>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a74      	ldr	r2, [pc, #464]	; (8001078 <HAL_DMA_Abort+0x218>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d045      	beq.n	8000f36 <HAL_DMA_Abort+0xd6>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a73      	ldr	r2, [pc, #460]	; (800107c <HAL_DMA_Abort+0x21c>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d040      	beq.n	8000f36 <HAL_DMA_Abort+0xd6>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a71      	ldr	r2, [pc, #452]	; (8001080 <HAL_DMA_Abort+0x220>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d03b      	beq.n	8000f36 <HAL_DMA_Abort+0xd6>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a70      	ldr	r2, [pc, #448]	; (8001084 <HAL_DMA_Abort+0x224>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d036      	beq.n	8000f36 <HAL_DMA_Abort+0xd6>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a6e      	ldr	r2, [pc, #440]	; (8001088 <HAL_DMA_Abort+0x228>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d031      	beq.n	8000f36 <HAL_DMA_Abort+0xd6>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a6d      	ldr	r2, [pc, #436]	; (800108c <HAL_DMA_Abort+0x22c>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d02c      	beq.n	8000f36 <HAL_DMA_Abort+0xd6>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a6b      	ldr	r2, [pc, #428]	; (8001090 <HAL_DMA_Abort+0x230>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d027      	beq.n	8000f36 <HAL_DMA_Abort+0xd6>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a6a      	ldr	r2, [pc, #424]	; (8001094 <HAL_DMA_Abort+0x234>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d022      	beq.n	8000f36 <HAL_DMA_Abort+0xd6>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a68      	ldr	r2, [pc, #416]	; (8001098 <HAL_DMA_Abort+0x238>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d01d      	beq.n	8000f36 <HAL_DMA_Abort+0xd6>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a67      	ldr	r2, [pc, #412]	; (800109c <HAL_DMA_Abort+0x23c>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d018      	beq.n	8000f36 <HAL_DMA_Abort+0xd6>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a65      	ldr	r2, [pc, #404]	; (80010a0 <HAL_DMA_Abort+0x240>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d013      	beq.n	8000f36 <HAL_DMA_Abort+0xd6>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a64      	ldr	r2, [pc, #400]	; (80010a4 <HAL_DMA_Abort+0x244>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d00e      	beq.n	8000f36 <HAL_DMA_Abort+0xd6>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a62      	ldr	r2, [pc, #392]	; (80010a8 <HAL_DMA_Abort+0x248>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d009      	beq.n	8000f36 <HAL_DMA_Abort+0xd6>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a61      	ldr	r2, [pc, #388]	; (80010ac <HAL_DMA_Abort+0x24c>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d004      	beq.n	8000f36 <HAL_DMA_Abort+0xd6>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a5f      	ldr	r2, [pc, #380]	; (80010b0 <HAL_DMA_Abort+0x250>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d101      	bne.n	8000f3a <HAL_DMA_Abort+0xda>
 8000f36:	2301      	movs	r3, #1
 8000f38:	e000      	b.n	8000f3c <HAL_DMA_Abort+0xdc>
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d013      	beq.n	8000f68 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f022 021e 	bic.w	r2, r2, #30
 8000f4e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	695a      	ldr	r2, [r3, #20]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f5e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	617b      	str	r3, [r7, #20]
 8000f66:	e00a      	b.n	8000f7e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f022 020e 	bic.w	r2, r2, #14
 8000f76:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a3c      	ldr	r2, [pc, #240]	; (8001074 <HAL_DMA_Abort+0x214>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d072      	beq.n	800106e <HAL_DMA_Abort+0x20e>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a3a      	ldr	r2, [pc, #232]	; (8001078 <HAL_DMA_Abort+0x218>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d06d      	beq.n	800106e <HAL_DMA_Abort+0x20e>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a39      	ldr	r2, [pc, #228]	; (800107c <HAL_DMA_Abort+0x21c>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d068      	beq.n	800106e <HAL_DMA_Abort+0x20e>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a37      	ldr	r2, [pc, #220]	; (8001080 <HAL_DMA_Abort+0x220>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d063      	beq.n	800106e <HAL_DMA_Abort+0x20e>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a36      	ldr	r2, [pc, #216]	; (8001084 <HAL_DMA_Abort+0x224>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d05e      	beq.n	800106e <HAL_DMA_Abort+0x20e>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a34      	ldr	r2, [pc, #208]	; (8001088 <HAL_DMA_Abort+0x228>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d059      	beq.n	800106e <HAL_DMA_Abort+0x20e>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a33      	ldr	r2, [pc, #204]	; (800108c <HAL_DMA_Abort+0x22c>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d054      	beq.n	800106e <HAL_DMA_Abort+0x20e>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a31      	ldr	r2, [pc, #196]	; (8001090 <HAL_DMA_Abort+0x230>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d04f      	beq.n	800106e <HAL_DMA_Abort+0x20e>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a30      	ldr	r2, [pc, #192]	; (8001094 <HAL_DMA_Abort+0x234>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d04a      	beq.n	800106e <HAL_DMA_Abort+0x20e>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a2e      	ldr	r2, [pc, #184]	; (8001098 <HAL_DMA_Abort+0x238>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d045      	beq.n	800106e <HAL_DMA_Abort+0x20e>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a2d      	ldr	r2, [pc, #180]	; (800109c <HAL_DMA_Abort+0x23c>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d040      	beq.n	800106e <HAL_DMA_Abort+0x20e>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a2b      	ldr	r2, [pc, #172]	; (80010a0 <HAL_DMA_Abort+0x240>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d03b      	beq.n	800106e <HAL_DMA_Abort+0x20e>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a2a      	ldr	r2, [pc, #168]	; (80010a4 <HAL_DMA_Abort+0x244>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d036      	beq.n	800106e <HAL_DMA_Abort+0x20e>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a28      	ldr	r2, [pc, #160]	; (80010a8 <HAL_DMA_Abort+0x248>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d031      	beq.n	800106e <HAL_DMA_Abort+0x20e>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a27      	ldr	r2, [pc, #156]	; (80010ac <HAL_DMA_Abort+0x24c>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d02c      	beq.n	800106e <HAL_DMA_Abort+0x20e>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a25      	ldr	r2, [pc, #148]	; (80010b0 <HAL_DMA_Abort+0x250>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d027      	beq.n	800106e <HAL_DMA_Abort+0x20e>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a24      	ldr	r2, [pc, #144]	; (80010b4 <HAL_DMA_Abort+0x254>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d022      	beq.n	800106e <HAL_DMA_Abort+0x20e>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a22      	ldr	r2, [pc, #136]	; (80010b8 <HAL_DMA_Abort+0x258>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d01d      	beq.n	800106e <HAL_DMA_Abort+0x20e>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a21      	ldr	r2, [pc, #132]	; (80010bc <HAL_DMA_Abort+0x25c>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d018      	beq.n	800106e <HAL_DMA_Abort+0x20e>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a1f      	ldr	r2, [pc, #124]	; (80010c0 <HAL_DMA_Abort+0x260>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d013      	beq.n	800106e <HAL_DMA_Abort+0x20e>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a1e      	ldr	r2, [pc, #120]	; (80010c4 <HAL_DMA_Abort+0x264>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d00e      	beq.n	800106e <HAL_DMA_Abort+0x20e>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a1c      	ldr	r2, [pc, #112]	; (80010c8 <HAL_DMA_Abort+0x268>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d009      	beq.n	800106e <HAL_DMA_Abort+0x20e>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a1b      	ldr	r2, [pc, #108]	; (80010cc <HAL_DMA_Abort+0x26c>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d004      	beq.n	800106e <HAL_DMA_Abort+0x20e>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a19      	ldr	r2, [pc, #100]	; (80010d0 <HAL_DMA_Abort+0x270>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d132      	bne.n	80010d4 <HAL_DMA_Abort+0x274>
 800106e:	2301      	movs	r3, #1
 8001070:	e031      	b.n	80010d6 <HAL_DMA_Abort+0x276>
 8001072:	bf00      	nop
 8001074:	40020010 	.word	0x40020010
 8001078:	40020028 	.word	0x40020028
 800107c:	40020040 	.word	0x40020040
 8001080:	40020058 	.word	0x40020058
 8001084:	40020070 	.word	0x40020070
 8001088:	40020088 	.word	0x40020088
 800108c:	400200a0 	.word	0x400200a0
 8001090:	400200b8 	.word	0x400200b8
 8001094:	40020410 	.word	0x40020410
 8001098:	40020428 	.word	0x40020428
 800109c:	40020440 	.word	0x40020440
 80010a0:	40020458 	.word	0x40020458
 80010a4:	40020470 	.word	0x40020470
 80010a8:	40020488 	.word	0x40020488
 80010ac:	400204a0 	.word	0x400204a0
 80010b0:	400204b8 	.word	0x400204b8
 80010b4:	58025408 	.word	0x58025408
 80010b8:	5802541c 	.word	0x5802541c
 80010bc:	58025430 	.word	0x58025430
 80010c0:	58025444 	.word	0x58025444
 80010c4:	58025458 	.word	0x58025458
 80010c8:	5802546c 	.word	0x5802546c
 80010cc:	58025480 	.word	0x58025480
 80010d0:	58025494 	.word	0x58025494
 80010d4:	2300      	movs	r3, #0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d007      	beq.n	80010ea <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a6d      	ldr	r2, [pc, #436]	; (80012a4 <HAL_DMA_Abort+0x444>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d04a      	beq.n	800118a <HAL_DMA_Abort+0x32a>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a6b      	ldr	r2, [pc, #428]	; (80012a8 <HAL_DMA_Abort+0x448>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d045      	beq.n	800118a <HAL_DMA_Abort+0x32a>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a6a      	ldr	r2, [pc, #424]	; (80012ac <HAL_DMA_Abort+0x44c>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d040      	beq.n	800118a <HAL_DMA_Abort+0x32a>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a68      	ldr	r2, [pc, #416]	; (80012b0 <HAL_DMA_Abort+0x450>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d03b      	beq.n	800118a <HAL_DMA_Abort+0x32a>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a67      	ldr	r2, [pc, #412]	; (80012b4 <HAL_DMA_Abort+0x454>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d036      	beq.n	800118a <HAL_DMA_Abort+0x32a>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a65      	ldr	r2, [pc, #404]	; (80012b8 <HAL_DMA_Abort+0x458>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d031      	beq.n	800118a <HAL_DMA_Abort+0x32a>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a64      	ldr	r2, [pc, #400]	; (80012bc <HAL_DMA_Abort+0x45c>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d02c      	beq.n	800118a <HAL_DMA_Abort+0x32a>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a62      	ldr	r2, [pc, #392]	; (80012c0 <HAL_DMA_Abort+0x460>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d027      	beq.n	800118a <HAL_DMA_Abort+0x32a>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a61      	ldr	r2, [pc, #388]	; (80012c4 <HAL_DMA_Abort+0x464>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d022      	beq.n	800118a <HAL_DMA_Abort+0x32a>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a5f      	ldr	r2, [pc, #380]	; (80012c8 <HAL_DMA_Abort+0x468>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d01d      	beq.n	800118a <HAL_DMA_Abort+0x32a>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a5e      	ldr	r2, [pc, #376]	; (80012cc <HAL_DMA_Abort+0x46c>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d018      	beq.n	800118a <HAL_DMA_Abort+0x32a>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a5c      	ldr	r2, [pc, #368]	; (80012d0 <HAL_DMA_Abort+0x470>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d013      	beq.n	800118a <HAL_DMA_Abort+0x32a>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a5b      	ldr	r2, [pc, #364]	; (80012d4 <HAL_DMA_Abort+0x474>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d00e      	beq.n	800118a <HAL_DMA_Abort+0x32a>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a59      	ldr	r2, [pc, #356]	; (80012d8 <HAL_DMA_Abort+0x478>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d009      	beq.n	800118a <HAL_DMA_Abort+0x32a>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a58      	ldr	r2, [pc, #352]	; (80012dc <HAL_DMA_Abort+0x47c>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d004      	beq.n	800118a <HAL_DMA_Abort+0x32a>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a56      	ldr	r2, [pc, #344]	; (80012e0 <HAL_DMA_Abort+0x480>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d108      	bne.n	800119c <HAL_DMA_Abort+0x33c>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f022 0201 	bic.w	r2, r2, #1
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	e007      	b.n	80011ac <HAL_DMA_Abort+0x34c>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 0201 	bic.w	r2, r2, #1
 80011aa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80011ac:	e013      	b.n	80011d6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011ae:	f7ff fd2f 	bl	8000c10 <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	2b05      	cmp	r3, #5
 80011ba:	d90c      	bls.n	80011d6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2220      	movs	r2, #32
 80011c0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2203      	movs	r2, #3
 80011c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e12d      	b.n	8001432 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1e5      	bne.n	80011ae <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a2f      	ldr	r2, [pc, #188]	; (80012a4 <HAL_DMA_Abort+0x444>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d04a      	beq.n	8001282 <HAL_DMA_Abort+0x422>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a2d      	ldr	r2, [pc, #180]	; (80012a8 <HAL_DMA_Abort+0x448>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d045      	beq.n	8001282 <HAL_DMA_Abort+0x422>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a2c      	ldr	r2, [pc, #176]	; (80012ac <HAL_DMA_Abort+0x44c>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d040      	beq.n	8001282 <HAL_DMA_Abort+0x422>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a2a      	ldr	r2, [pc, #168]	; (80012b0 <HAL_DMA_Abort+0x450>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d03b      	beq.n	8001282 <HAL_DMA_Abort+0x422>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a29      	ldr	r2, [pc, #164]	; (80012b4 <HAL_DMA_Abort+0x454>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d036      	beq.n	8001282 <HAL_DMA_Abort+0x422>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a27      	ldr	r2, [pc, #156]	; (80012b8 <HAL_DMA_Abort+0x458>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d031      	beq.n	8001282 <HAL_DMA_Abort+0x422>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a26      	ldr	r2, [pc, #152]	; (80012bc <HAL_DMA_Abort+0x45c>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d02c      	beq.n	8001282 <HAL_DMA_Abort+0x422>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a24      	ldr	r2, [pc, #144]	; (80012c0 <HAL_DMA_Abort+0x460>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d027      	beq.n	8001282 <HAL_DMA_Abort+0x422>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a23      	ldr	r2, [pc, #140]	; (80012c4 <HAL_DMA_Abort+0x464>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d022      	beq.n	8001282 <HAL_DMA_Abort+0x422>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a21      	ldr	r2, [pc, #132]	; (80012c8 <HAL_DMA_Abort+0x468>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d01d      	beq.n	8001282 <HAL_DMA_Abort+0x422>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a20      	ldr	r2, [pc, #128]	; (80012cc <HAL_DMA_Abort+0x46c>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d018      	beq.n	8001282 <HAL_DMA_Abort+0x422>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a1e      	ldr	r2, [pc, #120]	; (80012d0 <HAL_DMA_Abort+0x470>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d013      	beq.n	8001282 <HAL_DMA_Abort+0x422>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a1d      	ldr	r2, [pc, #116]	; (80012d4 <HAL_DMA_Abort+0x474>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d00e      	beq.n	8001282 <HAL_DMA_Abort+0x422>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a1b      	ldr	r2, [pc, #108]	; (80012d8 <HAL_DMA_Abort+0x478>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d009      	beq.n	8001282 <HAL_DMA_Abort+0x422>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a1a      	ldr	r2, [pc, #104]	; (80012dc <HAL_DMA_Abort+0x47c>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d004      	beq.n	8001282 <HAL_DMA_Abort+0x422>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a18      	ldr	r2, [pc, #96]	; (80012e0 <HAL_DMA_Abort+0x480>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d101      	bne.n	8001286 <HAL_DMA_Abort+0x426>
 8001282:	2301      	movs	r3, #1
 8001284:	e000      	b.n	8001288 <HAL_DMA_Abort+0x428>
 8001286:	2300      	movs	r3, #0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d02b      	beq.n	80012e4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001290:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001296:	f003 031f 	and.w	r3, r3, #31
 800129a:	223f      	movs	r2, #63	; 0x3f
 800129c:	409a      	lsls	r2, r3
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	e02a      	b.n	80012fa <HAL_DMA_Abort+0x49a>
 80012a4:	40020010 	.word	0x40020010
 80012a8:	40020028 	.word	0x40020028
 80012ac:	40020040 	.word	0x40020040
 80012b0:	40020058 	.word	0x40020058
 80012b4:	40020070 	.word	0x40020070
 80012b8:	40020088 	.word	0x40020088
 80012bc:	400200a0 	.word	0x400200a0
 80012c0:	400200b8 	.word	0x400200b8
 80012c4:	40020410 	.word	0x40020410
 80012c8:	40020428 	.word	0x40020428
 80012cc:	40020440 	.word	0x40020440
 80012d0:	40020458 	.word	0x40020458
 80012d4:	40020470 	.word	0x40020470
 80012d8:	40020488 	.word	0x40020488
 80012dc:	400204a0 	.word	0x400204a0
 80012e0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ee:	f003 031f 	and.w	r3, r3, #31
 80012f2:	2201      	movs	r2, #1
 80012f4:	409a      	lsls	r2, r3
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a4f      	ldr	r2, [pc, #316]	; (800143c <HAL_DMA_Abort+0x5dc>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d072      	beq.n	80013ea <HAL_DMA_Abort+0x58a>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a4d      	ldr	r2, [pc, #308]	; (8001440 <HAL_DMA_Abort+0x5e0>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d06d      	beq.n	80013ea <HAL_DMA_Abort+0x58a>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a4c      	ldr	r2, [pc, #304]	; (8001444 <HAL_DMA_Abort+0x5e4>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d068      	beq.n	80013ea <HAL_DMA_Abort+0x58a>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a4a      	ldr	r2, [pc, #296]	; (8001448 <HAL_DMA_Abort+0x5e8>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d063      	beq.n	80013ea <HAL_DMA_Abort+0x58a>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a49      	ldr	r2, [pc, #292]	; (800144c <HAL_DMA_Abort+0x5ec>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d05e      	beq.n	80013ea <HAL_DMA_Abort+0x58a>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a47      	ldr	r2, [pc, #284]	; (8001450 <HAL_DMA_Abort+0x5f0>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d059      	beq.n	80013ea <HAL_DMA_Abort+0x58a>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a46      	ldr	r2, [pc, #280]	; (8001454 <HAL_DMA_Abort+0x5f4>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d054      	beq.n	80013ea <HAL_DMA_Abort+0x58a>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a44      	ldr	r2, [pc, #272]	; (8001458 <HAL_DMA_Abort+0x5f8>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d04f      	beq.n	80013ea <HAL_DMA_Abort+0x58a>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a43      	ldr	r2, [pc, #268]	; (800145c <HAL_DMA_Abort+0x5fc>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d04a      	beq.n	80013ea <HAL_DMA_Abort+0x58a>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a41      	ldr	r2, [pc, #260]	; (8001460 <HAL_DMA_Abort+0x600>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d045      	beq.n	80013ea <HAL_DMA_Abort+0x58a>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a40      	ldr	r2, [pc, #256]	; (8001464 <HAL_DMA_Abort+0x604>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d040      	beq.n	80013ea <HAL_DMA_Abort+0x58a>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a3e      	ldr	r2, [pc, #248]	; (8001468 <HAL_DMA_Abort+0x608>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d03b      	beq.n	80013ea <HAL_DMA_Abort+0x58a>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a3d      	ldr	r2, [pc, #244]	; (800146c <HAL_DMA_Abort+0x60c>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d036      	beq.n	80013ea <HAL_DMA_Abort+0x58a>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a3b      	ldr	r2, [pc, #236]	; (8001470 <HAL_DMA_Abort+0x610>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d031      	beq.n	80013ea <HAL_DMA_Abort+0x58a>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a3a      	ldr	r2, [pc, #232]	; (8001474 <HAL_DMA_Abort+0x614>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d02c      	beq.n	80013ea <HAL_DMA_Abort+0x58a>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a38      	ldr	r2, [pc, #224]	; (8001478 <HAL_DMA_Abort+0x618>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d027      	beq.n	80013ea <HAL_DMA_Abort+0x58a>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a37      	ldr	r2, [pc, #220]	; (800147c <HAL_DMA_Abort+0x61c>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d022      	beq.n	80013ea <HAL_DMA_Abort+0x58a>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a35      	ldr	r2, [pc, #212]	; (8001480 <HAL_DMA_Abort+0x620>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d01d      	beq.n	80013ea <HAL_DMA_Abort+0x58a>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a34      	ldr	r2, [pc, #208]	; (8001484 <HAL_DMA_Abort+0x624>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d018      	beq.n	80013ea <HAL_DMA_Abort+0x58a>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a32      	ldr	r2, [pc, #200]	; (8001488 <HAL_DMA_Abort+0x628>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d013      	beq.n	80013ea <HAL_DMA_Abort+0x58a>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a31      	ldr	r2, [pc, #196]	; (800148c <HAL_DMA_Abort+0x62c>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d00e      	beq.n	80013ea <HAL_DMA_Abort+0x58a>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a2f      	ldr	r2, [pc, #188]	; (8001490 <HAL_DMA_Abort+0x630>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d009      	beq.n	80013ea <HAL_DMA_Abort+0x58a>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a2e      	ldr	r2, [pc, #184]	; (8001494 <HAL_DMA_Abort+0x634>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d004      	beq.n	80013ea <HAL_DMA_Abort+0x58a>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a2c      	ldr	r2, [pc, #176]	; (8001498 <HAL_DMA_Abort+0x638>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d101      	bne.n	80013ee <HAL_DMA_Abort+0x58e>
 80013ea:	2301      	movs	r3, #1
 80013ec:	e000      	b.n	80013f0 <HAL_DMA_Abort+0x590>
 80013ee:	2300      	movs	r3, #0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d015      	beq.n	8001420 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80013fc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001402:	2b00      	cmp	r3, #0
 8001404:	d00c      	beq.n	8001420 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001410:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001414:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800141e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2201      	movs	r2, #1
 8001424:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40020010 	.word	0x40020010
 8001440:	40020028 	.word	0x40020028
 8001444:	40020040 	.word	0x40020040
 8001448:	40020058 	.word	0x40020058
 800144c:	40020070 	.word	0x40020070
 8001450:	40020088 	.word	0x40020088
 8001454:	400200a0 	.word	0x400200a0
 8001458:	400200b8 	.word	0x400200b8
 800145c:	40020410 	.word	0x40020410
 8001460:	40020428 	.word	0x40020428
 8001464:	40020440 	.word	0x40020440
 8001468:	40020458 	.word	0x40020458
 800146c:	40020470 	.word	0x40020470
 8001470:	40020488 	.word	0x40020488
 8001474:	400204a0 	.word	0x400204a0
 8001478:	400204b8 	.word	0x400204b8
 800147c:	58025408 	.word	0x58025408
 8001480:	5802541c 	.word	0x5802541c
 8001484:	58025430 	.word	0x58025430
 8001488:	58025444 	.word	0x58025444
 800148c:	58025458 	.word	0x58025458
 8001490:	5802546c 	.word	0x5802546c
 8001494:	58025480 	.word	0x58025480
 8001498:	58025494 	.word	0x58025494

0800149c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e237      	b.n	800191e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d004      	beq.n	80014c4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2280      	movs	r2, #128	; 0x80
 80014be:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e22c      	b.n	800191e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a5c      	ldr	r2, [pc, #368]	; (800163c <HAL_DMA_Abort_IT+0x1a0>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d04a      	beq.n	8001564 <HAL_DMA_Abort_IT+0xc8>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a5b      	ldr	r2, [pc, #364]	; (8001640 <HAL_DMA_Abort_IT+0x1a4>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d045      	beq.n	8001564 <HAL_DMA_Abort_IT+0xc8>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a59      	ldr	r2, [pc, #356]	; (8001644 <HAL_DMA_Abort_IT+0x1a8>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d040      	beq.n	8001564 <HAL_DMA_Abort_IT+0xc8>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a58      	ldr	r2, [pc, #352]	; (8001648 <HAL_DMA_Abort_IT+0x1ac>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d03b      	beq.n	8001564 <HAL_DMA_Abort_IT+0xc8>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a56      	ldr	r2, [pc, #344]	; (800164c <HAL_DMA_Abort_IT+0x1b0>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d036      	beq.n	8001564 <HAL_DMA_Abort_IT+0xc8>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a55      	ldr	r2, [pc, #340]	; (8001650 <HAL_DMA_Abort_IT+0x1b4>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d031      	beq.n	8001564 <HAL_DMA_Abort_IT+0xc8>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a53      	ldr	r2, [pc, #332]	; (8001654 <HAL_DMA_Abort_IT+0x1b8>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d02c      	beq.n	8001564 <HAL_DMA_Abort_IT+0xc8>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a52      	ldr	r2, [pc, #328]	; (8001658 <HAL_DMA_Abort_IT+0x1bc>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d027      	beq.n	8001564 <HAL_DMA_Abort_IT+0xc8>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a50      	ldr	r2, [pc, #320]	; (800165c <HAL_DMA_Abort_IT+0x1c0>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d022      	beq.n	8001564 <HAL_DMA_Abort_IT+0xc8>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a4f      	ldr	r2, [pc, #316]	; (8001660 <HAL_DMA_Abort_IT+0x1c4>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d01d      	beq.n	8001564 <HAL_DMA_Abort_IT+0xc8>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a4d      	ldr	r2, [pc, #308]	; (8001664 <HAL_DMA_Abort_IT+0x1c8>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d018      	beq.n	8001564 <HAL_DMA_Abort_IT+0xc8>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a4c      	ldr	r2, [pc, #304]	; (8001668 <HAL_DMA_Abort_IT+0x1cc>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d013      	beq.n	8001564 <HAL_DMA_Abort_IT+0xc8>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a4a      	ldr	r2, [pc, #296]	; (800166c <HAL_DMA_Abort_IT+0x1d0>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d00e      	beq.n	8001564 <HAL_DMA_Abort_IT+0xc8>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a49      	ldr	r2, [pc, #292]	; (8001670 <HAL_DMA_Abort_IT+0x1d4>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d009      	beq.n	8001564 <HAL_DMA_Abort_IT+0xc8>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a47      	ldr	r2, [pc, #284]	; (8001674 <HAL_DMA_Abort_IT+0x1d8>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d004      	beq.n	8001564 <HAL_DMA_Abort_IT+0xc8>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a46      	ldr	r2, [pc, #280]	; (8001678 <HAL_DMA_Abort_IT+0x1dc>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d101      	bne.n	8001568 <HAL_DMA_Abort_IT+0xcc>
 8001564:	2301      	movs	r3, #1
 8001566:	e000      	b.n	800156a <HAL_DMA_Abort_IT+0xce>
 8001568:	2300      	movs	r3, #0
 800156a:	2b00      	cmp	r3, #0
 800156c:	f000 8086 	beq.w	800167c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2204      	movs	r2, #4
 8001574:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a2f      	ldr	r2, [pc, #188]	; (800163c <HAL_DMA_Abort_IT+0x1a0>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d04a      	beq.n	8001618 <HAL_DMA_Abort_IT+0x17c>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a2e      	ldr	r2, [pc, #184]	; (8001640 <HAL_DMA_Abort_IT+0x1a4>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d045      	beq.n	8001618 <HAL_DMA_Abort_IT+0x17c>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a2c      	ldr	r2, [pc, #176]	; (8001644 <HAL_DMA_Abort_IT+0x1a8>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d040      	beq.n	8001618 <HAL_DMA_Abort_IT+0x17c>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a2b      	ldr	r2, [pc, #172]	; (8001648 <HAL_DMA_Abort_IT+0x1ac>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d03b      	beq.n	8001618 <HAL_DMA_Abort_IT+0x17c>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a29      	ldr	r2, [pc, #164]	; (800164c <HAL_DMA_Abort_IT+0x1b0>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d036      	beq.n	8001618 <HAL_DMA_Abort_IT+0x17c>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a28      	ldr	r2, [pc, #160]	; (8001650 <HAL_DMA_Abort_IT+0x1b4>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d031      	beq.n	8001618 <HAL_DMA_Abort_IT+0x17c>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a26      	ldr	r2, [pc, #152]	; (8001654 <HAL_DMA_Abort_IT+0x1b8>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d02c      	beq.n	8001618 <HAL_DMA_Abort_IT+0x17c>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a25      	ldr	r2, [pc, #148]	; (8001658 <HAL_DMA_Abort_IT+0x1bc>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d027      	beq.n	8001618 <HAL_DMA_Abort_IT+0x17c>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a23      	ldr	r2, [pc, #140]	; (800165c <HAL_DMA_Abort_IT+0x1c0>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d022      	beq.n	8001618 <HAL_DMA_Abort_IT+0x17c>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a22      	ldr	r2, [pc, #136]	; (8001660 <HAL_DMA_Abort_IT+0x1c4>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d01d      	beq.n	8001618 <HAL_DMA_Abort_IT+0x17c>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a20      	ldr	r2, [pc, #128]	; (8001664 <HAL_DMA_Abort_IT+0x1c8>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d018      	beq.n	8001618 <HAL_DMA_Abort_IT+0x17c>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a1f      	ldr	r2, [pc, #124]	; (8001668 <HAL_DMA_Abort_IT+0x1cc>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d013      	beq.n	8001618 <HAL_DMA_Abort_IT+0x17c>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a1d      	ldr	r2, [pc, #116]	; (800166c <HAL_DMA_Abort_IT+0x1d0>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d00e      	beq.n	8001618 <HAL_DMA_Abort_IT+0x17c>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a1c      	ldr	r2, [pc, #112]	; (8001670 <HAL_DMA_Abort_IT+0x1d4>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d009      	beq.n	8001618 <HAL_DMA_Abort_IT+0x17c>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a1a      	ldr	r2, [pc, #104]	; (8001674 <HAL_DMA_Abort_IT+0x1d8>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d004      	beq.n	8001618 <HAL_DMA_Abort_IT+0x17c>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a19      	ldr	r2, [pc, #100]	; (8001678 <HAL_DMA_Abort_IT+0x1dc>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d108      	bne.n	800162a <HAL_DMA_Abort_IT+0x18e>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f022 0201 	bic.w	r2, r2, #1
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	e178      	b.n	800191c <HAL_DMA_Abort_IT+0x480>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 0201 	bic.w	r2, r2, #1
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	e16f      	b.n	800191c <HAL_DMA_Abort_IT+0x480>
 800163c:	40020010 	.word	0x40020010
 8001640:	40020028 	.word	0x40020028
 8001644:	40020040 	.word	0x40020040
 8001648:	40020058 	.word	0x40020058
 800164c:	40020070 	.word	0x40020070
 8001650:	40020088 	.word	0x40020088
 8001654:	400200a0 	.word	0x400200a0
 8001658:	400200b8 	.word	0x400200b8
 800165c:	40020410 	.word	0x40020410
 8001660:	40020428 	.word	0x40020428
 8001664:	40020440 	.word	0x40020440
 8001668:	40020458 	.word	0x40020458
 800166c:	40020470 	.word	0x40020470
 8001670:	40020488 	.word	0x40020488
 8001674:	400204a0 	.word	0x400204a0
 8001678:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 020e 	bic.w	r2, r2, #14
 800168a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a6c      	ldr	r2, [pc, #432]	; (8001844 <HAL_DMA_Abort_IT+0x3a8>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d04a      	beq.n	800172c <HAL_DMA_Abort_IT+0x290>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a6b      	ldr	r2, [pc, #428]	; (8001848 <HAL_DMA_Abort_IT+0x3ac>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d045      	beq.n	800172c <HAL_DMA_Abort_IT+0x290>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a69      	ldr	r2, [pc, #420]	; (800184c <HAL_DMA_Abort_IT+0x3b0>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d040      	beq.n	800172c <HAL_DMA_Abort_IT+0x290>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a68      	ldr	r2, [pc, #416]	; (8001850 <HAL_DMA_Abort_IT+0x3b4>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d03b      	beq.n	800172c <HAL_DMA_Abort_IT+0x290>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a66      	ldr	r2, [pc, #408]	; (8001854 <HAL_DMA_Abort_IT+0x3b8>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d036      	beq.n	800172c <HAL_DMA_Abort_IT+0x290>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a65      	ldr	r2, [pc, #404]	; (8001858 <HAL_DMA_Abort_IT+0x3bc>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d031      	beq.n	800172c <HAL_DMA_Abort_IT+0x290>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a63      	ldr	r2, [pc, #396]	; (800185c <HAL_DMA_Abort_IT+0x3c0>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d02c      	beq.n	800172c <HAL_DMA_Abort_IT+0x290>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a62      	ldr	r2, [pc, #392]	; (8001860 <HAL_DMA_Abort_IT+0x3c4>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d027      	beq.n	800172c <HAL_DMA_Abort_IT+0x290>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a60      	ldr	r2, [pc, #384]	; (8001864 <HAL_DMA_Abort_IT+0x3c8>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d022      	beq.n	800172c <HAL_DMA_Abort_IT+0x290>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a5f      	ldr	r2, [pc, #380]	; (8001868 <HAL_DMA_Abort_IT+0x3cc>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d01d      	beq.n	800172c <HAL_DMA_Abort_IT+0x290>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a5d      	ldr	r2, [pc, #372]	; (800186c <HAL_DMA_Abort_IT+0x3d0>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d018      	beq.n	800172c <HAL_DMA_Abort_IT+0x290>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a5c      	ldr	r2, [pc, #368]	; (8001870 <HAL_DMA_Abort_IT+0x3d4>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d013      	beq.n	800172c <HAL_DMA_Abort_IT+0x290>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a5a      	ldr	r2, [pc, #360]	; (8001874 <HAL_DMA_Abort_IT+0x3d8>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d00e      	beq.n	800172c <HAL_DMA_Abort_IT+0x290>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a59      	ldr	r2, [pc, #356]	; (8001878 <HAL_DMA_Abort_IT+0x3dc>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d009      	beq.n	800172c <HAL_DMA_Abort_IT+0x290>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a57      	ldr	r2, [pc, #348]	; (800187c <HAL_DMA_Abort_IT+0x3e0>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d004      	beq.n	800172c <HAL_DMA_Abort_IT+0x290>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a56      	ldr	r2, [pc, #344]	; (8001880 <HAL_DMA_Abort_IT+0x3e4>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d108      	bne.n	800173e <HAL_DMA_Abort_IT+0x2a2>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 0201 	bic.w	r2, r2, #1
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	e007      	b.n	800174e <HAL_DMA_Abort_IT+0x2b2>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 0201 	bic.w	r2, r2, #1
 800174c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a3c      	ldr	r2, [pc, #240]	; (8001844 <HAL_DMA_Abort_IT+0x3a8>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d072      	beq.n	800183e <HAL_DMA_Abort_IT+0x3a2>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a3a      	ldr	r2, [pc, #232]	; (8001848 <HAL_DMA_Abort_IT+0x3ac>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d06d      	beq.n	800183e <HAL_DMA_Abort_IT+0x3a2>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a39      	ldr	r2, [pc, #228]	; (800184c <HAL_DMA_Abort_IT+0x3b0>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d068      	beq.n	800183e <HAL_DMA_Abort_IT+0x3a2>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a37      	ldr	r2, [pc, #220]	; (8001850 <HAL_DMA_Abort_IT+0x3b4>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d063      	beq.n	800183e <HAL_DMA_Abort_IT+0x3a2>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a36      	ldr	r2, [pc, #216]	; (8001854 <HAL_DMA_Abort_IT+0x3b8>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d05e      	beq.n	800183e <HAL_DMA_Abort_IT+0x3a2>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a34      	ldr	r2, [pc, #208]	; (8001858 <HAL_DMA_Abort_IT+0x3bc>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d059      	beq.n	800183e <HAL_DMA_Abort_IT+0x3a2>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a33      	ldr	r2, [pc, #204]	; (800185c <HAL_DMA_Abort_IT+0x3c0>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d054      	beq.n	800183e <HAL_DMA_Abort_IT+0x3a2>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a31      	ldr	r2, [pc, #196]	; (8001860 <HAL_DMA_Abort_IT+0x3c4>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d04f      	beq.n	800183e <HAL_DMA_Abort_IT+0x3a2>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a30      	ldr	r2, [pc, #192]	; (8001864 <HAL_DMA_Abort_IT+0x3c8>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d04a      	beq.n	800183e <HAL_DMA_Abort_IT+0x3a2>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a2e      	ldr	r2, [pc, #184]	; (8001868 <HAL_DMA_Abort_IT+0x3cc>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d045      	beq.n	800183e <HAL_DMA_Abort_IT+0x3a2>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a2d      	ldr	r2, [pc, #180]	; (800186c <HAL_DMA_Abort_IT+0x3d0>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d040      	beq.n	800183e <HAL_DMA_Abort_IT+0x3a2>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a2b      	ldr	r2, [pc, #172]	; (8001870 <HAL_DMA_Abort_IT+0x3d4>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d03b      	beq.n	800183e <HAL_DMA_Abort_IT+0x3a2>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a2a      	ldr	r2, [pc, #168]	; (8001874 <HAL_DMA_Abort_IT+0x3d8>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d036      	beq.n	800183e <HAL_DMA_Abort_IT+0x3a2>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a28      	ldr	r2, [pc, #160]	; (8001878 <HAL_DMA_Abort_IT+0x3dc>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d031      	beq.n	800183e <HAL_DMA_Abort_IT+0x3a2>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a27      	ldr	r2, [pc, #156]	; (800187c <HAL_DMA_Abort_IT+0x3e0>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d02c      	beq.n	800183e <HAL_DMA_Abort_IT+0x3a2>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a25      	ldr	r2, [pc, #148]	; (8001880 <HAL_DMA_Abort_IT+0x3e4>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d027      	beq.n	800183e <HAL_DMA_Abort_IT+0x3a2>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a24      	ldr	r2, [pc, #144]	; (8001884 <HAL_DMA_Abort_IT+0x3e8>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d022      	beq.n	800183e <HAL_DMA_Abort_IT+0x3a2>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a22      	ldr	r2, [pc, #136]	; (8001888 <HAL_DMA_Abort_IT+0x3ec>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d01d      	beq.n	800183e <HAL_DMA_Abort_IT+0x3a2>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a21      	ldr	r2, [pc, #132]	; (800188c <HAL_DMA_Abort_IT+0x3f0>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d018      	beq.n	800183e <HAL_DMA_Abort_IT+0x3a2>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a1f      	ldr	r2, [pc, #124]	; (8001890 <HAL_DMA_Abort_IT+0x3f4>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d013      	beq.n	800183e <HAL_DMA_Abort_IT+0x3a2>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a1e      	ldr	r2, [pc, #120]	; (8001894 <HAL_DMA_Abort_IT+0x3f8>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d00e      	beq.n	800183e <HAL_DMA_Abort_IT+0x3a2>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a1c      	ldr	r2, [pc, #112]	; (8001898 <HAL_DMA_Abort_IT+0x3fc>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d009      	beq.n	800183e <HAL_DMA_Abort_IT+0x3a2>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a1b      	ldr	r2, [pc, #108]	; (800189c <HAL_DMA_Abort_IT+0x400>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d004      	beq.n	800183e <HAL_DMA_Abort_IT+0x3a2>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a19      	ldr	r2, [pc, #100]	; (80018a0 <HAL_DMA_Abort_IT+0x404>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d132      	bne.n	80018a4 <HAL_DMA_Abort_IT+0x408>
 800183e:	2301      	movs	r3, #1
 8001840:	e031      	b.n	80018a6 <HAL_DMA_Abort_IT+0x40a>
 8001842:	bf00      	nop
 8001844:	40020010 	.word	0x40020010
 8001848:	40020028 	.word	0x40020028
 800184c:	40020040 	.word	0x40020040
 8001850:	40020058 	.word	0x40020058
 8001854:	40020070 	.word	0x40020070
 8001858:	40020088 	.word	0x40020088
 800185c:	400200a0 	.word	0x400200a0
 8001860:	400200b8 	.word	0x400200b8
 8001864:	40020410 	.word	0x40020410
 8001868:	40020428 	.word	0x40020428
 800186c:	40020440 	.word	0x40020440
 8001870:	40020458 	.word	0x40020458
 8001874:	40020470 	.word	0x40020470
 8001878:	40020488 	.word	0x40020488
 800187c:	400204a0 	.word	0x400204a0
 8001880:	400204b8 	.word	0x400204b8
 8001884:	58025408 	.word	0x58025408
 8001888:	5802541c 	.word	0x5802541c
 800188c:	58025430 	.word	0x58025430
 8001890:	58025444 	.word	0x58025444
 8001894:	58025458 	.word	0x58025458
 8001898:	5802546c 	.word	0x5802546c
 800189c:	58025480 	.word	0x58025480
 80018a0:	58025494 	.word	0x58025494
 80018a4:	2300      	movs	r3, #0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d028      	beq.n	80018fc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018b8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018be:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c4:	f003 031f 	and.w	r3, r3, #31
 80018c8:	2201      	movs	r2, #1
 80018ca:	409a      	lsls	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80018d8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d00c      	beq.n	80018fc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018f0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80018fa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop

08001928 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001928:	b480      	push	{r7}
 800192a:	b089      	sub	sp, #36	; 0x24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001936:	4b89      	ldr	r3, [pc, #548]	; (8001b5c <HAL_GPIO_Init+0x234>)
 8001938:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800193a:	e194      	b.n	8001c66 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	2101      	movs	r1, #1
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	fa01 f303 	lsl.w	r3, r1, r3
 8001948:	4013      	ands	r3, r2
 800194a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	2b00      	cmp	r3, #0
 8001950:	f000 8186 	beq.w	8001c60 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 0303 	and.w	r3, r3, #3
 800195c:	2b01      	cmp	r3, #1
 800195e:	d005      	beq.n	800196c <HAL_GPIO_Init+0x44>
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 0303 	and.w	r3, r3, #3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d130      	bne.n	80019ce <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	2203      	movs	r2, #3
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	68da      	ldr	r2, [r3, #12]
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019a2:	2201      	movs	r2, #1
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4013      	ands	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	091b      	lsrs	r3, r3, #4
 80019b8:	f003 0201 	and.w	r2, r3, #1
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	2b03      	cmp	r3, #3
 80019d8:	d017      	beq.n	8001a0a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	2203      	movs	r2, #3
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43db      	mvns	r3, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4013      	ands	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	689a      	ldr	r2, [r3, #8]
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d123      	bne.n	8001a5e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	08da      	lsrs	r2, r3, #3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	3208      	adds	r2, #8
 8001a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	220f      	movs	r2, #15
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43db      	mvns	r3, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4013      	ands	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	691a      	ldr	r2, [r3, #16]
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	08da      	lsrs	r2, r3, #3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3208      	adds	r2, #8
 8001a58:	69b9      	ldr	r1, [r7, #24]
 8001a5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	2203      	movs	r2, #3
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4013      	ands	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f003 0203 	and.w	r2, r3, #3
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f000 80e0 	beq.w	8001c60 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa0:	4b2f      	ldr	r3, [pc, #188]	; (8001b60 <HAL_GPIO_Init+0x238>)
 8001aa2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001aa6:	4a2e      	ldr	r2, [pc, #184]	; (8001b60 <HAL_GPIO_Init+0x238>)
 8001aa8:	f043 0302 	orr.w	r3, r3, #2
 8001aac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001ab0:	4b2b      	ldr	r3, [pc, #172]	; (8001b60 <HAL_GPIO_Init+0x238>)
 8001ab2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001abe:	4a29      	ldr	r2, [pc, #164]	; (8001b64 <HAL_GPIO_Init+0x23c>)
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	089b      	lsrs	r3, r3, #2
 8001ac4:	3302      	adds	r3, #2
 8001ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	f003 0303 	and.w	r3, r3, #3
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	220f      	movs	r2, #15
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a20      	ldr	r2, [pc, #128]	; (8001b68 <HAL_GPIO_Init+0x240>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d052      	beq.n	8001b90 <HAL_GPIO_Init+0x268>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a1f      	ldr	r2, [pc, #124]	; (8001b6c <HAL_GPIO_Init+0x244>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d031      	beq.n	8001b56 <HAL_GPIO_Init+0x22e>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a1e      	ldr	r2, [pc, #120]	; (8001b70 <HAL_GPIO_Init+0x248>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d02b      	beq.n	8001b52 <HAL_GPIO_Init+0x22a>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a1d      	ldr	r2, [pc, #116]	; (8001b74 <HAL_GPIO_Init+0x24c>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d025      	beq.n	8001b4e <HAL_GPIO_Init+0x226>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a1c      	ldr	r2, [pc, #112]	; (8001b78 <HAL_GPIO_Init+0x250>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d01f      	beq.n	8001b4a <HAL_GPIO_Init+0x222>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a1b      	ldr	r2, [pc, #108]	; (8001b7c <HAL_GPIO_Init+0x254>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d019      	beq.n	8001b46 <HAL_GPIO_Init+0x21e>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a1a      	ldr	r2, [pc, #104]	; (8001b80 <HAL_GPIO_Init+0x258>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d013      	beq.n	8001b42 <HAL_GPIO_Init+0x21a>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a19      	ldr	r2, [pc, #100]	; (8001b84 <HAL_GPIO_Init+0x25c>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d00d      	beq.n	8001b3e <HAL_GPIO_Init+0x216>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a18      	ldr	r2, [pc, #96]	; (8001b88 <HAL_GPIO_Init+0x260>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d007      	beq.n	8001b3a <HAL_GPIO_Init+0x212>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a17      	ldr	r2, [pc, #92]	; (8001b8c <HAL_GPIO_Init+0x264>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d101      	bne.n	8001b36 <HAL_GPIO_Init+0x20e>
 8001b32:	2309      	movs	r3, #9
 8001b34:	e02d      	b.n	8001b92 <HAL_GPIO_Init+0x26a>
 8001b36:	230a      	movs	r3, #10
 8001b38:	e02b      	b.n	8001b92 <HAL_GPIO_Init+0x26a>
 8001b3a:	2308      	movs	r3, #8
 8001b3c:	e029      	b.n	8001b92 <HAL_GPIO_Init+0x26a>
 8001b3e:	2307      	movs	r3, #7
 8001b40:	e027      	b.n	8001b92 <HAL_GPIO_Init+0x26a>
 8001b42:	2306      	movs	r3, #6
 8001b44:	e025      	b.n	8001b92 <HAL_GPIO_Init+0x26a>
 8001b46:	2305      	movs	r3, #5
 8001b48:	e023      	b.n	8001b92 <HAL_GPIO_Init+0x26a>
 8001b4a:	2304      	movs	r3, #4
 8001b4c:	e021      	b.n	8001b92 <HAL_GPIO_Init+0x26a>
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e01f      	b.n	8001b92 <HAL_GPIO_Init+0x26a>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e01d      	b.n	8001b92 <HAL_GPIO_Init+0x26a>
 8001b56:	2301      	movs	r3, #1
 8001b58:	e01b      	b.n	8001b92 <HAL_GPIO_Init+0x26a>
 8001b5a:	bf00      	nop
 8001b5c:	58000080 	.word	0x58000080
 8001b60:	58024400 	.word	0x58024400
 8001b64:	58000400 	.word	0x58000400
 8001b68:	58020000 	.word	0x58020000
 8001b6c:	58020400 	.word	0x58020400
 8001b70:	58020800 	.word	0x58020800
 8001b74:	58020c00 	.word	0x58020c00
 8001b78:	58021000 	.word	0x58021000
 8001b7c:	58021400 	.word	0x58021400
 8001b80:	58021800 	.word	0x58021800
 8001b84:	58021c00 	.word	0x58021c00
 8001b88:	58022000 	.word	0x58022000
 8001b8c:	58022400 	.word	0x58022400
 8001b90:	2300      	movs	r3, #0
 8001b92:	69fa      	ldr	r2, [r7, #28]
 8001b94:	f002 0203 	and.w	r2, r2, #3
 8001b98:	0092      	lsls	r2, r2, #2
 8001b9a:	4093      	lsls	r3, r2
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ba2:	4938      	ldr	r1, [pc, #224]	; (8001c84 <HAL_GPIO_Init+0x35c>)
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	089b      	lsrs	r3, r3, #2
 8001ba8:	3302      	adds	r3, #2
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001bd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	43db      	mvns	r3, r3
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4013      	ands	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d003      	beq.n	8001c04 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001c04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	3301      	adds	r3, #1
 8001c64:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f47f ae63 	bne.w	800193c <HAL_GPIO_Init+0x14>
  }
}
 8001c76:	bf00      	nop
 8001c78:	bf00      	nop
 8001c7a:	3724      	adds	r7, #36	; 0x24
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	58000400 	.word	0x58000400

08001c88 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001c90:	4b19      	ldr	r3, [pc, #100]	; (8001cf8 <HAL_PWREx_ConfigSupply+0x70>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b04      	cmp	r3, #4
 8001c9a:	d00a      	beq.n	8001cb2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001c9c:	4b16      	ldr	r3, [pc, #88]	; (8001cf8 <HAL_PWREx_ConfigSupply+0x70>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d001      	beq.n	8001cae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e01f      	b.n	8001cee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	e01d      	b.n	8001cee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001cb2:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <HAL_PWREx_ConfigSupply+0x70>)
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	f023 0207 	bic.w	r2, r3, #7
 8001cba:	490f      	ldr	r1, [pc, #60]	; (8001cf8 <HAL_PWREx_ConfigSupply+0x70>)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001cc2:	f7fe ffa5 	bl	8000c10 <HAL_GetTick>
 8001cc6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001cc8:	e009      	b.n	8001cde <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001cca:	f7fe ffa1 	bl	8000c10 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cd8:	d901      	bls.n	8001cde <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e007      	b.n	8001cee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001cde:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <HAL_PWREx_ConfigSupply+0x70>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ce6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cea:	d1ee      	bne.n	8001cca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	58024800 	.word	0x58024800

08001cfc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08c      	sub	sp, #48	; 0x30
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d102      	bne.n	8001d10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	f000 bc48 	b.w	80025a0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 8088 	beq.w	8001e2e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d1e:	4b99      	ldr	r3, [pc, #612]	; (8001f84 <HAL_RCC_OscConfig+0x288>)
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d26:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d28:	4b96      	ldr	r3, [pc, #600]	; (8001f84 <HAL_RCC_OscConfig+0x288>)
 8001d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d30:	2b10      	cmp	r3, #16
 8001d32:	d007      	beq.n	8001d44 <HAL_RCC_OscConfig+0x48>
 8001d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d36:	2b18      	cmp	r3, #24
 8001d38:	d111      	bne.n	8001d5e <HAL_RCC_OscConfig+0x62>
 8001d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d3c:	f003 0303 	and.w	r3, r3, #3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d10c      	bne.n	8001d5e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d44:	4b8f      	ldr	r3, [pc, #572]	; (8001f84 <HAL_RCC_OscConfig+0x288>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d06d      	beq.n	8001e2c <HAL_RCC_OscConfig+0x130>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d169      	bne.n	8001e2c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	f000 bc21 	b.w	80025a0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d66:	d106      	bne.n	8001d76 <HAL_RCC_OscConfig+0x7a>
 8001d68:	4b86      	ldr	r3, [pc, #536]	; (8001f84 <HAL_RCC_OscConfig+0x288>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a85      	ldr	r2, [pc, #532]	; (8001f84 <HAL_RCC_OscConfig+0x288>)
 8001d6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d72:	6013      	str	r3, [r2, #0]
 8001d74:	e02e      	b.n	8001dd4 <HAL_RCC_OscConfig+0xd8>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10c      	bne.n	8001d98 <HAL_RCC_OscConfig+0x9c>
 8001d7e:	4b81      	ldr	r3, [pc, #516]	; (8001f84 <HAL_RCC_OscConfig+0x288>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a80      	ldr	r2, [pc, #512]	; (8001f84 <HAL_RCC_OscConfig+0x288>)
 8001d84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d88:	6013      	str	r3, [r2, #0]
 8001d8a:	4b7e      	ldr	r3, [pc, #504]	; (8001f84 <HAL_RCC_OscConfig+0x288>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a7d      	ldr	r2, [pc, #500]	; (8001f84 <HAL_RCC_OscConfig+0x288>)
 8001d90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	e01d      	b.n	8001dd4 <HAL_RCC_OscConfig+0xd8>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001da0:	d10c      	bne.n	8001dbc <HAL_RCC_OscConfig+0xc0>
 8001da2:	4b78      	ldr	r3, [pc, #480]	; (8001f84 <HAL_RCC_OscConfig+0x288>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a77      	ldr	r2, [pc, #476]	; (8001f84 <HAL_RCC_OscConfig+0x288>)
 8001da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	4b75      	ldr	r3, [pc, #468]	; (8001f84 <HAL_RCC_OscConfig+0x288>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a74      	ldr	r2, [pc, #464]	; (8001f84 <HAL_RCC_OscConfig+0x288>)
 8001db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	e00b      	b.n	8001dd4 <HAL_RCC_OscConfig+0xd8>
 8001dbc:	4b71      	ldr	r3, [pc, #452]	; (8001f84 <HAL_RCC_OscConfig+0x288>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a70      	ldr	r2, [pc, #448]	; (8001f84 <HAL_RCC_OscConfig+0x288>)
 8001dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	4b6e      	ldr	r3, [pc, #440]	; (8001f84 <HAL_RCC_OscConfig+0x288>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a6d      	ldr	r2, [pc, #436]	; (8001f84 <HAL_RCC_OscConfig+0x288>)
 8001dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d013      	beq.n	8001e04 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ddc:	f7fe ff18 	bl	8000c10 <HAL_GetTick>
 8001de0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001de4:	f7fe ff14 	bl	8000c10 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b64      	cmp	r3, #100	; 0x64
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e3d4      	b.n	80025a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001df6:	4b63      	ldr	r3, [pc, #396]	; (8001f84 <HAL_RCC_OscConfig+0x288>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0f0      	beq.n	8001de4 <HAL_RCC_OscConfig+0xe8>
 8001e02:	e014      	b.n	8001e2e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e04:	f7fe ff04 	bl	8000c10 <HAL_GetTick>
 8001e08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e0c:	f7fe ff00 	bl	8000c10 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b64      	cmp	r3, #100	; 0x64
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e3c0      	b.n	80025a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e1e:	4b59      	ldr	r3, [pc, #356]	; (8001f84 <HAL_RCC_OscConfig+0x288>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f0      	bne.n	8001e0c <HAL_RCC_OscConfig+0x110>
 8001e2a:	e000      	b.n	8001e2e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 80ca 	beq.w	8001fd0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e3c:	4b51      	ldr	r3, [pc, #324]	; (8001f84 <HAL_RCC_OscConfig+0x288>)
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e44:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e46:	4b4f      	ldr	r3, [pc, #316]	; (8001f84 <HAL_RCC_OscConfig+0x288>)
 8001e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001e4c:	6a3b      	ldr	r3, [r7, #32]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d007      	beq.n	8001e62 <HAL_RCC_OscConfig+0x166>
 8001e52:	6a3b      	ldr	r3, [r7, #32]
 8001e54:	2b18      	cmp	r3, #24
 8001e56:	d156      	bne.n	8001f06 <HAL_RCC_OscConfig+0x20a>
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d151      	bne.n	8001f06 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e62:	4b48      	ldr	r3, [pc, #288]	; (8001f84 <HAL_RCC_OscConfig+0x288>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0304 	and.w	r3, r3, #4
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d005      	beq.n	8001e7a <HAL_RCC_OscConfig+0x17e>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e392      	b.n	80025a0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001e7a:	4b42      	ldr	r3, [pc, #264]	; (8001f84 <HAL_RCC_OscConfig+0x288>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f023 0219 	bic.w	r2, r3, #25
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	493f      	ldr	r1, [pc, #252]	; (8001f84 <HAL_RCC_OscConfig+0x288>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8c:	f7fe fec0 	bl	8000c10 <HAL_GetTick>
 8001e90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e94:	f7fe febc 	bl	8000c10 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e37c      	b.n	80025a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ea6:	4b37      	ldr	r3, [pc, #220]	; (8001f84 <HAL_RCC_OscConfig+0x288>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0304 	and.w	r3, r3, #4
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0f0      	beq.n	8001e94 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb2:	f7fe feb9 	bl	8000c28 <HAL_GetREVID>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	f241 0203 	movw	r2, #4099	; 0x1003
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d817      	bhi.n	8001ef0 <HAL_RCC_OscConfig+0x1f4>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	2b40      	cmp	r3, #64	; 0x40
 8001ec6:	d108      	bne.n	8001eda <HAL_RCC_OscConfig+0x1de>
 8001ec8:	4b2e      	ldr	r3, [pc, #184]	; (8001f84 <HAL_RCC_OscConfig+0x288>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001ed0:	4a2c      	ldr	r2, [pc, #176]	; (8001f84 <HAL_RCC_OscConfig+0x288>)
 8001ed2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ed8:	e07a      	b.n	8001fd0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eda:	4b2a      	ldr	r3, [pc, #168]	; (8001f84 <HAL_RCC_OscConfig+0x288>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	031b      	lsls	r3, r3, #12
 8001ee8:	4926      	ldr	r1, [pc, #152]	; (8001f84 <HAL_RCC_OscConfig+0x288>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eee:	e06f      	b.n	8001fd0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef0:	4b24      	ldr	r3, [pc, #144]	; (8001f84 <HAL_RCC_OscConfig+0x288>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	061b      	lsls	r3, r3, #24
 8001efe:	4921      	ldr	r1, [pc, #132]	; (8001f84 <HAL_RCC_OscConfig+0x288>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f04:	e064      	b.n	8001fd0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d047      	beq.n	8001f9e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001f0e:	4b1d      	ldr	r3, [pc, #116]	; (8001f84 <HAL_RCC_OscConfig+0x288>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f023 0219 	bic.w	r2, r3, #25
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	491a      	ldr	r1, [pc, #104]	; (8001f84 <HAL_RCC_OscConfig+0x288>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f20:	f7fe fe76 	bl	8000c10 <HAL_GetTick>
 8001f24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f28:	f7fe fe72 	bl	8000c10 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e332      	b.n	80025a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f3a:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <HAL_RCC_OscConfig+0x288>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0304 	and.w	r3, r3, #4
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0f0      	beq.n	8001f28 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f46:	f7fe fe6f 	bl	8000c28 <HAL_GetREVID>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	f241 0203 	movw	r2, #4099	; 0x1003
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d819      	bhi.n	8001f88 <HAL_RCC_OscConfig+0x28c>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	2b40      	cmp	r3, #64	; 0x40
 8001f5a:	d108      	bne.n	8001f6e <HAL_RCC_OscConfig+0x272>
 8001f5c:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <HAL_RCC_OscConfig+0x288>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001f64:	4a07      	ldr	r2, [pc, #28]	; (8001f84 <HAL_RCC_OscConfig+0x288>)
 8001f66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f6a:	6053      	str	r3, [r2, #4]
 8001f6c:	e030      	b.n	8001fd0 <HAL_RCC_OscConfig+0x2d4>
 8001f6e:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <HAL_RCC_OscConfig+0x288>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	031b      	lsls	r3, r3, #12
 8001f7c:	4901      	ldr	r1, [pc, #4]	; (8001f84 <HAL_RCC_OscConfig+0x288>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	604b      	str	r3, [r1, #4]
 8001f82:	e025      	b.n	8001fd0 <HAL_RCC_OscConfig+0x2d4>
 8001f84:	58024400 	.word	0x58024400
 8001f88:	4b9a      	ldr	r3, [pc, #616]	; (80021f4 <HAL_RCC_OscConfig+0x4f8>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	061b      	lsls	r3, r3, #24
 8001f96:	4997      	ldr	r1, [pc, #604]	; (80021f4 <HAL_RCC_OscConfig+0x4f8>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	604b      	str	r3, [r1, #4]
 8001f9c:	e018      	b.n	8001fd0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f9e:	4b95      	ldr	r3, [pc, #596]	; (80021f4 <HAL_RCC_OscConfig+0x4f8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a94      	ldr	r2, [pc, #592]	; (80021f4 <HAL_RCC_OscConfig+0x4f8>)
 8001fa4:	f023 0301 	bic.w	r3, r3, #1
 8001fa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001faa:	f7fe fe31 	bl	8000c10 <HAL_GetTick>
 8001fae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001fb0:	e008      	b.n	8001fc4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fb2:	f7fe fe2d 	bl	8000c10 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e2ed      	b.n	80025a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001fc4:	4b8b      	ldr	r3, [pc, #556]	; (80021f4 <HAL_RCC_OscConfig+0x4f8>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1f0      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0310 	and.w	r3, r3, #16
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 80a9 	beq.w	8002130 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fde:	4b85      	ldr	r3, [pc, #532]	; (80021f4 <HAL_RCC_OscConfig+0x4f8>)
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fe6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001fe8:	4b82      	ldr	r3, [pc, #520]	; (80021f4 <HAL_RCC_OscConfig+0x4f8>)
 8001fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fec:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	2b08      	cmp	r3, #8
 8001ff2:	d007      	beq.n	8002004 <HAL_RCC_OscConfig+0x308>
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	2b18      	cmp	r3, #24
 8001ff8:	d13a      	bne.n	8002070 <HAL_RCC_OscConfig+0x374>
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f003 0303 	and.w	r3, r3, #3
 8002000:	2b01      	cmp	r3, #1
 8002002:	d135      	bne.n	8002070 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002004:	4b7b      	ldr	r3, [pc, #492]	; (80021f4 <HAL_RCC_OscConfig+0x4f8>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200c:	2b00      	cmp	r3, #0
 800200e:	d005      	beq.n	800201c <HAL_RCC_OscConfig+0x320>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	69db      	ldr	r3, [r3, #28]
 8002014:	2b80      	cmp	r3, #128	; 0x80
 8002016:	d001      	beq.n	800201c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e2c1      	b.n	80025a0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800201c:	f7fe fe04 	bl	8000c28 <HAL_GetREVID>
 8002020:	4603      	mov	r3, r0
 8002022:	f241 0203 	movw	r2, #4099	; 0x1003
 8002026:	4293      	cmp	r3, r2
 8002028:	d817      	bhi.n	800205a <HAL_RCC_OscConfig+0x35e>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	2b20      	cmp	r3, #32
 8002030:	d108      	bne.n	8002044 <HAL_RCC_OscConfig+0x348>
 8002032:	4b70      	ldr	r3, [pc, #448]	; (80021f4 <HAL_RCC_OscConfig+0x4f8>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800203a:	4a6e      	ldr	r2, [pc, #440]	; (80021f4 <HAL_RCC_OscConfig+0x4f8>)
 800203c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002040:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002042:	e075      	b.n	8002130 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002044:	4b6b      	ldr	r3, [pc, #428]	; (80021f4 <HAL_RCC_OscConfig+0x4f8>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	069b      	lsls	r3, r3, #26
 8002052:	4968      	ldr	r1, [pc, #416]	; (80021f4 <HAL_RCC_OscConfig+0x4f8>)
 8002054:	4313      	orrs	r3, r2
 8002056:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002058:	e06a      	b.n	8002130 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800205a:	4b66      	ldr	r3, [pc, #408]	; (80021f4 <HAL_RCC_OscConfig+0x4f8>)
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	061b      	lsls	r3, r3, #24
 8002068:	4962      	ldr	r1, [pc, #392]	; (80021f4 <HAL_RCC_OscConfig+0x4f8>)
 800206a:	4313      	orrs	r3, r2
 800206c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800206e:	e05f      	b.n	8002130 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	69db      	ldr	r3, [r3, #28]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d042      	beq.n	80020fe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002078:	4b5e      	ldr	r3, [pc, #376]	; (80021f4 <HAL_RCC_OscConfig+0x4f8>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a5d      	ldr	r2, [pc, #372]	; (80021f4 <HAL_RCC_OscConfig+0x4f8>)
 800207e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002084:	f7fe fdc4 	bl	8000c10 <HAL_GetTick>
 8002088:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800208c:	f7fe fdc0 	bl	8000c10 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e280      	b.n	80025a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800209e:	4b55      	ldr	r3, [pc, #340]	; (80021f4 <HAL_RCC_OscConfig+0x4f8>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0f0      	beq.n	800208c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80020aa:	f7fe fdbd 	bl	8000c28 <HAL_GetREVID>
 80020ae:	4603      	mov	r3, r0
 80020b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d817      	bhi.n	80020e8 <HAL_RCC_OscConfig+0x3ec>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	2b20      	cmp	r3, #32
 80020be:	d108      	bne.n	80020d2 <HAL_RCC_OscConfig+0x3d6>
 80020c0:	4b4c      	ldr	r3, [pc, #304]	; (80021f4 <HAL_RCC_OscConfig+0x4f8>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80020c8:	4a4a      	ldr	r2, [pc, #296]	; (80021f4 <HAL_RCC_OscConfig+0x4f8>)
 80020ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80020ce:	6053      	str	r3, [r2, #4]
 80020d0:	e02e      	b.n	8002130 <HAL_RCC_OscConfig+0x434>
 80020d2:	4b48      	ldr	r3, [pc, #288]	; (80021f4 <HAL_RCC_OscConfig+0x4f8>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	069b      	lsls	r3, r3, #26
 80020e0:	4944      	ldr	r1, [pc, #272]	; (80021f4 <HAL_RCC_OscConfig+0x4f8>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	604b      	str	r3, [r1, #4]
 80020e6:	e023      	b.n	8002130 <HAL_RCC_OscConfig+0x434>
 80020e8:	4b42      	ldr	r3, [pc, #264]	; (80021f4 <HAL_RCC_OscConfig+0x4f8>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	061b      	lsls	r3, r3, #24
 80020f6:	493f      	ldr	r1, [pc, #252]	; (80021f4 <HAL_RCC_OscConfig+0x4f8>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	60cb      	str	r3, [r1, #12]
 80020fc:	e018      	b.n	8002130 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80020fe:	4b3d      	ldr	r3, [pc, #244]	; (80021f4 <HAL_RCC_OscConfig+0x4f8>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a3c      	ldr	r2, [pc, #240]	; (80021f4 <HAL_RCC_OscConfig+0x4f8>)
 8002104:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002108:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210a:	f7fe fd81 	bl	8000c10 <HAL_GetTick>
 800210e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002112:	f7fe fd7d 	bl	8000c10 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e23d      	b.n	80025a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002124:	4b33      	ldr	r3, [pc, #204]	; (80021f4 <HAL_RCC_OscConfig+0x4f8>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1f0      	bne.n	8002112 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0308 	and.w	r3, r3, #8
 8002138:	2b00      	cmp	r3, #0
 800213a:	d036      	beq.n	80021aa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	695b      	ldr	r3, [r3, #20]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d019      	beq.n	8002178 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002144:	4b2b      	ldr	r3, [pc, #172]	; (80021f4 <HAL_RCC_OscConfig+0x4f8>)
 8002146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002148:	4a2a      	ldr	r2, [pc, #168]	; (80021f4 <HAL_RCC_OscConfig+0x4f8>)
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002150:	f7fe fd5e 	bl	8000c10 <HAL_GetTick>
 8002154:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002158:	f7fe fd5a 	bl	8000c10 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e21a      	b.n	80025a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800216a:	4b22      	ldr	r3, [pc, #136]	; (80021f4 <HAL_RCC_OscConfig+0x4f8>)
 800216c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0f0      	beq.n	8002158 <HAL_RCC_OscConfig+0x45c>
 8002176:	e018      	b.n	80021aa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002178:	4b1e      	ldr	r3, [pc, #120]	; (80021f4 <HAL_RCC_OscConfig+0x4f8>)
 800217a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800217c:	4a1d      	ldr	r2, [pc, #116]	; (80021f4 <HAL_RCC_OscConfig+0x4f8>)
 800217e:	f023 0301 	bic.w	r3, r3, #1
 8002182:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002184:	f7fe fd44 	bl	8000c10 <HAL_GetTick>
 8002188:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800218c:	f7fe fd40 	bl	8000c10 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e200      	b.n	80025a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800219e:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <HAL_RCC_OscConfig+0x4f8>)
 80021a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f0      	bne.n	800218c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0320 	and.w	r3, r3, #32
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d039      	beq.n	800222a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d01c      	beq.n	80021f8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021be:	4b0d      	ldr	r3, [pc, #52]	; (80021f4 <HAL_RCC_OscConfig+0x4f8>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a0c      	ldr	r2, [pc, #48]	; (80021f4 <HAL_RCC_OscConfig+0x4f8>)
 80021c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80021ca:	f7fe fd21 	bl	8000c10 <HAL_GetTick>
 80021ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021d2:	f7fe fd1d 	bl	8000c10 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e1dd      	b.n	80025a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80021e4:	4b03      	ldr	r3, [pc, #12]	; (80021f4 <HAL_RCC_OscConfig+0x4f8>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0f0      	beq.n	80021d2 <HAL_RCC_OscConfig+0x4d6>
 80021f0:	e01b      	b.n	800222a <HAL_RCC_OscConfig+0x52e>
 80021f2:	bf00      	nop
 80021f4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021f8:	4b9b      	ldr	r3, [pc, #620]	; (8002468 <HAL_RCC_OscConfig+0x76c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a9a      	ldr	r2, [pc, #616]	; (8002468 <HAL_RCC_OscConfig+0x76c>)
 80021fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002202:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002204:	f7fe fd04 	bl	8000c10 <HAL_GetTick>
 8002208:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800220c:	f7fe fd00 	bl	8000c10 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e1c0      	b.n	80025a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800221e:	4b92      	ldr	r3, [pc, #584]	; (8002468 <HAL_RCC_OscConfig+0x76c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f0      	bne.n	800220c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0304 	and.w	r3, r3, #4
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 8081 	beq.w	800233a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002238:	4b8c      	ldr	r3, [pc, #560]	; (800246c <HAL_RCC_OscConfig+0x770>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a8b      	ldr	r2, [pc, #556]	; (800246c <HAL_RCC_OscConfig+0x770>)
 800223e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002242:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002244:	f7fe fce4 	bl	8000c10 <HAL_GetTick>
 8002248:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800224c:	f7fe fce0 	bl	8000c10 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b64      	cmp	r3, #100	; 0x64
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e1a0      	b.n	80025a0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800225e:	4b83      	ldr	r3, [pc, #524]	; (800246c <HAL_RCC_OscConfig+0x770>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0f0      	beq.n	800224c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d106      	bne.n	8002280 <HAL_RCC_OscConfig+0x584>
 8002272:	4b7d      	ldr	r3, [pc, #500]	; (8002468 <HAL_RCC_OscConfig+0x76c>)
 8002274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002276:	4a7c      	ldr	r2, [pc, #496]	; (8002468 <HAL_RCC_OscConfig+0x76c>)
 8002278:	f043 0301 	orr.w	r3, r3, #1
 800227c:	6713      	str	r3, [r2, #112]	; 0x70
 800227e:	e02d      	b.n	80022dc <HAL_RCC_OscConfig+0x5e0>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10c      	bne.n	80022a2 <HAL_RCC_OscConfig+0x5a6>
 8002288:	4b77      	ldr	r3, [pc, #476]	; (8002468 <HAL_RCC_OscConfig+0x76c>)
 800228a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228c:	4a76      	ldr	r2, [pc, #472]	; (8002468 <HAL_RCC_OscConfig+0x76c>)
 800228e:	f023 0301 	bic.w	r3, r3, #1
 8002292:	6713      	str	r3, [r2, #112]	; 0x70
 8002294:	4b74      	ldr	r3, [pc, #464]	; (8002468 <HAL_RCC_OscConfig+0x76c>)
 8002296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002298:	4a73      	ldr	r2, [pc, #460]	; (8002468 <HAL_RCC_OscConfig+0x76c>)
 800229a:	f023 0304 	bic.w	r3, r3, #4
 800229e:	6713      	str	r3, [r2, #112]	; 0x70
 80022a0:	e01c      	b.n	80022dc <HAL_RCC_OscConfig+0x5e0>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	2b05      	cmp	r3, #5
 80022a8:	d10c      	bne.n	80022c4 <HAL_RCC_OscConfig+0x5c8>
 80022aa:	4b6f      	ldr	r3, [pc, #444]	; (8002468 <HAL_RCC_OscConfig+0x76c>)
 80022ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ae:	4a6e      	ldr	r2, [pc, #440]	; (8002468 <HAL_RCC_OscConfig+0x76c>)
 80022b0:	f043 0304 	orr.w	r3, r3, #4
 80022b4:	6713      	str	r3, [r2, #112]	; 0x70
 80022b6:	4b6c      	ldr	r3, [pc, #432]	; (8002468 <HAL_RCC_OscConfig+0x76c>)
 80022b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ba:	4a6b      	ldr	r2, [pc, #428]	; (8002468 <HAL_RCC_OscConfig+0x76c>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	6713      	str	r3, [r2, #112]	; 0x70
 80022c2:	e00b      	b.n	80022dc <HAL_RCC_OscConfig+0x5e0>
 80022c4:	4b68      	ldr	r3, [pc, #416]	; (8002468 <HAL_RCC_OscConfig+0x76c>)
 80022c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c8:	4a67      	ldr	r2, [pc, #412]	; (8002468 <HAL_RCC_OscConfig+0x76c>)
 80022ca:	f023 0301 	bic.w	r3, r3, #1
 80022ce:	6713      	str	r3, [r2, #112]	; 0x70
 80022d0:	4b65      	ldr	r3, [pc, #404]	; (8002468 <HAL_RCC_OscConfig+0x76c>)
 80022d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d4:	4a64      	ldr	r2, [pc, #400]	; (8002468 <HAL_RCC_OscConfig+0x76c>)
 80022d6:	f023 0304 	bic.w	r3, r3, #4
 80022da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d015      	beq.n	8002310 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e4:	f7fe fc94 	bl	8000c10 <HAL_GetTick>
 80022e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022ea:	e00a      	b.n	8002302 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ec:	f7fe fc90 	bl	8000c10 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e14e      	b.n	80025a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002302:	4b59      	ldr	r3, [pc, #356]	; (8002468 <HAL_RCC_OscConfig+0x76c>)
 8002304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0ee      	beq.n	80022ec <HAL_RCC_OscConfig+0x5f0>
 800230e:	e014      	b.n	800233a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002310:	f7fe fc7e 	bl	8000c10 <HAL_GetTick>
 8002314:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002316:	e00a      	b.n	800232e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002318:	f7fe fc7a 	bl	8000c10 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	f241 3288 	movw	r2, #5000	; 0x1388
 8002326:	4293      	cmp	r3, r2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e138      	b.n	80025a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800232e:	4b4e      	ldr	r3, [pc, #312]	; (8002468 <HAL_RCC_OscConfig+0x76c>)
 8002330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1ee      	bne.n	8002318 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	2b00      	cmp	r3, #0
 8002340:	f000 812d 	beq.w	800259e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002344:	4b48      	ldr	r3, [pc, #288]	; (8002468 <HAL_RCC_OscConfig+0x76c>)
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800234c:	2b18      	cmp	r3, #24
 800234e:	f000 80bd 	beq.w	80024cc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002356:	2b02      	cmp	r3, #2
 8002358:	f040 809e 	bne.w	8002498 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800235c:	4b42      	ldr	r3, [pc, #264]	; (8002468 <HAL_RCC_OscConfig+0x76c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a41      	ldr	r2, [pc, #260]	; (8002468 <HAL_RCC_OscConfig+0x76c>)
 8002362:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002368:	f7fe fc52 	bl	8000c10 <HAL_GetTick>
 800236c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002370:	f7fe fc4e 	bl	8000c10 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e10e      	b.n	80025a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002382:	4b39      	ldr	r3, [pc, #228]	; (8002468 <HAL_RCC_OscConfig+0x76c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f0      	bne.n	8002370 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800238e:	4b36      	ldr	r3, [pc, #216]	; (8002468 <HAL_RCC_OscConfig+0x76c>)
 8002390:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002392:	4b37      	ldr	r3, [pc, #220]	; (8002470 <HAL_RCC_OscConfig+0x774>)
 8002394:	4013      	ands	r3, r2
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800239e:	0112      	lsls	r2, r2, #4
 80023a0:	430a      	orrs	r2, r1
 80023a2:	4931      	ldr	r1, [pc, #196]	; (8002468 <HAL_RCC_OscConfig+0x76c>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	628b      	str	r3, [r1, #40]	; 0x28
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ac:	3b01      	subs	r3, #1
 80023ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b6:	3b01      	subs	r3, #1
 80023b8:	025b      	lsls	r3, r3, #9
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	431a      	orrs	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c2:	3b01      	subs	r3, #1
 80023c4:	041b      	lsls	r3, r3, #16
 80023c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80023ca:	431a      	orrs	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d0:	3b01      	subs	r3, #1
 80023d2:	061b      	lsls	r3, r3, #24
 80023d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80023d8:	4923      	ldr	r1, [pc, #140]	; (8002468 <HAL_RCC_OscConfig+0x76c>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80023de:	4b22      	ldr	r3, [pc, #136]	; (8002468 <HAL_RCC_OscConfig+0x76c>)
 80023e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e2:	4a21      	ldr	r2, [pc, #132]	; (8002468 <HAL_RCC_OscConfig+0x76c>)
 80023e4:	f023 0301 	bic.w	r3, r3, #1
 80023e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80023ea:	4b1f      	ldr	r3, [pc, #124]	; (8002468 <HAL_RCC_OscConfig+0x76c>)
 80023ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023ee:	4b21      	ldr	r3, [pc, #132]	; (8002474 <HAL_RCC_OscConfig+0x778>)
 80023f0:	4013      	ands	r3, r2
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80023f6:	00d2      	lsls	r2, r2, #3
 80023f8:	491b      	ldr	r1, [pc, #108]	; (8002468 <HAL_RCC_OscConfig+0x76c>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80023fe:	4b1a      	ldr	r3, [pc, #104]	; (8002468 <HAL_RCC_OscConfig+0x76c>)
 8002400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002402:	f023 020c 	bic.w	r2, r3, #12
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	4917      	ldr	r1, [pc, #92]	; (8002468 <HAL_RCC_OscConfig+0x76c>)
 800240c:	4313      	orrs	r3, r2
 800240e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002410:	4b15      	ldr	r3, [pc, #84]	; (8002468 <HAL_RCC_OscConfig+0x76c>)
 8002412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002414:	f023 0202 	bic.w	r2, r3, #2
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241c:	4912      	ldr	r1, [pc, #72]	; (8002468 <HAL_RCC_OscConfig+0x76c>)
 800241e:	4313      	orrs	r3, r2
 8002420:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002422:	4b11      	ldr	r3, [pc, #68]	; (8002468 <HAL_RCC_OscConfig+0x76c>)
 8002424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002426:	4a10      	ldr	r2, [pc, #64]	; (8002468 <HAL_RCC_OscConfig+0x76c>)
 8002428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800242c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800242e:	4b0e      	ldr	r3, [pc, #56]	; (8002468 <HAL_RCC_OscConfig+0x76c>)
 8002430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002432:	4a0d      	ldr	r2, [pc, #52]	; (8002468 <HAL_RCC_OscConfig+0x76c>)
 8002434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002438:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800243a:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <HAL_RCC_OscConfig+0x76c>)
 800243c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243e:	4a0a      	ldr	r2, [pc, #40]	; (8002468 <HAL_RCC_OscConfig+0x76c>)
 8002440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002444:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002446:	4b08      	ldr	r3, [pc, #32]	; (8002468 <HAL_RCC_OscConfig+0x76c>)
 8002448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244a:	4a07      	ldr	r2, [pc, #28]	; (8002468 <HAL_RCC_OscConfig+0x76c>)
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002452:	4b05      	ldr	r3, [pc, #20]	; (8002468 <HAL_RCC_OscConfig+0x76c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a04      	ldr	r2, [pc, #16]	; (8002468 <HAL_RCC_OscConfig+0x76c>)
 8002458:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800245c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245e:	f7fe fbd7 	bl	8000c10 <HAL_GetTick>
 8002462:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002464:	e011      	b.n	800248a <HAL_RCC_OscConfig+0x78e>
 8002466:	bf00      	nop
 8002468:	58024400 	.word	0x58024400
 800246c:	58024800 	.word	0x58024800
 8002470:	fffffc0c 	.word	0xfffffc0c
 8002474:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002478:	f7fe fbca 	bl	8000c10 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e08a      	b.n	80025a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800248a:	4b47      	ldr	r3, [pc, #284]	; (80025a8 <HAL_RCC_OscConfig+0x8ac>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d0f0      	beq.n	8002478 <HAL_RCC_OscConfig+0x77c>
 8002496:	e082      	b.n	800259e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002498:	4b43      	ldr	r3, [pc, #268]	; (80025a8 <HAL_RCC_OscConfig+0x8ac>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a42      	ldr	r2, [pc, #264]	; (80025a8 <HAL_RCC_OscConfig+0x8ac>)
 800249e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a4:	f7fe fbb4 	bl	8000c10 <HAL_GetTick>
 80024a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ac:	f7fe fbb0 	bl	8000c10 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e070      	b.n	80025a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024be:	4b3a      	ldr	r3, [pc, #232]	; (80025a8 <HAL_RCC_OscConfig+0x8ac>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f0      	bne.n	80024ac <HAL_RCC_OscConfig+0x7b0>
 80024ca:	e068      	b.n	800259e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80024cc:	4b36      	ldr	r3, [pc, #216]	; (80025a8 <HAL_RCC_OscConfig+0x8ac>)
 80024ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80024d2:	4b35      	ldr	r3, [pc, #212]	; (80025a8 <HAL_RCC_OscConfig+0x8ac>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d031      	beq.n	8002544 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	f003 0203 	and.w	r2, r3, #3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d12a      	bne.n	8002544 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	091b      	lsrs	r3, r3, #4
 80024f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d122      	bne.n	8002544 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002508:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800250a:	429a      	cmp	r2, r3
 800250c:	d11a      	bne.n	8002544 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	0a5b      	lsrs	r3, r3, #9
 8002512:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800251a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800251c:	429a      	cmp	r2, r3
 800251e:	d111      	bne.n	8002544 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	0c1b      	lsrs	r3, r3, #16
 8002524:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800252e:	429a      	cmp	r2, r3
 8002530:	d108      	bne.n	8002544 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	0e1b      	lsrs	r3, r3, #24
 8002536:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800253e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002540:	429a      	cmp	r2, r3
 8002542:	d001      	beq.n	8002548 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e02b      	b.n	80025a0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002548:	4b17      	ldr	r3, [pc, #92]	; (80025a8 <HAL_RCC_OscConfig+0x8ac>)
 800254a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800254c:	08db      	lsrs	r3, r3, #3
 800254e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002552:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	429a      	cmp	r2, r3
 800255c:	d01f      	beq.n	800259e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800255e:	4b12      	ldr	r3, [pc, #72]	; (80025a8 <HAL_RCC_OscConfig+0x8ac>)
 8002560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002562:	4a11      	ldr	r2, [pc, #68]	; (80025a8 <HAL_RCC_OscConfig+0x8ac>)
 8002564:	f023 0301 	bic.w	r3, r3, #1
 8002568:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800256a:	f7fe fb51 	bl	8000c10 <HAL_GetTick>
 800256e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002570:	bf00      	nop
 8002572:	f7fe fb4d 	bl	8000c10 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	4293      	cmp	r3, r2
 800257c:	d0f9      	beq.n	8002572 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800257e:	4b0a      	ldr	r3, [pc, #40]	; (80025a8 <HAL_RCC_OscConfig+0x8ac>)
 8002580:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002582:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <HAL_RCC_OscConfig+0x8b0>)
 8002584:	4013      	ands	r3, r2
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800258a:	00d2      	lsls	r2, r2, #3
 800258c:	4906      	ldr	r1, [pc, #24]	; (80025a8 <HAL_RCC_OscConfig+0x8ac>)
 800258e:	4313      	orrs	r3, r2
 8002590:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002592:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <HAL_RCC_OscConfig+0x8ac>)
 8002594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002596:	4a04      	ldr	r2, [pc, #16]	; (80025a8 <HAL_RCC_OscConfig+0x8ac>)
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3730      	adds	r7, #48	; 0x30
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	58024400 	.word	0x58024400
 80025ac:	ffff0007 	.word	0xffff0007

080025b0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e19c      	b.n	80028fe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025c4:	4b8a      	ldr	r3, [pc, #552]	; (80027f0 <HAL_RCC_ClockConfig+0x240>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 030f 	and.w	r3, r3, #15
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d910      	bls.n	80025f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d2:	4b87      	ldr	r3, [pc, #540]	; (80027f0 <HAL_RCC_ClockConfig+0x240>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f023 020f 	bic.w	r2, r3, #15
 80025da:	4985      	ldr	r1, [pc, #532]	; (80027f0 <HAL_RCC_ClockConfig+0x240>)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	4313      	orrs	r3, r2
 80025e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e2:	4b83      	ldr	r3, [pc, #524]	; (80027f0 <HAL_RCC_ClockConfig+0x240>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d001      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e184      	b.n	80028fe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d010      	beq.n	8002622 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	691a      	ldr	r2, [r3, #16]
 8002604:	4b7b      	ldr	r3, [pc, #492]	; (80027f4 <HAL_RCC_ClockConfig+0x244>)
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800260c:	429a      	cmp	r2, r3
 800260e:	d908      	bls.n	8002622 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002610:	4b78      	ldr	r3, [pc, #480]	; (80027f4 <HAL_RCC_ClockConfig+0x244>)
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	4975      	ldr	r1, [pc, #468]	; (80027f4 <HAL_RCC_ClockConfig+0x244>)
 800261e:	4313      	orrs	r3, r2
 8002620:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	2b00      	cmp	r3, #0
 800262c:	d010      	beq.n	8002650 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	695a      	ldr	r2, [r3, #20]
 8002632:	4b70      	ldr	r3, [pc, #448]	; (80027f4 <HAL_RCC_ClockConfig+0x244>)
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800263a:	429a      	cmp	r2, r3
 800263c:	d908      	bls.n	8002650 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800263e:	4b6d      	ldr	r3, [pc, #436]	; (80027f4 <HAL_RCC_ClockConfig+0x244>)
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	496a      	ldr	r1, [pc, #424]	; (80027f4 <HAL_RCC_ClockConfig+0x244>)
 800264c:	4313      	orrs	r3, r2
 800264e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0310 	and.w	r3, r3, #16
 8002658:	2b00      	cmp	r3, #0
 800265a:	d010      	beq.n	800267e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	699a      	ldr	r2, [r3, #24]
 8002660:	4b64      	ldr	r3, [pc, #400]	; (80027f4 <HAL_RCC_ClockConfig+0x244>)
 8002662:	69db      	ldr	r3, [r3, #28]
 8002664:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002668:	429a      	cmp	r2, r3
 800266a:	d908      	bls.n	800267e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800266c:	4b61      	ldr	r3, [pc, #388]	; (80027f4 <HAL_RCC_ClockConfig+0x244>)
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	495e      	ldr	r1, [pc, #376]	; (80027f4 <HAL_RCC_ClockConfig+0x244>)
 800267a:	4313      	orrs	r3, r2
 800267c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0320 	and.w	r3, r3, #32
 8002686:	2b00      	cmp	r3, #0
 8002688:	d010      	beq.n	80026ac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	69da      	ldr	r2, [r3, #28]
 800268e:	4b59      	ldr	r3, [pc, #356]	; (80027f4 <HAL_RCC_ClockConfig+0x244>)
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002696:	429a      	cmp	r2, r3
 8002698:	d908      	bls.n	80026ac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800269a:	4b56      	ldr	r3, [pc, #344]	; (80027f4 <HAL_RCC_ClockConfig+0x244>)
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	4953      	ldr	r1, [pc, #332]	; (80027f4 <HAL_RCC_ClockConfig+0x244>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d010      	beq.n	80026da <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68da      	ldr	r2, [r3, #12]
 80026bc:	4b4d      	ldr	r3, [pc, #308]	; (80027f4 <HAL_RCC_ClockConfig+0x244>)
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	f003 030f 	and.w	r3, r3, #15
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d908      	bls.n	80026da <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c8:	4b4a      	ldr	r3, [pc, #296]	; (80027f4 <HAL_RCC_ClockConfig+0x244>)
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	f023 020f 	bic.w	r2, r3, #15
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	4947      	ldr	r1, [pc, #284]	; (80027f4 <HAL_RCC_ClockConfig+0x244>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d055      	beq.n	8002792 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80026e6:	4b43      	ldr	r3, [pc, #268]	; (80027f4 <HAL_RCC_ClockConfig+0x244>)
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	4940      	ldr	r1, [pc, #256]	; (80027f4 <HAL_RCC_ClockConfig+0x244>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d107      	bne.n	8002710 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002700:	4b3c      	ldr	r3, [pc, #240]	; (80027f4 <HAL_RCC_ClockConfig+0x244>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d121      	bne.n	8002750 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e0f6      	b.n	80028fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	2b03      	cmp	r3, #3
 8002716:	d107      	bne.n	8002728 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002718:	4b36      	ldr	r3, [pc, #216]	; (80027f4 <HAL_RCC_ClockConfig+0x244>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d115      	bne.n	8002750 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e0ea      	b.n	80028fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d107      	bne.n	8002740 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002730:	4b30      	ldr	r3, [pc, #192]	; (80027f4 <HAL_RCC_ClockConfig+0x244>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002738:	2b00      	cmp	r3, #0
 800273a:	d109      	bne.n	8002750 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e0de      	b.n	80028fe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002740:	4b2c      	ldr	r3, [pc, #176]	; (80027f4 <HAL_RCC_ClockConfig+0x244>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e0d6      	b.n	80028fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002750:	4b28      	ldr	r3, [pc, #160]	; (80027f4 <HAL_RCC_ClockConfig+0x244>)
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	f023 0207 	bic.w	r2, r3, #7
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	4925      	ldr	r1, [pc, #148]	; (80027f4 <HAL_RCC_ClockConfig+0x244>)
 800275e:	4313      	orrs	r3, r2
 8002760:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002762:	f7fe fa55 	bl	8000c10 <HAL_GetTick>
 8002766:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002768:	e00a      	b.n	8002780 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800276a:	f7fe fa51 	bl	8000c10 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	f241 3288 	movw	r2, #5000	; 0x1388
 8002778:	4293      	cmp	r3, r2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e0be      	b.n	80028fe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002780:	4b1c      	ldr	r3, [pc, #112]	; (80027f4 <HAL_RCC_ClockConfig+0x244>)
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	429a      	cmp	r2, r3
 8002790:	d1eb      	bne.n	800276a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d010      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	4b14      	ldr	r3, [pc, #80]	; (80027f4 <HAL_RCC_ClockConfig+0x244>)
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d208      	bcs.n	80027c0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027ae:	4b11      	ldr	r3, [pc, #68]	; (80027f4 <HAL_RCC_ClockConfig+0x244>)
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	f023 020f 	bic.w	r2, r3, #15
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	490e      	ldr	r1, [pc, #56]	; (80027f4 <HAL_RCC_ClockConfig+0x244>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027c0:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <HAL_RCC_ClockConfig+0x240>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 030f 	and.w	r3, r3, #15
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d214      	bcs.n	80027f8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ce:	4b08      	ldr	r3, [pc, #32]	; (80027f0 <HAL_RCC_ClockConfig+0x240>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f023 020f 	bic.w	r2, r3, #15
 80027d6:	4906      	ldr	r1, [pc, #24]	; (80027f0 <HAL_RCC_ClockConfig+0x240>)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	4313      	orrs	r3, r2
 80027dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027de:	4b04      	ldr	r3, [pc, #16]	; (80027f0 <HAL_RCC_ClockConfig+0x240>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d005      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e086      	b.n	80028fe <HAL_RCC_ClockConfig+0x34e>
 80027f0:	52002000 	.word	0x52002000
 80027f4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b00      	cmp	r3, #0
 8002802:	d010      	beq.n	8002826 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691a      	ldr	r2, [r3, #16]
 8002808:	4b3f      	ldr	r3, [pc, #252]	; (8002908 <HAL_RCC_ClockConfig+0x358>)
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002810:	429a      	cmp	r2, r3
 8002812:	d208      	bcs.n	8002826 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002814:	4b3c      	ldr	r3, [pc, #240]	; (8002908 <HAL_RCC_ClockConfig+0x358>)
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	4939      	ldr	r1, [pc, #228]	; (8002908 <HAL_RCC_ClockConfig+0x358>)
 8002822:	4313      	orrs	r3, r2
 8002824:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	2b00      	cmp	r3, #0
 8002830:	d010      	beq.n	8002854 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	695a      	ldr	r2, [r3, #20]
 8002836:	4b34      	ldr	r3, [pc, #208]	; (8002908 <HAL_RCC_ClockConfig+0x358>)
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800283e:	429a      	cmp	r2, r3
 8002840:	d208      	bcs.n	8002854 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002842:	4b31      	ldr	r3, [pc, #196]	; (8002908 <HAL_RCC_ClockConfig+0x358>)
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	492e      	ldr	r1, [pc, #184]	; (8002908 <HAL_RCC_ClockConfig+0x358>)
 8002850:	4313      	orrs	r3, r2
 8002852:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0310 	and.w	r3, r3, #16
 800285c:	2b00      	cmp	r3, #0
 800285e:	d010      	beq.n	8002882 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	699a      	ldr	r2, [r3, #24]
 8002864:	4b28      	ldr	r3, [pc, #160]	; (8002908 <HAL_RCC_ClockConfig+0x358>)
 8002866:	69db      	ldr	r3, [r3, #28]
 8002868:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800286c:	429a      	cmp	r2, r3
 800286e:	d208      	bcs.n	8002882 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002870:	4b25      	ldr	r3, [pc, #148]	; (8002908 <HAL_RCC_ClockConfig+0x358>)
 8002872:	69db      	ldr	r3, [r3, #28]
 8002874:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	4922      	ldr	r1, [pc, #136]	; (8002908 <HAL_RCC_ClockConfig+0x358>)
 800287e:	4313      	orrs	r3, r2
 8002880:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0320 	and.w	r3, r3, #32
 800288a:	2b00      	cmp	r3, #0
 800288c:	d010      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	69da      	ldr	r2, [r3, #28]
 8002892:	4b1d      	ldr	r3, [pc, #116]	; (8002908 <HAL_RCC_ClockConfig+0x358>)
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800289a:	429a      	cmp	r2, r3
 800289c:	d208      	bcs.n	80028b0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800289e:	4b1a      	ldr	r3, [pc, #104]	; (8002908 <HAL_RCC_ClockConfig+0x358>)
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	4917      	ldr	r1, [pc, #92]	; (8002908 <HAL_RCC_ClockConfig+0x358>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80028b0:	f000 f834 	bl	800291c <HAL_RCC_GetSysClockFreq>
 80028b4:	4602      	mov	r2, r0
 80028b6:	4b14      	ldr	r3, [pc, #80]	; (8002908 <HAL_RCC_ClockConfig+0x358>)
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	0a1b      	lsrs	r3, r3, #8
 80028bc:	f003 030f 	and.w	r3, r3, #15
 80028c0:	4912      	ldr	r1, [pc, #72]	; (800290c <HAL_RCC_ClockConfig+0x35c>)
 80028c2:	5ccb      	ldrb	r3, [r1, r3]
 80028c4:	f003 031f 	and.w	r3, r3, #31
 80028c8:	fa22 f303 	lsr.w	r3, r2, r3
 80028cc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80028ce:	4b0e      	ldr	r3, [pc, #56]	; (8002908 <HAL_RCC_ClockConfig+0x358>)
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	f003 030f 	and.w	r3, r3, #15
 80028d6:	4a0d      	ldr	r2, [pc, #52]	; (800290c <HAL_RCC_ClockConfig+0x35c>)
 80028d8:	5cd3      	ldrb	r3, [r2, r3]
 80028da:	f003 031f 	and.w	r3, r3, #31
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	fa22 f303 	lsr.w	r3, r2, r3
 80028e4:	4a0a      	ldr	r2, [pc, #40]	; (8002910 <HAL_RCC_ClockConfig+0x360>)
 80028e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028e8:	4a0a      	ldr	r2, [pc, #40]	; (8002914 <HAL_RCC_ClockConfig+0x364>)
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80028ee:	4b0a      	ldr	r3, [pc, #40]	; (8002918 <HAL_RCC_ClockConfig+0x368>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fe f942 	bl	8000b7c <HAL_InitTick>
 80028f8:	4603      	mov	r3, r0
 80028fa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3718      	adds	r7, #24
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	58024400 	.word	0x58024400
 800290c:	080064e4 	.word	0x080064e4
 8002910:	24000004 	.word	0x24000004
 8002914:	24000000 	.word	0x24000000
 8002918:	24000008 	.word	0x24000008

0800291c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800291c:	b480      	push	{r7}
 800291e:	b089      	sub	sp, #36	; 0x24
 8002920:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002922:	4bb3      	ldr	r3, [pc, #716]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800292a:	2b18      	cmp	r3, #24
 800292c:	f200 8155 	bhi.w	8002bda <HAL_RCC_GetSysClockFreq+0x2be>
 8002930:	a201      	add	r2, pc, #4	; (adr r2, 8002938 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002936:	bf00      	nop
 8002938:	0800299d 	.word	0x0800299d
 800293c:	08002bdb 	.word	0x08002bdb
 8002940:	08002bdb 	.word	0x08002bdb
 8002944:	08002bdb 	.word	0x08002bdb
 8002948:	08002bdb 	.word	0x08002bdb
 800294c:	08002bdb 	.word	0x08002bdb
 8002950:	08002bdb 	.word	0x08002bdb
 8002954:	08002bdb 	.word	0x08002bdb
 8002958:	080029c3 	.word	0x080029c3
 800295c:	08002bdb 	.word	0x08002bdb
 8002960:	08002bdb 	.word	0x08002bdb
 8002964:	08002bdb 	.word	0x08002bdb
 8002968:	08002bdb 	.word	0x08002bdb
 800296c:	08002bdb 	.word	0x08002bdb
 8002970:	08002bdb 	.word	0x08002bdb
 8002974:	08002bdb 	.word	0x08002bdb
 8002978:	080029c9 	.word	0x080029c9
 800297c:	08002bdb 	.word	0x08002bdb
 8002980:	08002bdb 	.word	0x08002bdb
 8002984:	08002bdb 	.word	0x08002bdb
 8002988:	08002bdb 	.word	0x08002bdb
 800298c:	08002bdb 	.word	0x08002bdb
 8002990:	08002bdb 	.word	0x08002bdb
 8002994:	08002bdb 	.word	0x08002bdb
 8002998:	080029cf 	.word	0x080029cf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800299c:	4b94      	ldr	r3, [pc, #592]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0320 	and.w	r3, r3, #32
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d009      	beq.n	80029bc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80029a8:	4b91      	ldr	r3, [pc, #580]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	08db      	lsrs	r3, r3, #3
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	4a90      	ldr	r2, [pc, #576]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80029b4:	fa22 f303 	lsr.w	r3, r2, r3
 80029b8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80029ba:	e111      	b.n	8002be0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80029bc:	4b8d      	ldr	r3, [pc, #564]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80029be:	61bb      	str	r3, [r7, #24]
      break;
 80029c0:	e10e      	b.n	8002be0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80029c2:	4b8d      	ldr	r3, [pc, #564]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80029c4:	61bb      	str	r3, [r7, #24]
      break;
 80029c6:	e10b      	b.n	8002be0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80029c8:	4b8c      	ldr	r3, [pc, #560]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80029ca:	61bb      	str	r3, [r7, #24]
      break;
 80029cc:	e108      	b.n	8002be0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80029ce:	4b88      	ldr	r3, [pc, #544]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d2:	f003 0303 	and.w	r3, r3, #3
 80029d6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80029d8:	4b85      	ldr	r3, [pc, #532]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029dc:	091b      	lsrs	r3, r3, #4
 80029de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029e2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80029e4:	4b82      	ldr	r3, [pc, #520]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80029ee:	4b80      	ldr	r3, [pc, #512]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f2:	08db      	lsrs	r3, r3, #3
 80029f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	fb02 f303 	mul.w	r3, r2, r3
 80029fe:	ee07 3a90 	vmov	s15, r3
 8002a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a06:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 80e1 	beq.w	8002bd4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	f000 8083 	beq.w	8002b20 <HAL_RCC_GetSysClockFreq+0x204>
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	f200 80a1 	bhi.w	8002b64 <HAL_RCC_GetSysClockFreq+0x248>
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d003      	beq.n	8002a30 <HAL_RCC_GetSysClockFreq+0x114>
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d056      	beq.n	8002adc <HAL_RCC_GetSysClockFreq+0x1c0>
 8002a2e:	e099      	b.n	8002b64 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a30:	4b6f      	ldr	r3, [pc, #444]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0320 	and.w	r3, r3, #32
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d02d      	beq.n	8002a98 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002a3c:	4b6c      	ldr	r3, [pc, #432]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	08db      	lsrs	r3, r3, #3
 8002a42:	f003 0303 	and.w	r3, r3, #3
 8002a46:	4a6b      	ldr	r2, [pc, #428]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a48:	fa22 f303 	lsr.w	r3, r2, r3
 8002a4c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	ee07 3a90 	vmov	s15, r3
 8002a54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	ee07 3a90 	vmov	s15, r3
 8002a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a66:	4b62      	ldr	r3, [pc, #392]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a6e:	ee07 3a90 	vmov	s15, r3
 8002a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a76:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a7a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002c00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a92:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002a96:	e087      	b.n	8002ba8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	ee07 3a90 	vmov	s15, r3
 8002a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aa2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002c04 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002aaa:	4b51      	ldr	r3, [pc, #324]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ab2:	ee07 3a90 	vmov	s15, r3
 8002ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002aba:	ed97 6a02 	vldr	s12, [r7, #8]
 8002abe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002c00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002aca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ad6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ada:	e065      	b.n	8002ba8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	ee07 3a90 	vmov	s15, r3
 8002ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ae6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002c08 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002aee:	4b40      	ldr	r3, [pc, #256]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002af6:	ee07 3a90 	vmov	s15, r3
 8002afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002afe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b02:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002c00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b1e:	e043      	b.n	8002ba8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	ee07 3a90 	vmov	s15, r3
 8002b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b2a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002c0c <HAL_RCC_GetSysClockFreq+0x2f0>
 8002b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b32:	4b2f      	ldr	r3, [pc, #188]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b3a:	ee07 3a90 	vmov	s15, r3
 8002b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b42:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b46:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002c00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b62:	e021      	b.n	8002ba8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	ee07 3a90 	vmov	s15, r3
 8002b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b6e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002c08 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b76:	4b1e      	ldr	r3, [pc, #120]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b7e:	ee07 3a90 	vmov	s15, r3
 8002b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b86:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b8a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002c00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ba2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ba6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002ba8:	4b11      	ldr	r3, [pc, #68]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bac:	0a5b      	lsrs	r3, r3, #9
 8002bae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	ee07 3a90 	vmov	s15, r3
 8002bbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8002bc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bcc:	ee17 3a90 	vmov	r3, s15
 8002bd0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002bd2:	e005      	b.n	8002be0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	61bb      	str	r3, [r7, #24]
      break;
 8002bd8:	e002      	b.n	8002be0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002bda:	4b07      	ldr	r3, [pc, #28]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002bdc:	61bb      	str	r3, [r7, #24]
      break;
 8002bde:	bf00      	nop
  }

  return sysclockfreq;
 8002be0:	69bb      	ldr	r3, [r7, #24]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3724      	adds	r7, #36	; 0x24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	58024400 	.word	0x58024400
 8002bf4:	03d09000 	.word	0x03d09000
 8002bf8:	003d0900 	.word	0x003d0900
 8002bfc:	017d7840 	.word	0x017d7840
 8002c00:	46000000 	.word	0x46000000
 8002c04:	4c742400 	.word	0x4c742400
 8002c08:	4a742400 	.word	0x4a742400
 8002c0c:	4bbebc20 	.word	0x4bbebc20

08002c10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002c16:	f7ff fe81 	bl	800291c <HAL_RCC_GetSysClockFreq>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	4b10      	ldr	r3, [pc, #64]	; (8002c60 <HAL_RCC_GetHCLKFreq+0x50>)
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	0a1b      	lsrs	r3, r3, #8
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	490f      	ldr	r1, [pc, #60]	; (8002c64 <HAL_RCC_GetHCLKFreq+0x54>)
 8002c28:	5ccb      	ldrb	r3, [r1, r3]
 8002c2a:	f003 031f 	and.w	r3, r3, #31
 8002c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c32:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c34:	4b0a      	ldr	r3, [pc, #40]	; (8002c60 <HAL_RCC_GetHCLKFreq+0x50>)
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	f003 030f 	and.w	r3, r3, #15
 8002c3c:	4a09      	ldr	r2, [pc, #36]	; (8002c64 <HAL_RCC_GetHCLKFreq+0x54>)
 8002c3e:	5cd3      	ldrb	r3, [r2, r3]
 8002c40:	f003 031f 	and.w	r3, r3, #31
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	fa22 f303 	lsr.w	r3, r2, r3
 8002c4a:	4a07      	ldr	r2, [pc, #28]	; (8002c68 <HAL_RCC_GetHCLKFreq+0x58>)
 8002c4c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c4e:	4a07      	ldr	r2, [pc, #28]	; (8002c6c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002c54:	4b04      	ldr	r3, [pc, #16]	; (8002c68 <HAL_RCC_GetHCLKFreq+0x58>)
 8002c56:	681b      	ldr	r3, [r3, #0]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	58024400 	.word	0x58024400
 8002c64:	080064e4 	.word	0x080064e4
 8002c68:	24000004 	.word	0x24000004
 8002c6c:	24000000 	.word	0x24000000

08002c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002c74:	f7ff ffcc 	bl	8002c10 <HAL_RCC_GetHCLKFreq>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	091b      	lsrs	r3, r3, #4
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	4904      	ldr	r1, [pc, #16]	; (8002c98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c86:	5ccb      	ldrb	r3, [r1, r3]
 8002c88:	f003 031f 	and.w	r3, r3, #31
 8002c8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	58024400 	.word	0x58024400
 8002c98:	080064e4 	.word	0x080064e4

08002c9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002ca0:	f7ff ffb6 	bl	8002c10 <HAL_RCC_GetHCLKFreq>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	0a1b      	lsrs	r3, r3, #8
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	4904      	ldr	r1, [pc, #16]	; (8002cc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002cb2:	5ccb      	ldrb	r3, [r1, r3]
 8002cb4:	f003 031f 	and.w	r3, r3, #31
 8002cb8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	58024400 	.word	0x58024400
 8002cc4:	080064e4 	.word	0x080064e4

08002cc8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ccc:	b0ca      	sub	sp, #296	; 0x128
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cda:	2300      	movs	r3, #0
 8002cdc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002cec:	2500      	movs	r5, #0
 8002cee:	ea54 0305 	orrs.w	r3, r4, r5
 8002cf2:	d049      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cfa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002cfe:	d02f      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002d00:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d04:	d828      	bhi.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002d06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d0a:	d01a      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002d0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d10:	d822      	bhi.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002d16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d1a:	d007      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d1c:	e01c      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d1e:	4bb8      	ldr	r3, [pc, #736]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d22:	4ab7      	ldr	r2, [pc, #732]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002d2a:	e01a      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d30:	3308      	adds	r3, #8
 8002d32:	2102      	movs	r1, #2
 8002d34:	4618      	mov	r0, r3
 8002d36:	f001 fc8f 	bl	8004658 <RCCEx_PLL2_Config>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002d40:	e00f      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d46:	3328      	adds	r3, #40	; 0x28
 8002d48:	2102      	movs	r1, #2
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f001 fd36 	bl	80047bc <RCCEx_PLL3_Config>
 8002d50:	4603      	mov	r3, r0
 8002d52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002d56:	e004      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002d5e:	e000      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002d60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10a      	bne.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002d6a:	4ba5      	ldr	r3, [pc, #660]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d6e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d78:	4aa1      	ldr	r2, [pc, #644]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d7a:	430b      	orrs	r3, r1
 8002d7c:	6513      	str	r3, [r2, #80]	; 0x50
 8002d7e:	e003      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d84:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d90:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002d94:	f04f 0900 	mov.w	r9, #0
 8002d98:	ea58 0309 	orrs.w	r3, r8, r9
 8002d9c:	d047      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da4:	2b04      	cmp	r3, #4
 8002da6:	d82a      	bhi.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002da8:	a201      	add	r2, pc, #4	; (adr r2, 8002db0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dae:	bf00      	nop
 8002db0:	08002dc5 	.word	0x08002dc5
 8002db4:	08002dd3 	.word	0x08002dd3
 8002db8:	08002de9 	.word	0x08002de9
 8002dbc:	08002e07 	.word	0x08002e07
 8002dc0:	08002e07 	.word	0x08002e07
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dc4:	4b8e      	ldr	r3, [pc, #568]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc8:	4a8d      	ldr	r2, [pc, #564]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002dd0:	e01a      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dd6:	3308      	adds	r3, #8
 8002dd8:	2100      	movs	r1, #0
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f001 fc3c 	bl	8004658 <RCCEx_PLL2_Config>
 8002de0:	4603      	mov	r3, r0
 8002de2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002de6:	e00f      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dec:	3328      	adds	r3, #40	; 0x28
 8002dee:	2100      	movs	r1, #0
 8002df0:	4618      	mov	r0, r3
 8002df2:	f001 fce3 	bl	80047bc <RCCEx_PLL3_Config>
 8002df6:	4603      	mov	r3, r0
 8002df8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002dfc:	e004      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002e04:	e000      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002e06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10a      	bne.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e10:	4b7b      	ldr	r3, [pc, #492]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e14:	f023 0107 	bic.w	r1, r3, #7
 8002e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1e:	4a78      	ldr	r2, [pc, #480]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e20:	430b      	orrs	r3, r1
 8002e22:	6513      	str	r3, [r2, #80]	; 0x50
 8002e24:	e003      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e36:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002e3a:	f04f 0b00 	mov.w	fp, #0
 8002e3e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002e42:	d04c      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e4e:	d030      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002e50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e54:	d829      	bhi.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002e56:	2bc0      	cmp	r3, #192	; 0xc0
 8002e58:	d02d      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002e5a:	2bc0      	cmp	r3, #192	; 0xc0
 8002e5c:	d825      	bhi.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002e5e:	2b80      	cmp	r3, #128	; 0x80
 8002e60:	d018      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002e62:	2b80      	cmp	r3, #128	; 0x80
 8002e64:	d821      	bhi.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d002      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002e6a:	2b40      	cmp	r3, #64	; 0x40
 8002e6c:	d007      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002e6e:	e01c      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e70:	4b63      	ldr	r3, [pc, #396]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e74:	4a62      	ldr	r2, [pc, #392]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002e7c:	e01c      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e82:	3308      	adds	r3, #8
 8002e84:	2100      	movs	r1, #0
 8002e86:	4618      	mov	r0, r3
 8002e88:	f001 fbe6 	bl	8004658 <RCCEx_PLL2_Config>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002e92:	e011      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e98:	3328      	adds	r3, #40	; 0x28
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f001 fc8d 	bl	80047bc <RCCEx_PLL3_Config>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002ea8:	e006      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002eb0:	e002      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002eb2:	bf00      	nop
 8002eb4:	e000      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002eb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002eb8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10a      	bne.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002ec0:	4b4f      	ldr	r3, [pc, #316]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ec4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ece:	4a4c      	ldr	r2, [pc, #304]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ed0:	430b      	orrs	r3, r1
 8002ed2:	6513      	str	r3, [r2, #80]	; 0x50
 8002ed4:	e003      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ed6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002eda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002eea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002eee:	2300      	movs	r3, #0
 8002ef0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002ef4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8002ef8:	460b      	mov	r3, r1
 8002efa:	4313      	orrs	r3, r2
 8002efc:	d053      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002f06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f0a:	d035      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002f0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f10:	d82e      	bhi.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002f12:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002f16:	d031      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002f18:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002f1c:	d828      	bhi.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002f1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f22:	d01a      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002f24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f28:	d822      	bhi.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002f2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f32:	d007      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002f34:	e01c      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f36:	4b32      	ldr	r3, [pc, #200]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3a:	4a31      	ldr	r2, [pc, #196]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f42:	e01c      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f48:	3308      	adds	r3, #8
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f001 fb83 	bl	8004658 <RCCEx_PLL2_Config>
 8002f52:	4603      	mov	r3, r0
 8002f54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002f58:	e011      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f5e:	3328      	adds	r3, #40	; 0x28
 8002f60:	2100      	movs	r1, #0
 8002f62:	4618      	mov	r0, r3
 8002f64:	f001 fc2a 	bl	80047bc <RCCEx_PLL3_Config>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f6e:	e006      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002f76:	e002      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002f78:	bf00      	nop
 8002f7a:	e000      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002f7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10b      	bne.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002f86:	4b1e      	ldr	r3, [pc, #120]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f92:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002f96:	4a1a      	ldr	r2, [pc, #104]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f9c:	e003      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002fa2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fae:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002fb2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002fbc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	d056      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002fce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fd2:	d038      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002fd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fd8:	d831      	bhi.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002fda:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002fde:	d034      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002fe0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002fe4:	d82b      	bhi.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002fe6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fea:	d01d      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002fec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ff0:	d825      	bhi.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d006      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002ff6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ffa:	d00a      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002ffc:	e01f      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002ffe:	bf00      	nop
 8003000:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003004:	4ba2      	ldr	r3, [pc, #648]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003008:	4aa1      	ldr	r2, [pc, #644]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800300a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800300e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003010:	e01c      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003016:	3308      	adds	r3, #8
 8003018:	2100      	movs	r1, #0
 800301a:	4618      	mov	r0, r3
 800301c:	f001 fb1c 	bl	8004658 <RCCEx_PLL2_Config>
 8003020:	4603      	mov	r3, r0
 8003022:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003026:	e011      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003028:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800302c:	3328      	adds	r3, #40	; 0x28
 800302e:	2100      	movs	r1, #0
 8003030:	4618      	mov	r0, r3
 8003032:	f001 fbc3 	bl	80047bc <RCCEx_PLL3_Config>
 8003036:	4603      	mov	r3, r0
 8003038:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800303c:	e006      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003044:	e002      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003046:	bf00      	nop
 8003048:	e000      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800304a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800304c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10b      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003054:	4b8e      	ldr	r3, [pc, #568]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003058:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800305c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003060:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003064:	4a8a      	ldr	r2, [pc, #552]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003066:	430b      	orrs	r3, r1
 8003068:	6593      	str	r3, [r2, #88]	; 0x58
 800306a:	e003      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800306c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003070:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003074:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003080:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003084:	2300      	movs	r3, #0
 8003086:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800308a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800308e:	460b      	mov	r3, r1
 8003090:	4313      	orrs	r3, r2
 8003092:	d03a      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003094:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800309a:	2b30      	cmp	r3, #48	; 0x30
 800309c:	d01f      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x416>
 800309e:	2b30      	cmp	r3, #48	; 0x30
 80030a0:	d819      	bhi.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80030a2:	2b20      	cmp	r3, #32
 80030a4:	d00c      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80030a6:	2b20      	cmp	r3, #32
 80030a8:	d815      	bhi.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d019      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80030ae:	2b10      	cmp	r3, #16
 80030b0:	d111      	bne.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030b2:	4b77      	ldr	r3, [pc, #476]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b6:	4a76      	ldr	r2, [pc, #472]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80030be:	e011      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80030c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030c4:	3308      	adds	r3, #8
 80030c6:	2102      	movs	r1, #2
 80030c8:	4618      	mov	r0, r3
 80030ca:	f001 fac5 	bl	8004658 <RCCEx_PLL2_Config>
 80030ce:	4603      	mov	r3, r0
 80030d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80030d4:	e006      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80030dc:	e002      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80030de:	bf00      	nop
 80030e0:	e000      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80030e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10a      	bne.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80030ec:	4b68      	ldr	r3, [pc, #416]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80030f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030fa:	4a65      	ldr	r2, [pc, #404]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030fc:	430b      	orrs	r3, r1
 80030fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003100:	e003      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003102:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003106:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800310a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800310e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003112:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003116:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800311a:	2300      	movs	r3, #0
 800311c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003120:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003124:	460b      	mov	r3, r1
 8003126:	4313      	orrs	r3, r2
 8003128:	d051      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800312a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800312e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003130:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003134:	d035      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003136:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800313a:	d82e      	bhi.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800313c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003140:	d031      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003142:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003146:	d828      	bhi.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003148:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800314c:	d01a      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800314e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003152:	d822      	bhi.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003154:	2b00      	cmp	r3, #0
 8003156:	d003      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800315c:	d007      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800315e:	e01c      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003160:	4b4b      	ldr	r3, [pc, #300]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003164:	4a4a      	ldr	r2, [pc, #296]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800316a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800316c:	e01c      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800316e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003172:	3308      	adds	r3, #8
 8003174:	2100      	movs	r1, #0
 8003176:	4618      	mov	r0, r3
 8003178:	f001 fa6e 	bl	8004658 <RCCEx_PLL2_Config>
 800317c:	4603      	mov	r3, r0
 800317e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003182:	e011      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003184:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003188:	3328      	adds	r3, #40	; 0x28
 800318a:	2100      	movs	r1, #0
 800318c:	4618      	mov	r0, r3
 800318e:	f001 fb15 	bl	80047bc <RCCEx_PLL3_Config>
 8003192:	4603      	mov	r3, r0
 8003194:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003198:	e006      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80031a0:	e002      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80031a2:	bf00      	nop
 80031a4:	e000      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80031a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10a      	bne.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80031b0:	4b37      	ldr	r3, [pc, #220]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031b4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80031b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031be:	4a34      	ldr	r2, [pc, #208]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031c0:	430b      	orrs	r3, r1
 80031c2:	6513      	str	r3, [r2, #80]	; 0x50
 80031c4:	e003      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80031ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80031da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80031de:	2300      	movs	r3, #0
 80031e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80031e4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80031e8:	460b      	mov	r3, r1
 80031ea:	4313      	orrs	r3, r2
 80031ec:	d056      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80031ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031f8:	d033      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80031fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031fe:	d82c      	bhi.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003200:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003204:	d02f      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003206:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800320a:	d826      	bhi.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800320c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003210:	d02b      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003212:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003216:	d820      	bhi.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003218:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800321c:	d012      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800321e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003222:	d81a      	bhi.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003224:	2b00      	cmp	r3, #0
 8003226:	d022      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800322c:	d115      	bne.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800322e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003232:	3308      	adds	r3, #8
 8003234:	2101      	movs	r1, #1
 8003236:	4618      	mov	r0, r3
 8003238:	f001 fa0e 	bl	8004658 <RCCEx_PLL2_Config>
 800323c:	4603      	mov	r3, r0
 800323e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003242:	e015      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003244:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003248:	3328      	adds	r3, #40	; 0x28
 800324a:	2101      	movs	r1, #1
 800324c:	4618      	mov	r0, r3
 800324e:	f001 fab5 	bl	80047bc <RCCEx_PLL3_Config>
 8003252:	4603      	mov	r3, r0
 8003254:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003258:	e00a      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003260:	e006      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003262:	bf00      	nop
 8003264:	e004      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003266:	bf00      	nop
 8003268:	e002      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800326a:	bf00      	nop
 800326c:	e000      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800326e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003270:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003274:	2b00      	cmp	r3, #0
 8003276:	d10d      	bne.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003278:	4b05      	ldr	r3, [pc, #20]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800327a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800327c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003280:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003284:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003286:	4a02      	ldr	r2, [pc, #8]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003288:	430b      	orrs	r3, r1
 800328a:	6513      	str	r3, [r2, #80]	; 0x50
 800328c:	e006      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800328e:	bf00      	nop
 8003290:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003294:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003298:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800329c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80032a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80032ac:	2300      	movs	r3, #0
 80032ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80032b2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80032b6:	460b      	mov	r3, r1
 80032b8:	4313      	orrs	r3, r2
 80032ba:	d055      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80032bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80032c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032c8:	d033      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80032ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032ce:	d82c      	bhi.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80032d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d4:	d02f      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80032d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032da:	d826      	bhi.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80032dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80032e0:	d02b      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80032e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80032e6:	d820      	bhi.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80032e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032ec:	d012      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80032ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032f2:	d81a      	bhi.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d022      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x676>
 80032f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032fc:	d115      	bne.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003302:	3308      	adds	r3, #8
 8003304:	2101      	movs	r1, #1
 8003306:	4618      	mov	r0, r3
 8003308:	f001 f9a6 	bl	8004658 <RCCEx_PLL2_Config>
 800330c:	4603      	mov	r3, r0
 800330e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003312:	e015      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003314:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003318:	3328      	adds	r3, #40	; 0x28
 800331a:	2101      	movs	r1, #1
 800331c:	4618      	mov	r0, r3
 800331e:	f001 fa4d 	bl	80047bc <RCCEx_PLL3_Config>
 8003322:	4603      	mov	r3, r0
 8003324:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003328:	e00a      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003330:	e006      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003332:	bf00      	nop
 8003334:	e004      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003336:	bf00      	nop
 8003338:	e002      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800333a:	bf00      	nop
 800333c:	e000      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800333e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003340:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10b      	bne.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003348:	4ba3      	ldr	r3, [pc, #652]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800334a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003350:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003354:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003358:	4a9f      	ldr	r2, [pc, #636]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800335a:	430b      	orrs	r3, r1
 800335c:	6593      	str	r3, [r2, #88]	; 0x58
 800335e:	e003      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003360:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003364:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003368:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800336c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003370:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003374:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003378:	2300      	movs	r3, #0
 800337a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800337e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003382:	460b      	mov	r3, r1
 8003384:	4313      	orrs	r3, r2
 8003386:	d037      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003388:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800338c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003392:	d00e      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003394:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003398:	d816      	bhi.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800339a:	2b00      	cmp	r3, #0
 800339c:	d018      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800339e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033a2:	d111      	bne.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033a4:	4b8c      	ldr	r3, [pc, #560]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a8:	4a8b      	ldr	r2, [pc, #556]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80033b0:	e00f      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80033b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033b6:	3308      	adds	r3, #8
 80033b8:	2101      	movs	r1, #1
 80033ba:	4618      	mov	r0, r3
 80033bc:	f001 f94c 	bl	8004658 <RCCEx_PLL2_Config>
 80033c0:	4603      	mov	r3, r0
 80033c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80033c6:	e004      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80033ce:	e000      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80033d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10a      	bne.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80033da:	4b7f      	ldr	r3, [pc, #508]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033de:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80033e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e8:	4a7b      	ldr	r2, [pc, #492]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033ea:	430b      	orrs	r3, r1
 80033ec:	6513      	str	r3, [r2, #80]	; 0x50
 80033ee:	e003      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80033f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003400:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003404:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003408:	2300      	movs	r3, #0
 800340a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800340e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003412:	460b      	mov	r3, r1
 8003414:	4313      	orrs	r3, r2
 8003416:	d039      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003418:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800341c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800341e:	2b03      	cmp	r3, #3
 8003420:	d81c      	bhi.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003422:	a201      	add	r2, pc, #4	; (adr r2, 8003428 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003428:	08003465 	.word	0x08003465
 800342c:	08003439 	.word	0x08003439
 8003430:	08003447 	.word	0x08003447
 8003434:	08003465 	.word	0x08003465
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003438:	4b67      	ldr	r3, [pc, #412]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800343a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343c:	4a66      	ldr	r2, [pc, #408]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800343e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003442:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003444:	e00f      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003446:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800344a:	3308      	adds	r3, #8
 800344c:	2102      	movs	r1, #2
 800344e:	4618      	mov	r0, r3
 8003450:	f001 f902 	bl	8004658 <RCCEx_PLL2_Config>
 8003454:	4603      	mov	r3, r0
 8003456:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800345a:	e004      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003462:	e000      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003464:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003466:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10a      	bne.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800346e:	4b5a      	ldr	r3, [pc, #360]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003472:	f023 0103 	bic.w	r1, r3, #3
 8003476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800347a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800347c:	4a56      	ldr	r2, [pc, #344]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800347e:	430b      	orrs	r3, r1
 8003480:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003482:	e003      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003484:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003488:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800348c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003494:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003498:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800349c:	2300      	movs	r3, #0
 800349e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80034a2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80034a6:	460b      	mov	r3, r1
 80034a8:	4313      	orrs	r3, r2
 80034aa:	f000 809f 	beq.w	80035ec <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034ae:	4b4b      	ldr	r3, [pc, #300]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a4a      	ldr	r2, [pc, #296]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80034b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034ba:	f7fd fba9 	bl	8000c10 <HAL_GetTick>
 80034be:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034c2:	e00b      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034c4:	f7fd fba4 	bl	8000c10 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b64      	cmp	r3, #100	; 0x64
 80034d2:	d903      	bls.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80034da:	e005      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034dc:	4b3f      	ldr	r3, [pc, #252]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0ed      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80034e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d179      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80034f0:	4b39      	ldr	r3, [pc, #228]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80034fc:	4053      	eors	r3, r2
 80034fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003502:	2b00      	cmp	r3, #0
 8003504:	d015      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003506:	4b34      	ldr	r3, [pc, #208]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800350e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003512:	4b31      	ldr	r3, [pc, #196]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003516:	4a30      	ldr	r2, [pc, #192]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800351c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800351e:	4b2e      	ldr	r3, [pc, #184]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003522:	4a2d      	ldr	r2, [pc, #180]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003528:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800352a:	4a2b      	ldr	r2, [pc, #172]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800352c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003530:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003532:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003536:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800353a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800353e:	d118      	bne.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003540:	f7fd fb66 	bl	8000c10 <HAL_GetTick>
 8003544:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003548:	e00d      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800354a:	f7fd fb61 	bl	8000c10 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003554:	1ad2      	subs	r2, r2, r3
 8003556:	f241 3388 	movw	r3, #5000	; 0x1388
 800355a:	429a      	cmp	r2, r3
 800355c:	d903      	bls.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003564:	e005      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003566:	4b1c      	ldr	r3, [pc, #112]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0eb      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003572:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003576:	2b00      	cmp	r3, #0
 8003578:	d129      	bne.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800357a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800357e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003586:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800358a:	d10e      	bne.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800358c:	4b12      	ldr	r3, [pc, #72]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003594:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003598:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800359c:	091a      	lsrs	r2, r3, #4
 800359e:	4b10      	ldr	r3, [pc, #64]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80035a0:	4013      	ands	r3, r2
 80035a2:	4a0d      	ldr	r2, [pc, #52]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035a4:	430b      	orrs	r3, r1
 80035a6:	6113      	str	r3, [r2, #16]
 80035a8:	e005      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80035aa:	4b0b      	ldr	r3, [pc, #44]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	4a0a      	ldr	r2, [pc, #40]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035b0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80035b4:	6113      	str	r3, [r2, #16]
 80035b6:	4b08      	ldr	r3, [pc, #32]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035b8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80035ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80035c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c6:	4a04      	ldr	r2, [pc, #16]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035c8:	430b      	orrs	r3, r1
 80035ca:	6713      	str	r3, [r2, #112]	; 0x70
 80035cc:	e00e      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80035d6:	e009      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x924>
 80035d8:	58024400 	.word	0x58024400
 80035dc:	58024800 	.word	0x58024800
 80035e0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80035ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f4:	f002 0301 	and.w	r3, r2, #1
 80035f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035fc:	2300      	movs	r3, #0
 80035fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003602:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003606:	460b      	mov	r3, r1
 8003608:	4313      	orrs	r3, r2
 800360a:	f000 8089 	beq.w	8003720 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800360e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003612:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003614:	2b28      	cmp	r3, #40	; 0x28
 8003616:	d86b      	bhi.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003618:	a201      	add	r2, pc, #4	; (adr r2, 8003620 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800361a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800361e:	bf00      	nop
 8003620:	080036f9 	.word	0x080036f9
 8003624:	080036f1 	.word	0x080036f1
 8003628:	080036f1 	.word	0x080036f1
 800362c:	080036f1 	.word	0x080036f1
 8003630:	080036f1 	.word	0x080036f1
 8003634:	080036f1 	.word	0x080036f1
 8003638:	080036f1 	.word	0x080036f1
 800363c:	080036f1 	.word	0x080036f1
 8003640:	080036c5 	.word	0x080036c5
 8003644:	080036f1 	.word	0x080036f1
 8003648:	080036f1 	.word	0x080036f1
 800364c:	080036f1 	.word	0x080036f1
 8003650:	080036f1 	.word	0x080036f1
 8003654:	080036f1 	.word	0x080036f1
 8003658:	080036f1 	.word	0x080036f1
 800365c:	080036f1 	.word	0x080036f1
 8003660:	080036db 	.word	0x080036db
 8003664:	080036f1 	.word	0x080036f1
 8003668:	080036f1 	.word	0x080036f1
 800366c:	080036f1 	.word	0x080036f1
 8003670:	080036f1 	.word	0x080036f1
 8003674:	080036f1 	.word	0x080036f1
 8003678:	080036f1 	.word	0x080036f1
 800367c:	080036f1 	.word	0x080036f1
 8003680:	080036f9 	.word	0x080036f9
 8003684:	080036f1 	.word	0x080036f1
 8003688:	080036f1 	.word	0x080036f1
 800368c:	080036f1 	.word	0x080036f1
 8003690:	080036f1 	.word	0x080036f1
 8003694:	080036f1 	.word	0x080036f1
 8003698:	080036f1 	.word	0x080036f1
 800369c:	080036f1 	.word	0x080036f1
 80036a0:	080036f9 	.word	0x080036f9
 80036a4:	080036f1 	.word	0x080036f1
 80036a8:	080036f1 	.word	0x080036f1
 80036ac:	080036f1 	.word	0x080036f1
 80036b0:	080036f1 	.word	0x080036f1
 80036b4:	080036f1 	.word	0x080036f1
 80036b8:	080036f1 	.word	0x080036f1
 80036bc:	080036f1 	.word	0x080036f1
 80036c0:	080036f9 	.word	0x080036f9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036c8:	3308      	adds	r3, #8
 80036ca:	2101      	movs	r1, #1
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 ffc3 	bl	8004658 <RCCEx_PLL2_Config>
 80036d2:	4603      	mov	r3, r0
 80036d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80036d8:	e00f      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036de:	3328      	adds	r3, #40	; 0x28
 80036e0:	2101      	movs	r1, #1
 80036e2:	4618      	mov	r0, r3
 80036e4:	f001 f86a 	bl	80047bc <RCCEx_PLL3_Config>
 80036e8:	4603      	mov	r3, r0
 80036ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80036ee:	e004      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80036f6:	e000      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80036f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10a      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003702:	4bbf      	ldr	r3, [pc, #764]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003706:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800370a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800370e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003710:	4abb      	ldr	r2, [pc, #748]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003712:	430b      	orrs	r3, r1
 8003714:	6553      	str	r3, [r2, #84]	; 0x54
 8003716:	e003      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003718:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800371c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003720:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003728:	f002 0302 	and.w	r3, r2, #2
 800372c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003730:	2300      	movs	r3, #0
 8003732:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003736:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800373a:	460b      	mov	r3, r1
 800373c:	4313      	orrs	r3, r2
 800373e:	d041      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003744:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003746:	2b05      	cmp	r3, #5
 8003748:	d824      	bhi.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800374a:	a201      	add	r2, pc, #4	; (adr r2, 8003750 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800374c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003750:	0800379d 	.word	0x0800379d
 8003754:	08003769 	.word	0x08003769
 8003758:	0800377f 	.word	0x0800377f
 800375c:	0800379d 	.word	0x0800379d
 8003760:	0800379d 	.word	0x0800379d
 8003764:	0800379d 	.word	0x0800379d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003768:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800376c:	3308      	adds	r3, #8
 800376e:	2101      	movs	r1, #1
 8003770:	4618      	mov	r0, r3
 8003772:	f000 ff71 	bl	8004658 <RCCEx_PLL2_Config>
 8003776:	4603      	mov	r3, r0
 8003778:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800377c:	e00f      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800377e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003782:	3328      	adds	r3, #40	; 0x28
 8003784:	2101      	movs	r1, #1
 8003786:	4618      	mov	r0, r3
 8003788:	f001 f818 	bl	80047bc <RCCEx_PLL3_Config>
 800378c:	4603      	mov	r3, r0
 800378e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003792:	e004      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800379a:	e000      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800379c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800379e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10a      	bne.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80037a6:	4b96      	ldr	r3, [pc, #600]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80037a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037aa:	f023 0107 	bic.w	r1, r3, #7
 80037ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037b4:	4a92      	ldr	r2, [pc, #584]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80037b6:	430b      	orrs	r3, r1
 80037b8:	6553      	str	r3, [r2, #84]	; 0x54
 80037ba:	e003      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037cc:	f002 0304 	and.w	r3, r2, #4
 80037d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037d4:	2300      	movs	r3, #0
 80037d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037da:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80037de:	460b      	mov	r3, r1
 80037e0:	4313      	orrs	r3, r2
 80037e2:	d044      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80037e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ec:	2b05      	cmp	r3, #5
 80037ee:	d825      	bhi.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80037f0:	a201      	add	r2, pc, #4	; (adr r2, 80037f8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80037f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f6:	bf00      	nop
 80037f8:	08003845 	.word	0x08003845
 80037fc:	08003811 	.word	0x08003811
 8003800:	08003827 	.word	0x08003827
 8003804:	08003845 	.word	0x08003845
 8003808:	08003845 	.word	0x08003845
 800380c:	08003845 	.word	0x08003845
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003810:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003814:	3308      	adds	r3, #8
 8003816:	2101      	movs	r1, #1
 8003818:	4618      	mov	r0, r3
 800381a:	f000 ff1d 	bl	8004658 <RCCEx_PLL2_Config>
 800381e:	4603      	mov	r3, r0
 8003820:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003824:	e00f      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003826:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800382a:	3328      	adds	r3, #40	; 0x28
 800382c:	2101      	movs	r1, #1
 800382e:	4618      	mov	r0, r3
 8003830:	f000 ffc4 	bl	80047bc <RCCEx_PLL3_Config>
 8003834:	4603      	mov	r3, r0
 8003836:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800383a:	e004      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003842:	e000      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003844:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003846:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10b      	bne.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800384e:	4b6c      	ldr	r3, [pc, #432]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003852:	f023 0107 	bic.w	r1, r3, #7
 8003856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800385a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800385e:	4a68      	ldr	r2, [pc, #416]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003860:	430b      	orrs	r3, r1
 8003862:	6593      	str	r3, [r2, #88]	; 0x58
 8003864:	e003      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003866:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800386a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800386e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003876:	f002 0320 	and.w	r3, r2, #32
 800387a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800387e:	2300      	movs	r3, #0
 8003880:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003884:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003888:	460b      	mov	r3, r1
 800388a:	4313      	orrs	r3, r2
 800388c:	d055      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800388e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003896:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800389a:	d033      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800389c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038a0:	d82c      	bhi.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80038a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a6:	d02f      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80038a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ac:	d826      	bhi.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80038ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038b2:	d02b      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80038b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038b8:	d820      	bhi.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80038ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038be:	d012      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80038c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038c4:	d81a      	bhi.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d022      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80038ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038ce:	d115      	bne.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038d4:	3308      	adds	r3, #8
 80038d6:	2100      	movs	r1, #0
 80038d8:	4618      	mov	r0, r3
 80038da:	f000 febd 	bl	8004658 <RCCEx_PLL2_Config>
 80038de:	4603      	mov	r3, r0
 80038e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80038e4:	e015      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80038e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038ea:	3328      	adds	r3, #40	; 0x28
 80038ec:	2102      	movs	r1, #2
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 ff64 	bl	80047bc <RCCEx_PLL3_Config>
 80038f4:	4603      	mov	r3, r0
 80038f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80038fa:	e00a      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003902:	e006      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003904:	bf00      	nop
 8003906:	e004      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003908:	bf00      	nop
 800390a:	e002      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800390c:	bf00      	nop
 800390e:	e000      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003910:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003912:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10b      	bne.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800391a:	4b39      	ldr	r3, [pc, #228]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800391c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392a:	4a35      	ldr	r2, [pc, #212]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800392c:	430b      	orrs	r3, r1
 800392e:	6553      	str	r3, [r2, #84]	; 0x54
 8003930:	e003      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003932:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003936:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800393a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800393e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003942:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003946:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800394a:	2300      	movs	r3, #0
 800394c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003950:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003954:	460b      	mov	r3, r1
 8003956:	4313      	orrs	r3, r2
 8003958:	d058      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800395a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800395e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003962:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003966:	d033      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003968:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800396c:	d82c      	bhi.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800396e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003972:	d02f      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003978:	d826      	bhi.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800397a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800397e:	d02b      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003980:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003984:	d820      	bhi.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003986:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800398a:	d012      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800398c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003990:	d81a      	bhi.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003992:	2b00      	cmp	r3, #0
 8003994:	d022      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800399a:	d115      	bne.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800399c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039a0:	3308      	adds	r3, #8
 80039a2:	2100      	movs	r1, #0
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 fe57 	bl	8004658 <RCCEx_PLL2_Config>
 80039aa:	4603      	mov	r3, r0
 80039ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80039b0:	e015      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039b6:	3328      	adds	r3, #40	; 0x28
 80039b8:	2102      	movs	r1, #2
 80039ba:	4618      	mov	r0, r3
 80039bc:	f000 fefe 	bl	80047bc <RCCEx_PLL3_Config>
 80039c0:	4603      	mov	r3, r0
 80039c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80039c6:	e00a      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80039ce:	e006      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80039d0:	bf00      	nop
 80039d2:	e004      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80039d4:	bf00      	nop
 80039d6:	e002      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80039d8:	bf00      	nop
 80039da:	e000      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80039dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10e      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80039e6:	4b06      	ldr	r3, [pc, #24]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80039e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ea:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80039ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039f6:	4a02      	ldr	r2, [pc, #8]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80039f8:	430b      	orrs	r3, r1
 80039fa:	6593      	str	r3, [r2, #88]	; 0x58
 80039fc:	e006      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80039fe:	bf00      	nop
 8003a00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a14:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003a18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a22:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003a26:	460b      	mov	r3, r1
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	d055      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003a34:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003a38:	d033      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003a3a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003a3e:	d82c      	bhi.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003a40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a44:	d02f      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003a46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a4a:	d826      	bhi.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003a4c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003a50:	d02b      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003a52:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003a56:	d820      	bhi.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003a58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a5c:	d012      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003a5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a62:	d81a      	bhi.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d022      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003a68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a6c:	d115      	bne.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a72:	3308      	adds	r3, #8
 8003a74:	2100      	movs	r1, #0
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 fdee 	bl	8004658 <RCCEx_PLL2_Config>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003a82:	e015      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a88:	3328      	adds	r3, #40	; 0x28
 8003a8a:	2102      	movs	r1, #2
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f000 fe95 	bl	80047bc <RCCEx_PLL3_Config>
 8003a92:	4603      	mov	r3, r0
 8003a94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003a98:	e00a      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003aa0:	e006      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003aa2:	bf00      	nop
 8003aa4:	e004      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003aa6:	bf00      	nop
 8003aa8:	e002      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003aaa:	bf00      	nop
 8003aac:	e000      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003aae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ab0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10b      	bne.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003ab8:	4ba1      	ldr	r3, [pc, #644]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003abc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ac4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003ac8:	4a9d      	ldr	r2, [pc, #628]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003aca:	430b      	orrs	r3, r1
 8003acc:	6593      	str	r3, [r2, #88]	; 0x58
 8003ace:	e003      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ad4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae0:	f002 0308 	and.w	r3, r2, #8
 8003ae4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ae8:	2300      	movs	r3, #0
 8003aea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003aee:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003af2:	460b      	mov	r3, r1
 8003af4:	4313      	orrs	r3, r2
 8003af6:	d01e      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003afc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b04:	d10c      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b0a:	3328      	adds	r3, #40	; 0x28
 8003b0c:	2102      	movs	r1, #2
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 fe54 	bl	80047bc <RCCEx_PLL3_Config>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d002      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003b20:	4b87      	ldr	r3, [pc, #540]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b24:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b30:	4a83      	ldr	r2, [pc, #524]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b32:	430b      	orrs	r3, r1
 8003b34:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3e:	f002 0310 	and.w	r3, r2, #16
 8003b42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b46:	2300      	movs	r3, #0
 8003b48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003b4c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003b50:	460b      	mov	r3, r1
 8003b52:	4313      	orrs	r3, r2
 8003b54:	d01e      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b62:	d10c      	bne.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b68:	3328      	adds	r3, #40	; 0x28
 8003b6a:	2102      	movs	r1, #2
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f000 fe25 	bl	80047bc <RCCEx_PLL3_Config>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b7e:	4b70      	ldr	r3, [pc, #448]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b8e:	4a6c      	ldr	r2, [pc, #432]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b90:	430b      	orrs	r3, r1
 8003b92:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b9c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003ba0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003baa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003bae:	460b      	mov	r3, r1
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	d03e      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003bbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bc0:	d022      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003bc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bc6:	d81b      	bhi.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d003      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bd0:	d00b      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003bd2:	e015      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bd8:	3308      	adds	r3, #8
 8003bda:	2100      	movs	r1, #0
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f000 fd3b 	bl	8004658 <RCCEx_PLL2_Config>
 8003be2:	4603      	mov	r3, r0
 8003be4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003be8:	e00f      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bee:	3328      	adds	r3, #40	; 0x28
 8003bf0:	2102      	movs	r1, #2
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 fde2 	bl	80047bc <RCCEx_PLL3_Config>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003bfe:	e004      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c06:	e000      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003c08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10b      	bne.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c12:	4b4b      	ldr	r3, [pc, #300]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c16:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c22:	4a47      	ldr	r2, [pc, #284]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c24:	430b      	orrs	r3, r1
 8003c26:	6593      	str	r3, [r2, #88]	; 0x58
 8003c28:	e003      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003c3e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c40:	2300      	movs	r3, #0
 8003c42:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c44:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003c48:	460b      	mov	r3, r1
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	d03b      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c56:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c5a:	d01f      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003c5c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c60:	d818      	bhi.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003c62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c66:	d003      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003c68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c6c:	d007      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003c6e:	e011      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c70:	4b33      	ldr	r3, [pc, #204]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c74:	4a32      	ldr	r2, [pc, #200]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003c7c:	e00f      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c82:	3328      	adds	r3, #40	; 0x28
 8003c84:	2101      	movs	r1, #1
 8003c86:	4618      	mov	r0, r3
 8003c88:	f000 fd98 	bl	80047bc <RCCEx_PLL3_Config>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003c92:	e004      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c9a:	e000      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003c9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10b      	bne.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ca6:	4b26      	ldr	r3, [pc, #152]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003caa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb6:	4a22      	ldr	r2, [pc, #136]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003cb8:	430b      	orrs	r3, r1
 8003cba:	6553      	str	r3, [r2, #84]	; 0x54
 8003cbc:	e003      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cc2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cce:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003cd2:	673b      	str	r3, [r7, #112]	; 0x70
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	677b      	str	r3, [r7, #116]	; 0x74
 8003cd8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003cdc:	460b      	mov	r3, r1
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	d034      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d003      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cf0:	d007      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003cf2:	e011      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cf4:	4b12      	ldr	r3, [pc, #72]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf8:	4a11      	ldr	r2, [pc, #68]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003cfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003d00:	e00e      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d06:	3308      	adds	r3, #8
 8003d08:	2102      	movs	r1, #2
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 fca4 	bl	8004658 <RCCEx_PLL2_Config>
 8003d10:	4603      	mov	r3, r0
 8003d12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003d16:	e003      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10d      	bne.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003d28:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d36:	4a02      	ldr	r2, [pc, #8]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d38:	430b      	orrs	r3, r1
 8003d3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d3c:	e006      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003d3e:	bf00      	nop
 8003d40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d54:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003d58:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d5e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003d62:	460b      	mov	r3, r1
 8003d64:	4313      	orrs	r3, r2
 8003d66:	d00c      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d6c:	3328      	adds	r3, #40	; 0x28
 8003d6e:	2102      	movs	r1, #2
 8003d70:	4618      	mov	r0, r3
 8003d72:	f000 fd23 	bl	80047bc <RCCEx_PLL3_Config>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d002      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003d8e:	663b      	str	r3, [r7, #96]	; 0x60
 8003d90:	2300      	movs	r3, #0
 8003d92:	667b      	str	r3, [r7, #100]	; 0x64
 8003d94:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003d98:	460b      	mov	r3, r1
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	d038      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003da6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003daa:	d018      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003dac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003db0:	d811      	bhi.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003db2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003db6:	d014      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003db8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dbc:	d80b      	bhi.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d011      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003dc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dc6:	d106      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dc8:	4bc3      	ldr	r3, [pc, #780]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dcc:	4ac2      	ldr	r2, [pc, #776]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003dce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003dd4:	e008      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ddc:	e004      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003dde:	bf00      	nop
 8003de0:	e002      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003de2:	bf00      	nop
 8003de4:	e000      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003de6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003de8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10b      	bne.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003df0:	4bb9      	ldr	r3, [pc, #740]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e00:	4ab5      	ldr	r2, [pc, #724]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e02:	430b      	orrs	r3, r1
 8003e04:	6553      	str	r3, [r2, #84]	; 0x54
 8003e06:	e003      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e18:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003e1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e1e:	2300      	movs	r3, #0
 8003e20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e22:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003e26:	460b      	mov	r3, r1
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	d009      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e2c:	4baa      	ldr	r3, [pc, #680]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e30:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e3a:	4aa7      	ldr	r2, [pc, #668]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e3c:	430b      	orrs	r3, r1
 8003e3e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e48:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003e4c:	653b      	str	r3, [r7, #80]	; 0x50
 8003e4e:	2300      	movs	r3, #0
 8003e50:	657b      	str	r3, [r7, #84]	; 0x54
 8003e52:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003e56:	460b      	mov	r3, r1
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	d00a      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003e5c:	4b9e      	ldr	r3, [pc, #632]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8003e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e68:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003e6c:	4a9a      	ldr	r2, [pc, #616]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e6e:	430b      	orrs	r3, r1
 8003e70:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e7a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003e7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e80:	2300      	movs	r3, #0
 8003e82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e84:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003e88:	460b      	mov	r3, r1
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	d009      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e8e:	4b92      	ldr	r3, [pc, #584]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e92:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e9c:	4a8e      	ldr	r2, [pc, #568]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e9e:	430b      	orrs	r3, r1
 8003ea0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eaa:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003eae:	643b      	str	r3, [r7, #64]	; 0x40
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	647b      	str	r3, [r7, #68]	; 0x44
 8003eb4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003eb8:	460b      	mov	r3, r1
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	d00e      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ebe:	4b86      	ldr	r3, [pc, #536]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	4a85      	ldr	r2, [pc, #532]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ec4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ec8:	6113      	str	r3, [r2, #16]
 8003eca:	4b83      	ldr	r3, [pc, #524]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ecc:	6919      	ldr	r1, [r3, #16]
 8003ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ed2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003ed6:	4a80      	ldr	r2, [pc, #512]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ed8:	430b      	orrs	r3, r1
 8003eda:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003ee8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003eea:	2300      	movs	r3, #0
 8003eec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003eee:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	d009      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003ef8:	4b77      	ldr	r3, [pc, #476]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003efc:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f06:	4a74      	ldr	r2, [pc, #464]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f08:	430b      	orrs	r3, r1
 8003f0a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f14:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003f18:	633b      	str	r3, [r7, #48]	; 0x30
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	637b      	str	r3, [r7, #52]	; 0x34
 8003f1e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003f22:	460b      	mov	r3, r1
 8003f24:	4313      	orrs	r3, r2
 8003f26:	d00a      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f28:	4b6b      	ldr	r3, [pc, #428]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f38:	4a67      	ldr	r2, [pc, #412]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f3a:	430b      	orrs	r3, r1
 8003f3c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f46:	2100      	movs	r1, #0
 8003f48:	62b9      	str	r1, [r7, #40]	; 0x28
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f50:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003f54:	460b      	mov	r3, r1
 8003f56:	4313      	orrs	r3, r2
 8003f58:	d011      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f5e:	3308      	adds	r3, #8
 8003f60:	2100      	movs	r1, #0
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 fb78 	bl	8004658 <RCCEx_PLL2_Config>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003f6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f86:	2100      	movs	r1, #0
 8003f88:	6239      	str	r1, [r7, #32]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f90:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003f94:	460b      	mov	r3, r1
 8003f96:	4313      	orrs	r3, r2
 8003f98:	d011      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f9e:	3308      	adds	r3, #8
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 fb58 	bl	8004658 <RCCEx_PLL2_Config>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003fae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	61b9      	str	r1, [r7, #24]
 8003fca:	f003 0304 	and.w	r3, r3, #4
 8003fce:	61fb      	str	r3, [r7, #28]
 8003fd0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	d011      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fde:	3308      	adds	r3, #8
 8003fe0:	2102      	movs	r1, #2
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 fb38 	bl	8004658 <RCCEx_PLL2_Config>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003fee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ffa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004006:	2100      	movs	r1, #0
 8004008:	6139      	str	r1, [r7, #16]
 800400a:	f003 0308 	and.w	r3, r3, #8
 800400e:	617b      	str	r3, [r7, #20]
 8004010:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004014:	460b      	mov	r3, r1
 8004016:	4313      	orrs	r3, r2
 8004018:	d011      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800401a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800401e:	3328      	adds	r3, #40	; 0x28
 8004020:	2100      	movs	r1, #0
 8004022:	4618      	mov	r0, r3
 8004024:	f000 fbca 	bl	80047bc <RCCEx_PLL3_Config>
 8004028:	4603      	mov	r3, r0
 800402a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800402e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004032:	2b00      	cmp	r3, #0
 8004034:	d003      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004036:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800403a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800403e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004046:	2100      	movs	r1, #0
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	f003 0310 	and.w	r3, r3, #16
 800404e:	60fb      	str	r3, [r7, #12]
 8004050:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004054:	460b      	mov	r3, r1
 8004056:	4313      	orrs	r3, r2
 8004058:	d011      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800405a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800405e:	3328      	adds	r3, #40	; 0x28
 8004060:	2101      	movs	r1, #1
 8004062:	4618      	mov	r0, r3
 8004064:	f000 fbaa 	bl	80047bc <RCCEx_PLL3_Config>
 8004068:	4603      	mov	r3, r0
 800406a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800406e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004076:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800407a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800407e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004086:	2100      	movs	r1, #0
 8004088:	6039      	str	r1, [r7, #0]
 800408a:	f003 0320 	and.w	r3, r3, #32
 800408e:	607b      	str	r3, [r7, #4]
 8004090:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004094:	460b      	mov	r3, r1
 8004096:	4313      	orrs	r3, r2
 8004098:	d011      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800409a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800409e:	3328      	adds	r3, #40	; 0x28
 80040a0:	2102      	movs	r1, #2
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 fb8a 	bl	80047bc <RCCEx_PLL3_Config>
 80040a8:	4603      	mov	r3, r0
 80040aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80040ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80040be:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80040c6:	2300      	movs	r3, #0
 80040c8:	e000      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80040d2:	46bd      	mov	sp, r7
 80040d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040d8:	58024400 	.word	0x58024400

080040dc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80040e0:	f7fe fd96 	bl	8002c10 <HAL_RCC_GetHCLKFreq>
 80040e4:	4602      	mov	r2, r0
 80040e6:	4b06      	ldr	r3, [pc, #24]	; (8004100 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	091b      	lsrs	r3, r3, #4
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	4904      	ldr	r1, [pc, #16]	; (8004104 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80040f2:	5ccb      	ldrb	r3, [r1, r3]
 80040f4:	f003 031f 	and.w	r3, r3, #31
 80040f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	58024400 	.word	0x58024400
 8004104:	080064e4 	.word	0x080064e4

08004108 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004108:	b480      	push	{r7}
 800410a:	b089      	sub	sp, #36	; 0x24
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004110:	4ba1      	ldr	r3, [pc, #644]	; (8004398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004114:	f003 0303 	and.w	r3, r3, #3
 8004118:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800411a:	4b9f      	ldr	r3, [pc, #636]	; (8004398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800411c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411e:	0b1b      	lsrs	r3, r3, #12
 8004120:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004124:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004126:	4b9c      	ldr	r3, [pc, #624]	; (8004398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412a:	091b      	lsrs	r3, r3, #4
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004132:	4b99      	ldr	r3, [pc, #612]	; (8004398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004136:	08db      	lsrs	r3, r3, #3
 8004138:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	fb02 f303 	mul.w	r3, r2, r3
 8004142:	ee07 3a90 	vmov	s15, r3
 8004146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800414a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 8111 	beq.w	8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	2b02      	cmp	r3, #2
 800415a:	f000 8083 	beq.w	8004264 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	2b02      	cmp	r3, #2
 8004162:	f200 80a1 	bhi.w	80042a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d003      	beq.n	8004174 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d056      	beq.n	8004220 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004172:	e099      	b.n	80042a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004174:	4b88      	ldr	r3, [pc, #544]	; (8004398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0320 	and.w	r3, r3, #32
 800417c:	2b00      	cmp	r3, #0
 800417e:	d02d      	beq.n	80041dc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004180:	4b85      	ldr	r3, [pc, #532]	; (8004398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	08db      	lsrs	r3, r3, #3
 8004186:	f003 0303 	and.w	r3, r3, #3
 800418a:	4a84      	ldr	r2, [pc, #528]	; (800439c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800418c:	fa22 f303 	lsr.w	r3, r2, r3
 8004190:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	ee07 3a90 	vmov	s15, r3
 8004198:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	ee07 3a90 	vmov	s15, r3
 80041a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041aa:	4b7b      	ldr	r3, [pc, #492]	; (8004398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041b2:	ee07 3a90 	vmov	s15, r3
 80041b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80041be:	eddf 5a78 	vldr	s11, [pc, #480]	; 80043a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80041da:	e087      	b.n	80042ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	ee07 3a90 	vmov	s15, r3
 80041e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80043a4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80041ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041ee:	4b6a      	ldr	r3, [pc, #424]	; (8004398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041f6:	ee07 3a90 	vmov	s15, r3
 80041fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004202:	eddf 5a67 	vldr	s11, [pc, #412]	; 80043a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800420a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800420e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800421a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800421e:	e065      	b.n	80042ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	ee07 3a90 	vmov	s15, r3
 8004226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800422a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80043a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800422e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004232:	4b59      	ldr	r3, [pc, #356]	; (8004398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800423a:	ee07 3a90 	vmov	s15, r3
 800423e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004242:	ed97 6a03 	vldr	s12, [r7, #12]
 8004246:	eddf 5a56 	vldr	s11, [pc, #344]	; 80043a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800424a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800424e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004252:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800425a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800425e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004262:	e043      	b.n	80042ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	ee07 3a90 	vmov	s15, r3
 800426a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800426e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80043ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004276:	4b48      	ldr	r3, [pc, #288]	; (8004398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800427e:	ee07 3a90 	vmov	s15, r3
 8004282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004286:	ed97 6a03 	vldr	s12, [r7, #12]
 800428a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80043a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800428e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800429a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800429e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042a6:	e021      	b.n	80042ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	ee07 3a90 	vmov	s15, r3
 80042ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80043a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80042b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042ba:	4b37      	ldr	r3, [pc, #220]	; (8004398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042c2:	ee07 3a90 	vmov	s15, r3
 80042c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80042ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 80043a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80042d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042ea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80042ec:	4b2a      	ldr	r3, [pc, #168]	; (8004398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f0:	0a5b      	lsrs	r3, r3, #9
 80042f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042f6:	ee07 3a90 	vmov	s15, r3
 80042fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004302:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004306:	edd7 6a07 	vldr	s13, [r7, #28]
 800430a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800430e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004312:	ee17 2a90 	vmov	r2, s15
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800431a:	4b1f      	ldr	r3, [pc, #124]	; (8004398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800431c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431e:	0c1b      	lsrs	r3, r3, #16
 8004320:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004324:	ee07 3a90 	vmov	s15, r3
 8004328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800432c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004330:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004334:	edd7 6a07 	vldr	s13, [r7, #28]
 8004338:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800433c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004340:	ee17 2a90 	vmov	r2, s15
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004348:	4b13      	ldr	r3, [pc, #76]	; (8004398 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800434a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434c:	0e1b      	lsrs	r3, r3, #24
 800434e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004352:	ee07 3a90 	vmov	s15, r3
 8004356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800435a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800435e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004362:	edd7 6a07 	vldr	s13, [r7, #28]
 8004366:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800436a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800436e:	ee17 2a90 	vmov	r2, s15
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004376:	e008      	b.n	800438a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	609a      	str	r2, [r3, #8]
}
 800438a:	bf00      	nop
 800438c:	3724      	adds	r7, #36	; 0x24
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	58024400 	.word	0x58024400
 800439c:	03d09000 	.word	0x03d09000
 80043a0:	46000000 	.word	0x46000000
 80043a4:	4c742400 	.word	0x4c742400
 80043a8:	4a742400 	.word	0x4a742400
 80043ac:	4bbebc20 	.word	0x4bbebc20

080043b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b089      	sub	sp, #36	; 0x24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80043b8:	4ba1      	ldr	r3, [pc, #644]	; (8004640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043bc:	f003 0303 	and.w	r3, r3, #3
 80043c0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80043c2:	4b9f      	ldr	r3, [pc, #636]	; (8004640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c6:	0d1b      	lsrs	r3, r3, #20
 80043c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043cc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80043ce:	4b9c      	ldr	r3, [pc, #624]	; (8004640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d2:	0a1b      	lsrs	r3, r3, #8
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80043da:	4b99      	ldr	r3, [pc, #612]	; (8004640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043de:	08db      	lsrs	r3, r3, #3
 80043e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	fb02 f303 	mul.w	r3, r2, r3
 80043ea:	ee07 3a90 	vmov	s15, r3
 80043ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f000 8111 	beq.w	8004620 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	2b02      	cmp	r3, #2
 8004402:	f000 8083 	beq.w	800450c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	2b02      	cmp	r3, #2
 800440a:	f200 80a1 	bhi.w	8004550 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d003      	beq.n	800441c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d056      	beq.n	80044c8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800441a:	e099      	b.n	8004550 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800441c:	4b88      	ldr	r3, [pc, #544]	; (8004640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0320 	and.w	r3, r3, #32
 8004424:	2b00      	cmp	r3, #0
 8004426:	d02d      	beq.n	8004484 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004428:	4b85      	ldr	r3, [pc, #532]	; (8004640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	08db      	lsrs	r3, r3, #3
 800442e:	f003 0303 	and.w	r3, r3, #3
 8004432:	4a84      	ldr	r2, [pc, #528]	; (8004644 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004434:	fa22 f303 	lsr.w	r3, r2, r3
 8004438:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	ee07 3a90 	vmov	s15, r3
 8004440:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	ee07 3a90 	vmov	s15, r3
 800444a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800444e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004452:	4b7b      	ldr	r3, [pc, #492]	; (8004640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800445a:	ee07 3a90 	vmov	s15, r3
 800445e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004462:	ed97 6a03 	vldr	s12, [r7, #12]
 8004466:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004648 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800446a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800446e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004472:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800447a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800447e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004482:	e087      	b.n	8004594 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	ee07 3a90 	vmov	s15, r3
 800448a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800448e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800464c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004496:	4b6a      	ldr	r3, [pc, #424]	; (8004640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800449e:	ee07 3a90 	vmov	s15, r3
 80044a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80044aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004648 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80044ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044c6:	e065      	b.n	8004594 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	ee07 3a90 	vmov	s15, r3
 80044ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004650 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80044d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044da:	4b59      	ldr	r3, [pc, #356]	; (8004640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044e2:	ee07 3a90 	vmov	s15, r3
 80044e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80044ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004648 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80044f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004506:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800450a:	e043      	b.n	8004594 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	ee07 3a90 	vmov	s15, r3
 8004512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004516:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004654 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800451a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800451e:	4b48      	ldr	r3, [pc, #288]	; (8004640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004526:	ee07 3a90 	vmov	s15, r3
 800452a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800452e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004532:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004648 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800453a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800453e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800454a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800454e:	e021      	b.n	8004594 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	ee07 3a90 	vmov	s15, r3
 8004556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800455a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004650 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800455e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004562:	4b37      	ldr	r3, [pc, #220]	; (8004640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800456a:	ee07 3a90 	vmov	s15, r3
 800456e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004572:	ed97 6a03 	vldr	s12, [r7, #12]
 8004576:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004648 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800457a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800457e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800458a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800458e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004592:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004594:	4b2a      	ldr	r3, [pc, #168]	; (8004640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004598:	0a5b      	lsrs	r3, r3, #9
 800459a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800459e:	ee07 3a90 	vmov	s15, r3
 80045a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80045b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045ba:	ee17 2a90 	vmov	r2, s15
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80045c2:	4b1f      	ldr	r3, [pc, #124]	; (8004640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	0c1b      	lsrs	r3, r3, #16
 80045c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045cc:	ee07 3a90 	vmov	s15, r3
 80045d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80045e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045e8:	ee17 2a90 	vmov	r2, s15
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80045f0:	4b13      	ldr	r3, [pc, #76]	; (8004640 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f4:	0e1b      	lsrs	r3, r3, #24
 80045f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045fa:	ee07 3a90 	vmov	s15, r3
 80045fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004602:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004606:	ee37 7a87 	vadd.f32	s14, s15, s14
 800460a:	edd7 6a07 	vldr	s13, [r7, #28]
 800460e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004612:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004616:	ee17 2a90 	vmov	r2, s15
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800461e:	e008      	b.n	8004632 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	609a      	str	r2, [r3, #8]
}
 8004632:	bf00      	nop
 8004634:	3724      	adds	r7, #36	; 0x24
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	58024400 	.word	0x58024400
 8004644:	03d09000 	.word	0x03d09000
 8004648:	46000000 	.word	0x46000000
 800464c:	4c742400 	.word	0x4c742400
 8004650:	4a742400 	.word	0x4a742400
 8004654:	4bbebc20 	.word	0x4bbebc20

08004658 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004662:	2300      	movs	r3, #0
 8004664:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004666:	4b53      	ldr	r3, [pc, #332]	; (80047b4 <RCCEx_PLL2_Config+0x15c>)
 8004668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466a:	f003 0303 	and.w	r3, r3, #3
 800466e:	2b03      	cmp	r3, #3
 8004670:	d101      	bne.n	8004676 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e099      	b.n	80047aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004676:	4b4f      	ldr	r3, [pc, #316]	; (80047b4 <RCCEx_PLL2_Config+0x15c>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a4e      	ldr	r2, [pc, #312]	; (80047b4 <RCCEx_PLL2_Config+0x15c>)
 800467c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004680:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004682:	f7fc fac5 	bl	8000c10 <HAL_GetTick>
 8004686:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004688:	e008      	b.n	800469c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800468a:	f7fc fac1 	bl	8000c10 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d901      	bls.n	800469c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e086      	b.n	80047aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800469c:	4b45      	ldr	r3, [pc, #276]	; (80047b4 <RCCEx_PLL2_Config+0x15c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1f0      	bne.n	800468a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80046a8:	4b42      	ldr	r3, [pc, #264]	; (80047b4 <RCCEx_PLL2_Config+0x15c>)
 80046aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	031b      	lsls	r3, r3, #12
 80046b6:	493f      	ldr	r1, [pc, #252]	; (80047b4 <RCCEx_PLL2_Config+0x15c>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	628b      	str	r3, [r1, #40]	; 0x28
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	3b01      	subs	r3, #1
 80046c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	3b01      	subs	r3, #1
 80046cc:	025b      	lsls	r3, r3, #9
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	431a      	orrs	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	3b01      	subs	r3, #1
 80046d8:	041b      	lsls	r3, r3, #16
 80046da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80046de:	431a      	orrs	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	3b01      	subs	r3, #1
 80046e6:	061b      	lsls	r3, r3, #24
 80046e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80046ec:	4931      	ldr	r1, [pc, #196]	; (80047b4 <RCCEx_PLL2_Config+0x15c>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80046f2:	4b30      	ldr	r3, [pc, #192]	; (80047b4 <RCCEx_PLL2_Config+0x15c>)
 80046f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	492d      	ldr	r1, [pc, #180]	; (80047b4 <RCCEx_PLL2_Config+0x15c>)
 8004700:	4313      	orrs	r3, r2
 8004702:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004704:	4b2b      	ldr	r3, [pc, #172]	; (80047b4 <RCCEx_PLL2_Config+0x15c>)
 8004706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004708:	f023 0220 	bic.w	r2, r3, #32
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	4928      	ldr	r1, [pc, #160]	; (80047b4 <RCCEx_PLL2_Config+0x15c>)
 8004712:	4313      	orrs	r3, r2
 8004714:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004716:	4b27      	ldr	r3, [pc, #156]	; (80047b4 <RCCEx_PLL2_Config+0x15c>)
 8004718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471a:	4a26      	ldr	r2, [pc, #152]	; (80047b4 <RCCEx_PLL2_Config+0x15c>)
 800471c:	f023 0310 	bic.w	r3, r3, #16
 8004720:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004722:	4b24      	ldr	r3, [pc, #144]	; (80047b4 <RCCEx_PLL2_Config+0x15c>)
 8004724:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004726:	4b24      	ldr	r3, [pc, #144]	; (80047b8 <RCCEx_PLL2_Config+0x160>)
 8004728:	4013      	ands	r3, r2
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	69d2      	ldr	r2, [r2, #28]
 800472e:	00d2      	lsls	r2, r2, #3
 8004730:	4920      	ldr	r1, [pc, #128]	; (80047b4 <RCCEx_PLL2_Config+0x15c>)
 8004732:	4313      	orrs	r3, r2
 8004734:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004736:	4b1f      	ldr	r3, [pc, #124]	; (80047b4 <RCCEx_PLL2_Config+0x15c>)
 8004738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473a:	4a1e      	ldr	r2, [pc, #120]	; (80047b4 <RCCEx_PLL2_Config+0x15c>)
 800473c:	f043 0310 	orr.w	r3, r3, #16
 8004740:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d106      	bne.n	8004756 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004748:	4b1a      	ldr	r3, [pc, #104]	; (80047b4 <RCCEx_PLL2_Config+0x15c>)
 800474a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474c:	4a19      	ldr	r2, [pc, #100]	; (80047b4 <RCCEx_PLL2_Config+0x15c>)
 800474e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004752:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004754:	e00f      	b.n	8004776 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d106      	bne.n	800476a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800475c:	4b15      	ldr	r3, [pc, #84]	; (80047b4 <RCCEx_PLL2_Config+0x15c>)
 800475e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004760:	4a14      	ldr	r2, [pc, #80]	; (80047b4 <RCCEx_PLL2_Config+0x15c>)
 8004762:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004766:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004768:	e005      	b.n	8004776 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800476a:	4b12      	ldr	r3, [pc, #72]	; (80047b4 <RCCEx_PLL2_Config+0x15c>)
 800476c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476e:	4a11      	ldr	r2, [pc, #68]	; (80047b4 <RCCEx_PLL2_Config+0x15c>)
 8004770:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004774:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004776:	4b0f      	ldr	r3, [pc, #60]	; (80047b4 <RCCEx_PLL2_Config+0x15c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a0e      	ldr	r2, [pc, #56]	; (80047b4 <RCCEx_PLL2_Config+0x15c>)
 800477c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004780:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004782:	f7fc fa45 	bl	8000c10 <HAL_GetTick>
 8004786:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004788:	e008      	b.n	800479c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800478a:	f7fc fa41 	bl	8000c10 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b02      	cmp	r3, #2
 8004796:	d901      	bls.n	800479c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e006      	b.n	80047aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800479c:	4b05      	ldr	r3, [pc, #20]	; (80047b4 <RCCEx_PLL2_Config+0x15c>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d0f0      	beq.n	800478a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80047a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	58024400 	.word	0x58024400
 80047b8:	ffff0007 	.word	0xffff0007

080047bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047c6:	2300      	movs	r3, #0
 80047c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80047ca:	4b53      	ldr	r3, [pc, #332]	; (8004918 <RCCEx_PLL3_Config+0x15c>)
 80047cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ce:	f003 0303 	and.w	r3, r3, #3
 80047d2:	2b03      	cmp	r3, #3
 80047d4:	d101      	bne.n	80047da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e099      	b.n	800490e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80047da:	4b4f      	ldr	r3, [pc, #316]	; (8004918 <RCCEx_PLL3_Config+0x15c>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a4e      	ldr	r2, [pc, #312]	; (8004918 <RCCEx_PLL3_Config+0x15c>)
 80047e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047e6:	f7fc fa13 	bl	8000c10 <HAL_GetTick>
 80047ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80047ec:	e008      	b.n	8004800 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80047ee:	f7fc fa0f 	bl	8000c10 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d901      	bls.n	8004800 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e086      	b.n	800490e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004800:	4b45      	ldr	r3, [pc, #276]	; (8004918 <RCCEx_PLL3_Config+0x15c>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1f0      	bne.n	80047ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800480c:	4b42      	ldr	r3, [pc, #264]	; (8004918 <RCCEx_PLL3_Config+0x15c>)
 800480e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004810:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	051b      	lsls	r3, r3, #20
 800481a:	493f      	ldr	r1, [pc, #252]	; (8004918 <RCCEx_PLL3_Config+0x15c>)
 800481c:	4313      	orrs	r3, r2
 800481e:	628b      	str	r3, [r1, #40]	; 0x28
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	3b01      	subs	r3, #1
 8004826:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	3b01      	subs	r3, #1
 8004830:	025b      	lsls	r3, r3, #9
 8004832:	b29b      	uxth	r3, r3
 8004834:	431a      	orrs	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	3b01      	subs	r3, #1
 800483c:	041b      	lsls	r3, r3, #16
 800483e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004842:	431a      	orrs	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	3b01      	subs	r3, #1
 800484a:	061b      	lsls	r3, r3, #24
 800484c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004850:	4931      	ldr	r1, [pc, #196]	; (8004918 <RCCEx_PLL3_Config+0x15c>)
 8004852:	4313      	orrs	r3, r2
 8004854:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004856:	4b30      	ldr	r3, [pc, #192]	; (8004918 <RCCEx_PLL3_Config+0x15c>)
 8004858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	492d      	ldr	r1, [pc, #180]	; (8004918 <RCCEx_PLL3_Config+0x15c>)
 8004864:	4313      	orrs	r3, r2
 8004866:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004868:	4b2b      	ldr	r3, [pc, #172]	; (8004918 <RCCEx_PLL3_Config+0x15c>)
 800486a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	4928      	ldr	r1, [pc, #160]	; (8004918 <RCCEx_PLL3_Config+0x15c>)
 8004876:	4313      	orrs	r3, r2
 8004878:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800487a:	4b27      	ldr	r3, [pc, #156]	; (8004918 <RCCEx_PLL3_Config+0x15c>)
 800487c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487e:	4a26      	ldr	r2, [pc, #152]	; (8004918 <RCCEx_PLL3_Config+0x15c>)
 8004880:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004884:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004886:	4b24      	ldr	r3, [pc, #144]	; (8004918 <RCCEx_PLL3_Config+0x15c>)
 8004888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800488a:	4b24      	ldr	r3, [pc, #144]	; (800491c <RCCEx_PLL3_Config+0x160>)
 800488c:	4013      	ands	r3, r2
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	69d2      	ldr	r2, [r2, #28]
 8004892:	00d2      	lsls	r2, r2, #3
 8004894:	4920      	ldr	r1, [pc, #128]	; (8004918 <RCCEx_PLL3_Config+0x15c>)
 8004896:	4313      	orrs	r3, r2
 8004898:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800489a:	4b1f      	ldr	r3, [pc, #124]	; (8004918 <RCCEx_PLL3_Config+0x15c>)
 800489c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489e:	4a1e      	ldr	r2, [pc, #120]	; (8004918 <RCCEx_PLL3_Config+0x15c>)
 80048a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d106      	bne.n	80048ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80048ac:	4b1a      	ldr	r3, [pc, #104]	; (8004918 <RCCEx_PLL3_Config+0x15c>)
 80048ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b0:	4a19      	ldr	r2, [pc, #100]	; (8004918 <RCCEx_PLL3_Config+0x15c>)
 80048b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80048b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80048b8:	e00f      	b.n	80048da <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d106      	bne.n	80048ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80048c0:	4b15      	ldr	r3, [pc, #84]	; (8004918 <RCCEx_PLL3_Config+0x15c>)
 80048c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c4:	4a14      	ldr	r2, [pc, #80]	; (8004918 <RCCEx_PLL3_Config+0x15c>)
 80048c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80048ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80048cc:	e005      	b.n	80048da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80048ce:	4b12      	ldr	r3, [pc, #72]	; (8004918 <RCCEx_PLL3_Config+0x15c>)
 80048d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d2:	4a11      	ldr	r2, [pc, #68]	; (8004918 <RCCEx_PLL3_Config+0x15c>)
 80048d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80048da:	4b0f      	ldr	r3, [pc, #60]	; (8004918 <RCCEx_PLL3_Config+0x15c>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a0e      	ldr	r2, [pc, #56]	; (8004918 <RCCEx_PLL3_Config+0x15c>)
 80048e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048e6:	f7fc f993 	bl	8000c10 <HAL_GetTick>
 80048ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80048ec:	e008      	b.n	8004900 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80048ee:	f7fc f98f 	bl	8000c10 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d901      	bls.n	8004900 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e006      	b.n	800490e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004900:	4b05      	ldr	r3, [pc, #20]	; (8004918 <RCCEx_PLL3_Config+0x15c>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d0f0      	beq.n	80048ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800490c:	7bfb      	ldrb	r3, [r7, #15]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	58024400 	.word	0x58024400
 800491c:	ffff0007 	.word	0xffff0007

08004920 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e042      	b.n	80049b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004938:	2b00      	cmp	r3, #0
 800493a:	d106      	bne.n	800494a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f7fb ff87 	bl	8000858 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2224      	movs	r2, #36	; 0x24
 800494e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 0201 	bic.w	r2, r2, #1
 8004960:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004966:	2b00      	cmp	r3, #0
 8004968:	d002      	beq.n	8004970 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f001 f9f8 	bl	8005d60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 fc8d 	bl	8005290 <UART_SetConfig>
 8004976:	4603      	mov	r3, r0
 8004978:	2b01      	cmp	r3, #1
 800497a:	d101      	bne.n	8004980 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e01b      	b.n	80049b8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685a      	ldr	r2, [r3, #4]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800498e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689a      	ldr	r2, [r3, #8]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800499e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f042 0201 	orr.w	r2, r2, #1
 80049ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f001 fa77 	bl	8005ea4 <UART_CheckIdleState>
 80049b6:	4603      	mov	r3, r0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3708      	adds	r7, #8
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b08a      	sub	sp, #40	; 0x28
 80049c4:	af02      	add	r7, sp, #8
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	603b      	str	r3, [r7, #0]
 80049cc:	4613      	mov	r3, r2
 80049ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d6:	2b20      	cmp	r3, #32
 80049d8:	d17b      	bne.n	8004ad2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d002      	beq.n	80049e6 <HAL_UART_Transmit+0x26>
 80049e0:	88fb      	ldrh	r3, [r7, #6]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e074      	b.n	8004ad4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2221      	movs	r2, #33	; 0x21
 80049f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049fa:	f7fc f909 	bl	8000c10 <HAL_GetTick>
 80049fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	88fa      	ldrh	r2, [r7, #6]
 8004a04:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	88fa      	ldrh	r2, [r7, #6]
 8004a0c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a18:	d108      	bne.n	8004a2c <HAL_UART_Transmit+0x6c>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d104      	bne.n	8004a2c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004a22:	2300      	movs	r3, #0
 8004a24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	61bb      	str	r3, [r7, #24]
 8004a2a:	e003      	b.n	8004a34 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a30:	2300      	movs	r3, #0
 8004a32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a34:	e030      	b.n	8004a98 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	2180      	movs	r1, #128	; 0x80
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f001 fad9 	bl	8005ff8 <UART_WaitOnFlagUntilTimeout>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d005      	beq.n	8004a58 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2220      	movs	r2, #32
 8004a50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e03d      	b.n	8004ad4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10b      	bne.n	8004a76 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	881b      	ldrh	r3, [r3, #0]
 8004a62:	461a      	mov	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a6c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	3302      	adds	r3, #2
 8004a72:	61bb      	str	r3, [r7, #24]
 8004a74:	e007      	b.n	8004a86 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	781a      	ldrb	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	3301      	adds	r3, #1
 8004a84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1c8      	bne.n	8004a36 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	9300      	str	r3, [sp, #0]
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	2140      	movs	r1, #64	; 0x40
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f001 faa2 	bl	8005ff8 <UART_WaitOnFlagUntilTimeout>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d005      	beq.n	8004ac6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2220      	movs	r2, #32
 8004abe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e006      	b.n	8004ad4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2220      	movs	r2, #32
 8004aca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	e000      	b.n	8004ad4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004ad2:	2302      	movs	r3, #2
  }
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3720      	adds	r7, #32
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b0ba      	sub	sp, #232	; 0xe8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004b02:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004b06:	f640 030f 	movw	r3, #2063	; 0x80f
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004b10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d11b      	bne.n	8004b50 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b1c:	f003 0320 	and.w	r3, r3, #32
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d015      	beq.n	8004b50 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b28:	f003 0320 	and.w	r3, r3, #32
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d105      	bne.n	8004b3c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004b30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d009      	beq.n	8004b50 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 8377 	beq.w	8005234 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	4798      	blx	r3
      }
      return;
 8004b4e:	e371      	b.n	8005234 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004b50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f000 8123 	beq.w	8004da0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004b5a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004b5e:	4b8d      	ldr	r3, [pc, #564]	; (8004d94 <HAL_UART_IRQHandler+0x2b8>)
 8004b60:	4013      	ands	r3, r2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d106      	bne.n	8004b74 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004b66:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004b6a:	4b8b      	ldr	r3, [pc, #556]	; (8004d98 <HAL_UART_IRQHandler+0x2bc>)
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f000 8116 	beq.w	8004da0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b78:	f003 0301 	and.w	r3, r3, #1
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d011      	beq.n	8004ba4 <HAL_UART_IRQHandler+0xc8>
 8004b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00b      	beq.n	8004ba4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2201      	movs	r2, #1
 8004b92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b9a:	f043 0201 	orr.w	r2, r3, #1
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d011      	beq.n	8004bd4 <HAL_UART_IRQHandler+0xf8>
 8004bb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00b      	beq.n	8004bd4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2202      	movs	r2, #2
 8004bc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bca:	f043 0204 	orr.w	r2, r3, #4
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d011      	beq.n	8004c04 <HAL_UART_IRQHandler+0x128>
 8004be0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00b      	beq.n	8004c04 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2204      	movs	r2, #4
 8004bf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bfa:	f043 0202 	orr.w	r2, r3, #2
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c08:	f003 0308 	and.w	r3, r3, #8
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d017      	beq.n	8004c40 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c14:	f003 0320 	and.w	r3, r3, #32
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d105      	bne.n	8004c28 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004c1c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004c20:	4b5c      	ldr	r3, [pc, #368]	; (8004d94 <HAL_UART_IRQHandler+0x2b8>)
 8004c22:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00b      	beq.n	8004c40 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2208      	movs	r2, #8
 8004c2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c36:	f043 0208 	orr.w	r2, r3, #8
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d012      	beq.n	8004c72 <HAL_UART_IRQHandler+0x196>
 8004c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00c      	beq.n	8004c72 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c68:	f043 0220 	orr.w	r2, r3, #32
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f000 82dd 	beq.w	8005238 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c82:	f003 0320 	and.w	r3, r3, #32
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d013      	beq.n	8004cb2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004c8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c8e:	f003 0320 	and.w	r3, r3, #32
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d105      	bne.n	8004ca2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004c96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d007      	beq.n	8004cb2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc6:	2b40      	cmp	r3, #64	; 0x40
 8004cc8:	d005      	beq.n	8004cd6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004cca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d054      	beq.n	8004d80 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f001 f9fc 	bl	80060d4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce6:	2b40      	cmp	r3, #64	; 0x40
 8004ce8:	d146      	bne.n	8004d78 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	3308      	adds	r3, #8
 8004cf0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004cf8:	e853 3f00 	ldrex	r3, [r3]
 8004cfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	3308      	adds	r3, #8
 8004d12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004d22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004d26:	e841 2300 	strex	r3, r2, [r1]
 8004d2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004d2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1d9      	bne.n	8004cea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d017      	beq.n	8004d70 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d46:	4a15      	ldr	r2, [pc, #84]	; (8004d9c <HAL_UART_IRQHandler+0x2c0>)
 8004d48:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7fc fba3 	bl	800149c <HAL_DMA_Abort_IT>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d019      	beq.n	8004d90 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8004d6a:	4610      	mov	r0, r2
 8004d6c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d6e:	e00f      	b.n	8004d90 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 fa77 	bl	8005264 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d76:	e00b      	b.n	8004d90 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 fa73 	bl	8005264 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d7e:	e007      	b.n	8004d90 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 fa6f 	bl	8005264 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8004d8e:	e253      	b.n	8005238 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d90:	bf00      	nop
    return;
 8004d92:	e251      	b.n	8005238 <HAL_UART_IRQHandler+0x75c>
 8004d94:	10000001 	.word	0x10000001
 8004d98:	04000120 	.word	0x04000120
 8004d9c:	080061a1 	.word	0x080061a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	f040 81e7 	bne.w	8005178 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dae:	f003 0310 	and.w	r3, r3, #16
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f000 81e0 	beq.w	8005178 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dbc:	f003 0310 	and.w	r3, r3, #16
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f000 81d9 	beq.w	8005178 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2210      	movs	r2, #16
 8004dcc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd8:	2b40      	cmp	r3, #64	; 0x40
 8004dda:	f040 8151 	bne.w	8005080 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a96      	ldr	r2, [pc, #600]	; (8005040 <HAL_UART_IRQHandler+0x564>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d068      	beq.n	8004ebe <HAL_UART_IRQHandler+0x3e2>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a93      	ldr	r2, [pc, #588]	; (8005044 <HAL_UART_IRQHandler+0x568>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d061      	beq.n	8004ebe <HAL_UART_IRQHandler+0x3e2>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a91      	ldr	r2, [pc, #580]	; (8005048 <HAL_UART_IRQHandler+0x56c>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d05a      	beq.n	8004ebe <HAL_UART_IRQHandler+0x3e2>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a8e      	ldr	r2, [pc, #568]	; (800504c <HAL_UART_IRQHandler+0x570>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d053      	beq.n	8004ebe <HAL_UART_IRQHandler+0x3e2>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a8c      	ldr	r2, [pc, #560]	; (8005050 <HAL_UART_IRQHandler+0x574>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d04c      	beq.n	8004ebe <HAL_UART_IRQHandler+0x3e2>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a89      	ldr	r2, [pc, #548]	; (8005054 <HAL_UART_IRQHandler+0x578>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d045      	beq.n	8004ebe <HAL_UART_IRQHandler+0x3e2>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a87      	ldr	r2, [pc, #540]	; (8005058 <HAL_UART_IRQHandler+0x57c>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d03e      	beq.n	8004ebe <HAL_UART_IRQHandler+0x3e2>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a84      	ldr	r2, [pc, #528]	; (800505c <HAL_UART_IRQHandler+0x580>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d037      	beq.n	8004ebe <HAL_UART_IRQHandler+0x3e2>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a82      	ldr	r2, [pc, #520]	; (8005060 <HAL_UART_IRQHandler+0x584>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d030      	beq.n	8004ebe <HAL_UART_IRQHandler+0x3e2>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a7f      	ldr	r2, [pc, #508]	; (8005064 <HAL_UART_IRQHandler+0x588>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d029      	beq.n	8004ebe <HAL_UART_IRQHandler+0x3e2>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a7d      	ldr	r2, [pc, #500]	; (8005068 <HAL_UART_IRQHandler+0x58c>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d022      	beq.n	8004ebe <HAL_UART_IRQHandler+0x3e2>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a7a      	ldr	r2, [pc, #488]	; (800506c <HAL_UART_IRQHandler+0x590>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d01b      	beq.n	8004ebe <HAL_UART_IRQHandler+0x3e2>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a78      	ldr	r2, [pc, #480]	; (8005070 <HAL_UART_IRQHandler+0x594>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d014      	beq.n	8004ebe <HAL_UART_IRQHandler+0x3e2>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a75      	ldr	r2, [pc, #468]	; (8005074 <HAL_UART_IRQHandler+0x598>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d00d      	beq.n	8004ebe <HAL_UART_IRQHandler+0x3e2>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a73      	ldr	r2, [pc, #460]	; (8005078 <HAL_UART_IRQHandler+0x59c>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d006      	beq.n	8004ebe <HAL_UART_IRQHandler+0x3e2>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a70      	ldr	r2, [pc, #448]	; (800507c <HAL_UART_IRQHandler+0x5a0>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d106      	bne.n	8004ecc <HAL_UART_IRQHandler+0x3f0>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	e005      	b.n	8004ed8 <HAL_UART_IRQHandler+0x3fc>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004edc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 81ab 	beq.w	800523c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004eec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	f080 81a3 	bcs.w	800523c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004efc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f06:	69db      	ldr	r3, [r3, #28]
 8004f08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f0c:	f000 8087 	beq.w	800501e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f1c:	e853 3f00 	ldrex	r3, [r3]
 8004f20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004f24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	461a      	mov	r2, r3
 8004f36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004f3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004f3e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004f46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004f4a:	e841 2300 	strex	r3, r2, [r1]
 8004f4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004f52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1da      	bne.n	8004f10 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	3308      	adds	r3, #8
 8004f60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f64:	e853 3f00 	ldrex	r3, [r3]
 8004f68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004f6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f6c:	f023 0301 	bic.w	r3, r3, #1
 8004f70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	3308      	adds	r3, #8
 8004f7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004f7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004f82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004f86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f8a:	e841 2300 	strex	r3, r2, [r1]
 8004f8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004f90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1e1      	bne.n	8004f5a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	3308      	adds	r3, #8
 8004f9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fa0:	e853 3f00 	ldrex	r3, [r3]
 8004fa4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004fa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	3308      	adds	r3, #8
 8004fb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004fba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004fbc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fbe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004fc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004fc2:	e841 2300 	strex	r3, r2, [r1]
 8004fc6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004fc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1e3      	bne.n	8004f96 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fe4:	e853 3f00 	ldrex	r3, [r3]
 8004fe8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004fea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fec:	f023 0310 	bic.w	r3, r3, #16
 8004ff0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ffe:	65bb      	str	r3, [r7, #88]	; 0x58
 8005000:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005002:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005004:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005006:	e841 2300 	strex	r3, r2, [r1]
 800500a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800500c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1e4      	bne.n	8004fdc <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005018:	4618      	mov	r0, r3
 800501a:	f7fb ff21 	bl	8000e60 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2202      	movs	r2, #2
 8005022:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005030:	b29b      	uxth	r3, r3
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	b29b      	uxth	r3, r3
 8005036:	4619      	mov	r1, r3
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 f91d 	bl	8005278 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800503e:	e0fd      	b.n	800523c <HAL_UART_IRQHandler+0x760>
 8005040:	40020010 	.word	0x40020010
 8005044:	40020028 	.word	0x40020028
 8005048:	40020040 	.word	0x40020040
 800504c:	40020058 	.word	0x40020058
 8005050:	40020070 	.word	0x40020070
 8005054:	40020088 	.word	0x40020088
 8005058:	400200a0 	.word	0x400200a0
 800505c:	400200b8 	.word	0x400200b8
 8005060:	40020410 	.word	0x40020410
 8005064:	40020428 	.word	0x40020428
 8005068:	40020440 	.word	0x40020440
 800506c:	40020458 	.word	0x40020458
 8005070:	40020470 	.word	0x40020470
 8005074:	40020488 	.word	0x40020488
 8005078:	400204a0 	.word	0x400204a0
 800507c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800508c:	b29b      	uxth	r3, r3
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800509a:	b29b      	uxth	r3, r3
 800509c:	2b00      	cmp	r3, #0
 800509e:	f000 80cf 	beq.w	8005240 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80050a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f000 80ca 	beq.w	8005240 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b4:	e853 3f00 	ldrex	r3, [r3]
 80050b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80050ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	461a      	mov	r2, r3
 80050ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050ce:	647b      	str	r3, [r7, #68]	; 0x44
 80050d0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050d6:	e841 2300 	strex	r3, r2, [r1]
 80050da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1e4      	bne.n	80050ac <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	3308      	adds	r3, #8
 80050e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	e853 3f00 	ldrex	r3, [r3]
 80050f0:	623b      	str	r3, [r7, #32]
   return(result);
 80050f2:	6a3a      	ldr	r2, [r7, #32]
 80050f4:	4b55      	ldr	r3, [pc, #340]	; (800524c <HAL_UART_IRQHandler+0x770>)
 80050f6:	4013      	ands	r3, r2
 80050f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	3308      	adds	r3, #8
 8005102:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005106:	633a      	str	r2, [r7, #48]	; 0x30
 8005108:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800510c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800510e:	e841 2300 	strex	r3, r2, [r1]
 8005112:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1e3      	bne.n	80050e2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2220      	movs	r2, #32
 800511e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	e853 3f00 	ldrex	r3, [r3]
 800513a:	60fb      	str	r3, [r7, #12]
   return(result);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f023 0310 	bic.w	r3, r3, #16
 8005142:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	461a      	mov	r2, r3
 800514c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005150:	61fb      	str	r3, [r7, #28]
 8005152:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005154:	69b9      	ldr	r1, [r7, #24]
 8005156:	69fa      	ldr	r2, [r7, #28]
 8005158:	e841 2300 	strex	r3, r2, [r1]
 800515c:	617b      	str	r3, [r7, #20]
   return(result);
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1e4      	bne.n	800512e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2202      	movs	r2, #2
 8005168:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800516a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800516e:	4619      	mov	r1, r3
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 f881 	bl	8005278 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005176:	e063      	b.n	8005240 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800517c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00e      	beq.n	80051a2 <HAL_UART_IRQHandler+0x6c6>
 8005184:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005188:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d008      	beq.n	80051a2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005198:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f001 f841 	bl	8006222 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80051a0:	e051      	b.n	8005246 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80051a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d014      	beq.n	80051d8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80051ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d105      	bne.n	80051c6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80051ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d008      	beq.n	80051d8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d03a      	beq.n	8005244 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	4798      	blx	r3
    }
    return;
 80051d6:	e035      	b.n	8005244 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80051d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d009      	beq.n	80051f8 <HAL_UART_IRQHandler+0x71c>
 80051e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d003      	beq.n	80051f8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 ffeb 	bl	80061cc <UART_EndTransmit_IT>
    return;
 80051f6:	e026      	b.n	8005246 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80051f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d009      	beq.n	8005218 <HAL_UART_IRQHandler+0x73c>
 8005204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005208:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d003      	beq.n	8005218 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f001 f81a 	bl	800624a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005216:	e016      	b.n	8005246 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800521c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d010      	beq.n	8005246 <HAL_UART_IRQHandler+0x76a>
 8005224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005228:	2b00      	cmp	r3, #0
 800522a:	da0c      	bge.n	8005246 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f001 f802 	bl	8006236 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005232:	e008      	b.n	8005246 <HAL_UART_IRQHandler+0x76a>
      return;
 8005234:	bf00      	nop
 8005236:	e006      	b.n	8005246 <HAL_UART_IRQHandler+0x76a>
    return;
 8005238:	bf00      	nop
 800523a:	e004      	b.n	8005246 <HAL_UART_IRQHandler+0x76a>
      return;
 800523c:	bf00      	nop
 800523e:	e002      	b.n	8005246 <HAL_UART_IRQHandler+0x76a>
      return;
 8005240:	bf00      	nop
 8005242:	e000      	b.n	8005246 <HAL_UART_IRQHandler+0x76a>
    return;
 8005244:	bf00      	nop
  }
}
 8005246:	37e8      	adds	r7, #232	; 0xe8
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	effffffe 	.word	0xeffffffe

08005250 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	460b      	mov	r3, r1
 8005282:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005290:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005294:	b092      	sub	sp, #72	; 0x48
 8005296:	af00      	add	r7, sp, #0
 8005298:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800529a:	2300      	movs	r3, #0
 800529c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	689a      	ldr	r2, [r3, #8]
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	431a      	orrs	r2, r3
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	431a      	orrs	r2, r3
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	69db      	ldr	r3, [r3, #28]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	4bbe      	ldr	r3, [pc, #760]	; (80055b8 <UART_SetConfig+0x328>)
 80052c0:	4013      	ands	r3, r2
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	6812      	ldr	r2, [r2, #0]
 80052c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052c8:	430b      	orrs	r3, r1
 80052ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	68da      	ldr	r2, [r3, #12]
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4ab3      	ldr	r2, [pc, #716]	; (80055bc <UART_SetConfig+0x32c>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d004      	beq.n	80052fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052f8:	4313      	orrs	r3, r2
 80052fa:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	689a      	ldr	r2, [r3, #8]
 8005302:	4baf      	ldr	r3, [pc, #700]	; (80055c0 <UART_SetConfig+0x330>)
 8005304:	4013      	ands	r3, r2
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	6812      	ldr	r2, [r2, #0]
 800530a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800530c:	430b      	orrs	r3, r1
 800530e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005316:	f023 010f 	bic.w	r1, r3, #15
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	430a      	orrs	r2, r1
 8005324:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4aa6      	ldr	r2, [pc, #664]	; (80055c4 <UART_SetConfig+0x334>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d177      	bne.n	8005420 <UART_SetConfig+0x190>
 8005330:	4ba5      	ldr	r3, [pc, #660]	; (80055c8 <UART_SetConfig+0x338>)
 8005332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005334:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005338:	2b28      	cmp	r3, #40	; 0x28
 800533a:	d86d      	bhi.n	8005418 <UART_SetConfig+0x188>
 800533c:	a201      	add	r2, pc, #4	; (adr r2, 8005344 <UART_SetConfig+0xb4>)
 800533e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005342:	bf00      	nop
 8005344:	080053e9 	.word	0x080053e9
 8005348:	08005419 	.word	0x08005419
 800534c:	08005419 	.word	0x08005419
 8005350:	08005419 	.word	0x08005419
 8005354:	08005419 	.word	0x08005419
 8005358:	08005419 	.word	0x08005419
 800535c:	08005419 	.word	0x08005419
 8005360:	08005419 	.word	0x08005419
 8005364:	080053f1 	.word	0x080053f1
 8005368:	08005419 	.word	0x08005419
 800536c:	08005419 	.word	0x08005419
 8005370:	08005419 	.word	0x08005419
 8005374:	08005419 	.word	0x08005419
 8005378:	08005419 	.word	0x08005419
 800537c:	08005419 	.word	0x08005419
 8005380:	08005419 	.word	0x08005419
 8005384:	080053f9 	.word	0x080053f9
 8005388:	08005419 	.word	0x08005419
 800538c:	08005419 	.word	0x08005419
 8005390:	08005419 	.word	0x08005419
 8005394:	08005419 	.word	0x08005419
 8005398:	08005419 	.word	0x08005419
 800539c:	08005419 	.word	0x08005419
 80053a0:	08005419 	.word	0x08005419
 80053a4:	08005401 	.word	0x08005401
 80053a8:	08005419 	.word	0x08005419
 80053ac:	08005419 	.word	0x08005419
 80053b0:	08005419 	.word	0x08005419
 80053b4:	08005419 	.word	0x08005419
 80053b8:	08005419 	.word	0x08005419
 80053bc:	08005419 	.word	0x08005419
 80053c0:	08005419 	.word	0x08005419
 80053c4:	08005409 	.word	0x08005409
 80053c8:	08005419 	.word	0x08005419
 80053cc:	08005419 	.word	0x08005419
 80053d0:	08005419 	.word	0x08005419
 80053d4:	08005419 	.word	0x08005419
 80053d8:	08005419 	.word	0x08005419
 80053dc:	08005419 	.word	0x08005419
 80053e0:	08005419 	.word	0x08005419
 80053e4:	08005411 	.word	0x08005411
 80053e8:	2301      	movs	r3, #1
 80053ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ee:	e222      	b.n	8005836 <UART_SetConfig+0x5a6>
 80053f0:	2304      	movs	r3, #4
 80053f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053f6:	e21e      	b.n	8005836 <UART_SetConfig+0x5a6>
 80053f8:	2308      	movs	r3, #8
 80053fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053fe:	e21a      	b.n	8005836 <UART_SetConfig+0x5a6>
 8005400:	2310      	movs	r3, #16
 8005402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005406:	e216      	b.n	8005836 <UART_SetConfig+0x5a6>
 8005408:	2320      	movs	r3, #32
 800540a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800540e:	e212      	b.n	8005836 <UART_SetConfig+0x5a6>
 8005410:	2340      	movs	r3, #64	; 0x40
 8005412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005416:	e20e      	b.n	8005836 <UART_SetConfig+0x5a6>
 8005418:	2380      	movs	r3, #128	; 0x80
 800541a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800541e:	e20a      	b.n	8005836 <UART_SetConfig+0x5a6>
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a69      	ldr	r2, [pc, #420]	; (80055cc <UART_SetConfig+0x33c>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d130      	bne.n	800548c <UART_SetConfig+0x1fc>
 800542a:	4b67      	ldr	r3, [pc, #412]	; (80055c8 <UART_SetConfig+0x338>)
 800542c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542e:	f003 0307 	and.w	r3, r3, #7
 8005432:	2b05      	cmp	r3, #5
 8005434:	d826      	bhi.n	8005484 <UART_SetConfig+0x1f4>
 8005436:	a201      	add	r2, pc, #4	; (adr r2, 800543c <UART_SetConfig+0x1ac>)
 8005438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800543c:	08005455 	.word	0x08005455
 8005440:	0800545d 	.word	0x0800545d
 8005444:	08005465 	.word	0x08005465
 8005448:	0800546d 	.word	0x0800546d
 800544c:	08005475 	.word	0x08005475
 8005450:	0800547d 	.word	0x0800547d
 8005454:	2300      	movs	r3, #0
 8005456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800545a:	e1ec      	b.n	8005836 <UART_SetConfig+0x5a6>
 800545c:	2304      	movs	r3, #4
 800545e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005462:	e1e8      	b.n	8005836 <UART_SetConfig+0x5a6>
 8005464:	2308      	movs	r3, #8
 8005466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800546a:	e1e4      	b.n	8005836 <UART_SetConfig+0x5a6>
 800546c:	2310      	movs	r3, #16
 800546e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005472:	e1e0      	b.n	8005836 <UART_SetConfig+0x5a6>
 8005474:	2320      	movs	r3, #32
 8005476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800547a:	e1dc      	b.n	8005836 <UART_SetConfig+0x5a6>
 800547c:	2340      	movs	r3, #64	; 0x40
 800547e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005482:	e1d8      	b.n	8005836 <UART_SetConfig+0x5a6>
 8005484:	2380      	movs	r3, #128	; 0x80
 8005486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800548a:	e1d4      	b.n	8005836 <UART_SetConfig+0x5a6>
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a4f      	ldr	r2, [pc, #316]	; (80055d0 <UART_SetConfig+0x340>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d130      	bne.n	80054f8 <UART_SetConfig+0x268>
 8005496:	4b4c      	ldr	r3, [pc, #304]	; (80055c8 <UART_SetConfig+0x338>)
 8005498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800549a:	f003 0307 	and.w	r3, r3, #7
 800549e:	2b05      	cmp	r3, #5
 80054a0:	d826      	bhi.n	80054f0 <UART_SetConfig+0x260>
 80054a2:	a201      	add	r2, pc, #4	; (adr r2, 80054a8 <UART_SetConfig+0x218>)
 80054a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a8:	080054c1 	.word	0x080054c1
 80054ac:	080054c9 	.word	0x080054c9
 80054b0:	080054d1 	.word	0x080054d1
 80054b4:	080054d9 	.word	0x080054d9
 80054b8:	080054e1 	.word	0x080054e1
 80054bc:	080054e9 	.word	0x080054e9
 80054c0:	2300      	movs	r3, #0
 80054c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054c6:	e1b6      	b.n	8005836 <UART_SetConfig+0x5a6>
 80054c8:	2304      	movs	r3, #4
 80054ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ce:	e1b2      	b.n	8005836 <UART_SetConfig+0x5a6>
 80054d0:	2308      	movs	r3, #8
 80054d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054d6:	e1ae      	b.n	8005836 <UART_SetConfig+0x5a6>
 80054d8:	2310      	movs	r3, #16
 80054da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054de:	e1aa      	b.n	8005836 <UART_SetConfig+0x5a6>
 80054e0:	2320      	movs	r3, #32
 80054e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054e6:	e1a6      	b.n	8005836 <UART_SetConfig+0x5a6>
 80054e8:	2340      	movs	r3, #64	; 0x40
 80054ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ee:	e1a2      	b.n	8005836 <UART_SetConfig+0x5a6>
 80054f0:	2380      	movs	r3, #128	; 0x80
 80054f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054f6:	e19e      	b.n	8005836 <UART_SetConfig+0x5a6>
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a35      	ldr	r2, [pc, #212]	; (80055d4 <UART_SetConfig+0x344>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d130      	bne.n	8005564 <UART_SetConfig+0x2d4>
 8005502:	4b31      	ldr	r3, [pc, #196]	; (80055c8 <UART_SetConfig+0x338>)
 8005504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005506:	f003 0307 	and.w	r3, r3, #7
 800550a:	2b05      	cmp	r3, #5
 800550c:	d826      	bhi.n	800555c <UART_SetConfig+0x2cc>
 800550e:	a201      	add	r2, pc, #4	; (adr r2, 8005514 <UART_SetConfig+0x284>)
 8005510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005514:	0800552d 	.word	0x0800552d
 8005518:	08005535 	.word	0x08005535
 800551c:	0800553d 	.word	0x0800553d
 8005520:	08005545 	.word	0x08005545
 8005524:	0800554d 	.word	0x0800554d
 8005528:	08005555 	.word	0x08005555
 800552c:	2300      	movs	r3, #0
 800552e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005532:	e180      	b.n	8005836 <UART_SetConfig+0x5a6>
 8005534:	2304      	movs	r3, #4
 8005536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800553a:	e17c      	b.n	8005836 <UART_SetConfig+0x5a6>
 800553c:	2308      	movs	r3, #8
 800553e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005542:	e178      	b.n	8005836 <UART_SetConfig+0x5a6>
 8005544:	2310      	movs	r3, #16
 8005546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800554a:	e174      	b.n	8005836 <UART_SetConfig+0x5a6>
 800554c:	2320      	movs	r3, #32
 800554e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005552:	e170      	b.n	8005836 <UART_SetConfig+0x5a6>
 8005554:	2340      	movs	r3, #64	; 0x40
 8005556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800555a:	e16c      	b.n	8005836 <UART_SetConfig+0x5a6>
 800555c:	2380      	movs	r3, #128	; 0x80
 800555e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005562:	e168      	b.n	8005836 <UART_SetConfig+0x5a6>
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a1b      	ldr	r2, [pc, #108]	; (80055d8 <UART_SetConfig+0x348>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d142      	bne.n	80055f4 <UART_SetConfig+0x364>
 800556e:	4b16      	ldr	r3, [pc, #88]	; (80055c8 <UART_SetConfig+0x338>)
 8005570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005572:	f003 0307 	and.w	r3, r3, #7
 8005576:	2b05      	cmp	r3, #5
 8005578:	d838      	bhi.n	80055ec <UART_SetConfig+0x35c>
 800557a:	a201      	add	r2, pc, #4	; (adr r2, 8005580 <UART_SetConfig+0x2f0>)
 800557c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005580:	08005599 	.word	0x08005599
 8005584:	080055a1 	.word	0x080055a1
 8005588:	080055a9 	.word	0x080055a9
 800558c:	080055b1 	.word	0x080055b1
 8005590:	080055dd 	.word	0x080055dd
 8005594:	080055e5 	.word	0x080055e5
 8005598:	2300      	movs	r3, #0
 800559a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800559e:	e14a      	b.n	8005836 <UART_SetConfig+0x5a6>
 80055a0:	2304      	movs	r3, #4
 80055a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055a6:	e146      	b.n	8005836 <UART_SetConfig+0x5a6>
 80055a8:	2308      	movs	r3, #8
 80055aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ae:	e142      	b.n	8005836 <UART_SetConfig+0x5a6>
 80055b0:	2310      	movs	r3, #16
 80055b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055b6:	e13e      	b.n	8005836 <UART_SetConfig+0x5a6>
 80055b8:	cfff69f3 	.word	0xcfff69f3
 80055bc:	58000c00 	.word	0x58000c00
 80055c0:	11fff4ff 	.word	0x11fff4ff
 80055c4:	40011000 	.word	0x40011000
 80055c8:	58024400 	.word	0x58024400
 80055cc:	40004400 	.word	0x40004400
 80055d0:	40004800 	.word	0x40004800
 80055d4:	40004c00 	.word	0x40004c00
 80055d8:	40005000 	.word	0x40005000
 80055dc:	2320      	movs	r3, #32
 80055de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055e2:	e128      	b.n	8005836 <UART_SetConfig+0x5a6>
 80055e4:	2340      	movs	r3, #64	; 0x40
 80055e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ea:	e124      	b.n	8005836 <UART_SetConfig+0x5a6>
 80055ec:	2380      	movs	r3, #128	; 0x80
 80055ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055f2:	e120      	b.n	8005836 <UART_SetConfig+0x5a6>
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4acb      	ldr	r2, [pc, #812]	; (8005928 <UART_SetConfig+0x698>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d176      	bne.n	80056ec <UART_SetConfig+0x45c>
 80055fe:	4bcb      	ldr	r3, [pc, #812]	; (800592c <UART_SetConfig+0x69c>)
 8005600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005602:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005606:	2b28      	cmp	r3, #40	; 0x28
 8005608:	d86c      	bhi.n	80056e4 <UART_SetConfig+0x454>
 800560a:	a201      	add	r2, pc, #4	; (adr r2, 8005610 <UART_SetConfig+0x380>)
 800560c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005610:	080056b5 	.word	0x080056b5
 8005614:	080056e5 	.word	0x080056e5
 8005618:	080056e5 	.word	0x080056e5
 800561c:	080056e5 	.word	0x080056e5
 8005620:	080056e5 	.word	0x080056e5
 8005624:	080056e5 	.word	0x080056e5
 8005628:	080056e5 	.word	0x080056e5
 800562c:	080056e5 	.word	0x080056e5
 8005630:	080056bd 	.word	0x080056bd
 8005634:	080056e5 	.word	0x080056e5
 8005638:	080056e5 	.word	0x080056e5
 800563c:	080056e5 	.word	0x080056e5
 8005640:	080056e5 	.word	0x080056e5
 8005644:	080056e5 	.word	0x080056e5
 8005648:	080056e5 	.word	0x080056e5
 800564c:	080056e5 	.word	0x080056e5
 8005650:	080056c5 	.word	0x080056c5
 8005654:	080056e5 	.word	0x080056e5
 8005658:	080056e5 	.word	0x080056e5
 800565c:	080056e5 	.word	0x080056e5
 8005660:	080056e5 	.word	0x080056e5
 8005664:	080056e5 	.word	0x080056e5
 8005668:	080056e5 	.word	0x080056e5
 800566c:	080056e5 	.word	0x080056e5
 8005670:	080056cd 	.word	0x080056cd
 8005674:	080056e5 	.word	0x080056e5
 8005678:	080056e5 	.word	0x080056e5
 800567c:	080056e5 	.word	0x080056e5
 8005680:	080056e5 	.word	0x080056e5
 8005684:	080056e5 	.word	0x080056e5
 8005688:	080056e5 	.word	0x080056e5
 800568c:	080056e5 	.word	0x080056e5
 8005690:	080056d5 	.word	0x080056d5
 8005694:	080056e5 	.word	0x080056e5
 8005698:	080056e5 	.word	0x080056e5
 800569c:	080056e5 	.word	0x080056e5
 80056a0:	080056e5 	.word	0x080056e5
 80056a4:	080056e5 	.word	0x080056e5
 80056a8:	080056e5 	.word	0x080056e5
 80056ac:	080056e5 	.word	0x080056e5
 80056b0:	080056dd 	.word	0x080056dd
 80056b4:	2301      	movs	r3, #1
 80056b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ba:	e0bc      	b.n	8005836 <UART_SetConfig+0x5a6>
 80056bc:	2304      	movs	r3, #4
 80056be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056c2:	e0b8      	b.n	8005836 <UART_SetConfig+0x5a6>
 80056c4:	2308      	movs	r3, #8
 80056c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ca:	e0b4      	b.n	8005836 <UART_SetConfig+0x5a6>
 80056cc:	2310      	movs	r3, #16
 80056ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056d2:	e0b0      	b.n	8005836 <UART_SetConfig+0x5a6>
 80056d4:	2320      	movs	r3, #32
 80056d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056da:	e0ac      	b.n	8005836 <UART_SetConfig+0x5a6>
 80056dc:	2340      	movs	r3, #64	; 0x40
 80056de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056e2:	e0a8      	b.n	8005836 <UART_SetConfig+0x5a6>
 80056e4:	2380      	movs	r3, #128	; 0x80
 80056e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ea:	e0a4      	b.n	8005836 <UART_SetConfig+0x5a6>
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a8f      	ldr	r2, [pc, #572]	; (8005930 <UART_SetConfig+0x6a0>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d130      	bne.n	8005758 <UART_SetConfig+0x4c8>
 80056f6:	4b8d      	ldr	r3, [pc, #564]	; (800592c <UART_SetConfig+0x69c>)
 80056f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056fa:	f003 0307 	and.w	r3, r3, #7
 80056fe:	2b05      	cmp	r3, #5
 8005700:	d826      	bhi.n	8005750 <UART_SetConfig+0x4c0>
 8005702:	a201      	add	r2, pc, #4	; (adr r2, 8005708 <UART_SetConfig+0x478>)
 8005704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005708:	08005721 	.word	0x08005721
 800570c:	08005729 	.word	0x08005729
 8005710:	08005731 	.word	0x08005731
 8005714:	08005739 	.word	0x08005739
 8005718:	08005741 	.word	0x08005741
 800571c:	08005749 	.word	0x08005749
 8005720:	2300      	movs	r3, #0
 8005722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005726:	e086      	b.n	8005836 <UART_SetConfig+0x5a6>
 8005728:	2304      	movs	r3, #4
 800572a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800572e:	e082      	b.n	8005836 <UART_SetConfig+0x5a6>
 8005730:	2308      	movs	r3, #8
 8005732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005736:	e07e      	b.n	8005836 <UART_SetConfig+0x5a6>
 8005738:	2310      	movs	r3, #16
 800573a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800573e:	e07a      	b.n	8005836 <UART_SetConfig+0x5a6>
 8005740:	2320      	movs	r3, #32
 8005742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005746:	e076      	b.n	8005836 <UART_SetConfig+0x5a6>
 8005748:	2340      	movs	r3, #64	; 0x40
 800574a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800574e:	e072      	b.n	8005836 <UART_SetConfig+0x5a6>
 8005750:	2380      	movs	r3, #128	; 0x80
 8005752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005756:	e06e      	b.n	8005836 <UART_SetConfig+0x5a6>
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a75      	ldr	r2, [pc, #468]	; (8005934 <UART_SetConfig+0x6a4>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d130      	bne.n	80057c4 <UART_SetConfig+0x534>
 8005762:	4b72      	ldr	r3, [pc, #456]	; (800592c <UART_SetConfig+0x69c>)
 8005764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005766:	f003 0307 	and.w	r3, r3, #7
 800576a:	2b05      	cmp	r3, #5
 800576c:	d826      	bhi.n	80057bc <UART_SetConfig+0x52c>
 800576e:	a201      	add	r2, pc, #4	; (adr r2, 8005774 <UART_SetConfig+0x4e4>)
 8005770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005774:	0800578d 	.word	0x0800578d
 8005778:	08005795 	.word	0x08005795
 800577c:	0800579d 	.word	0x0800579d
 8005780:	080057a5 	.word	0x080057a5
 8005784:	080057ad 	.word	0x080057ad
 8005788:	080057b5 	.word	0x080057b5
 800578c:	2300      	movs	r3, #0
 800578e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005792:	e050      	b.n	8005836 <UART_SetConfig+0x5a6>
 8005794:	2304      	movs	r3, #4
 8005796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800579a:	e04c      	b.n	8005836 <UART_SetConfig+0x5a6>
 800579c:	2308      	movs	r3, #8
 800579e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057a2:	e048      	b.n	8005836 <UART_SetConfig+0x5a6>
 80057a4:	2310      	movs	r3, #16
 80057a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057aa:	e044      	b.n	8005836 <UART_SetConfig+0x5a6>
 80057ac:	2320      	movs	r3, #32
 80057ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057b2:	e040      	b.n	8005836 <UART_SetConfig+0x5a6>
 80057b4:	2340      	movs	r3, #64	; 0x40
 80057b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057ba:	e03c      	b.n	8005836 <UART_SetConfig+0x5a6>
 80057bc:	2380      	movs	r3, #128	; 0x80
 80057be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057c2:	e038      	b.n	8005836 <UART_SetConfig+0x5a6>
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a5b      	ldr	r2, [pc, #364]	; (8005938 <UART_SetConfig+0x6a8>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d130      	bne.n	8005830 <UART_SetConfig+0x5a0>
 80057ce:	4b57      	ldr	r3, [pc, #348]	; (800592c <UART_SetConfig+0x69c>)
 80057d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d2:	f003 0307 	and.w	r3, r3, #7
 80057d6:	2b05      	cmp	r3, #5
 80057d8:	d826      	bhi.n	8005828 <UART_SetConfig+0x598>
 80057da:	a201      	add	r2, pc, #4	; (adr r2, 80057e0 <UART_SetConfig+0x550>)
 80057dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e0:	080057f9 	.word	0x080057f9
 80057e4:	08005801 	.word	0x08005801
 80057e8:	08005809 	.word	0x08005809
 80057ec:	08005811 	.word	0x08005811
 80057f0:	08005819 	.word	0x08005819
 80057f4:	08005821 	.word	0x08005821
 80057f8:	2302      	movs	r3, #2
 80057fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057fe:	e01a      	b.n	8005836 <UART_SetConfig+0x5a6>
 8005800:	2304      	movs	r3, #4
 8005802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005806:	e016      	b.n	8005836 <UART_SetConfig+0x5a6>
 8005808:	2308      	movs	r3, #8
 800580a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800580e:	e012      	b.n	8005836 <UART_SetConfig+0x5a6>
 8005810:	2310      	movs	r3, #16
 8005812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005816:	e00e      	b.n	8005836 <UART_SetConfig+0x5a6>
 8005818:	2320      	movs	r3, #32
 800581a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800581e:	e00a      	b.n	8005836 <UART_SetConfig+0x5a6>
 8005820:	2340      	movs	r3, #64	; 0x40
 8005822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005826:	e006      	b.n	8005836 <UART_SetConfig+0x5a6>
 8005828:	2380      	movs	r3, #128	; 0x80
 800582a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800582e:	e002      	b.n	8005836 <UART_SetConfig+0x5a6>
 8005830:	2380      	movs	r3, #128	; 0x80
 8005832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a3f      	ldr	r2, [pc, #252]	; (8005938 <UART_SetConfig+0x6a8>)
 800583c:	4293      	cmp	r3, r2
 800583e:	f040 80f8 	bne.w	8005a32 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005842:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005846:	2b20      	cmp	r3, #32
 8005848:	dc46      	bgt.n	80058d8 <UART_SetConfig+0x648>
 800584a:	2b02      	cmp	r3, #2
 800584c:	f2c0 8082 	blt.w	8005954 <UART_SetConfig+0x6c4>
 8005850:	3b02      	subs	r3, #2
 8005852:	2b1e      	cmp	r3, #30
 8005854:	d87e      	bhi.n	8005954 <UART_SetConfig+0x6c4>
 8005856:	a201      	add	r2, pc, #4	; (adr r2, 800585c <UART_SetConfig+0x5cc>)
 8005858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800585c:	080058df 	.word	0x080058df
 8005860:	08005955 	.word	0x08005955
 8005864:	080058e7 	.word	0x080058e7
 8005868:	08005955 	.word	0x08005955
 800586c:	08005955 	.word	0x08005955
 8005870:	08005955 	.word	0x08005955
 8005874:	080058f7 	.word	0x080058f7
 8005878:	08005955 	.word	0x08005955
 800587c:	08005955 	.word	0x08005955
 8005880:	08005955 	.word	0x08005955
 8005884:	08005955 	.word	0x08005955
 8005888:	08005955 	.word	0x08005955
 800588c:	08005955 	.word	0x08005955
 8005890:	08005955 	.word	0x08005955
 8005894:	08005907 	.word	0x08005907
 8005898:	08005955 	.word	0x08005955
 800589c:	08005955 	.word	0x08005955
 80058a0:	08005955 	.word	0x08005955
 80058a4:	08005955 	.word	0x08005955
 80058a8:	08005955 	.word	0x08005955
 80058ac:	08005955 	.word	0x08005955
 80058b0:	08005955 	.word	0x08005955
 80058b4:	08005955 	.word	0x08005955
 80058b8:	08005955 	.word	0x08005955
 80058bc:	08005955 	.word	0x08005955
 80058c0:	08005955 	.word	0x08005955
 80058c4:	08005955 	.word	0x08005955
 80058c8:	08005955 	.word	0x08005955
 80058cc:	08005955 	.word	0x08005955
 80058d0:	08005955 	.word	0x08005955
 80058d4:	08005947 	.word	0x08005947
 80058d8:	2b40      	cmp	r3, #64	; 0x40
 80058da:	d037      	beq.n	800594c <UART_SetConfig+0x6bc>
 80058dc:	e03a      	b.n	8005954 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80058de:	f7fe fbfd 	bl	80040dc <HAL_RCCEx_GetD3PCLK1Freq>
 80058e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80058e4:	e03c      	b.n	8005960 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fe fc0c 	bl	8004108 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80058f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058f4:	e034      	b.n	8005960 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058f6:	f107 0318 	add.w	r3, r7, #24
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7fe fd58 	bl	80043b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005904:	e02c      	b.n	8005960 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005906:	4b09      	ldr	r3, [pc, #36]	; (800592c <UART_SetConfig+0x69c>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0320 	and.w	r3, r3, #32
 800590e:	2b00      	cmp	r3, #0
 8005910:	d016      	beq.n	8005940 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005912:	4b06      	ldr	r3, [pc, #24]	; (800592c <UART_SetConfig+0x69c>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	08db      	lsrs	r3, r3, #3
 8005918:	f003 0303 	and.w	r3, r3, #3
 800591c:	4a07      	ldr	r2, [pc, #28]	; (800593c <UART_SetConfig+0x6ac>)
 800591e:	fa22 f303 	lsr.w	r3, r2, r3
 8005922:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005924:	e01c      	b.n	8005960 <UART_SetConfig+0x6d0>
 8005926:	bf00      	nop
 8005928:	40011400 	.word	0x40011400
 800592c:	58024400 	.word	0x58024400
 8005930:	40007800 	.word	0x40007800
 8005934:	40007c00 	.word	0x40007c00
 8005938:	58000c00 	.word	0x58000c00
 800593c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005940:	4b9d      	ldr	r3, [pc, #628]	; (8005bb8 <UART_SetConfig+0x928>)
 8005942:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005944:	e00c      	b.n	8005960 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005946:	4b9d      	ldr	r3, [pc, #628]	; (8005bbc <UART_SetConfig+0x92c>)
 8005948:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800594a:	e009      	b.n	8005960 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800594c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005950:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005952:	e005      	b.n	8005960 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005954:	2300      	movs	r3, #0
 8005956:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800595e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005962:	2b00      	cmp	r3, #0
 8005964:	f000 81de 	beq.w	8005d24 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596c:	4a94      	ldr	r2, [pc, #592]	; (8005bc0 <UART_SetConfig+0x930>)
 800596e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005972:	461a      	mov	r2, r3
 8005974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005976:	fbb3 f3f2 	udiv	r3, r3, r2
 800597a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	4613      	mov	r3, r2
 8005982:	005b      	lsls	r3, r3, #1
 8005984:	4413      	add	r3, r2
 8005986:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005988:	429a      	cmp	r2, r3
 800598a:	d305      	bcc.n	8005998 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005992:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005994:	429a      	cmp	r2, r3
 8005996:	d903      	bls.n	80059a0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800599e:	e1c1      	b.n	8005d24 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059a2:	2200      	movs	r2, #0
 80059a4:	60bb      	str	r3, [r7, #8]
 80059a6:	60fa      	str	r2, [r7, #12]
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ac:	4a84      	ldr	r2, [pc, #528]	; (8005bc0 <UART_SetConfig+0x930>)
 80059ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	2200      	movs	r2, #0
 80059b6:	603b      	str	r3, [r7, #0]
 80059b8:	607a      	str	r2, [r7, #4]
 80059ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80059c2:	f7fa fc89 	bl	80002d8 <__aeabi_uldivmod>
 80059c6:	4602      	mov	r2, r0
 80059c8:	460b      	mov	r3, r1
 80059ca:	4610      	mov	r0, r2
 80059cc:	4619      	mov	r1, r3
 80059ce:	f04f 0200 	mov.w	r2, #0
 80059d2:	f04f 0300 	mov.w	r3, #0
 80059d6:	020b      	lsls	r3, r1, #8
 80059d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80059dc:	0202      	lsls	r2, r0, #8
 80059de:	6979      	ldr	r1, [r7, #20]
 80059e0:	6849      	ldr	r1, [r1, #4]
 80059e2:	0849      	lsrs	r1, r1, #1
 80059e4:	2000      	movs	r0, #0
 80059e6:	460c      	mov	r4, r1
 80059e8:	4605      	mov	r5, r0
 80059ea:	eb12 0804 	adds.w	r8, r2, r4
 80059ee:	eb43 0905 	adc.w	r9, r3, r5
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	469a      	mov	sl, r3
 80059fa:	4693      	mov	fp, r2
 80059fc:	4652      	mov	r2, sl
 80059fe:	465b      	mov	r3, fp
 8005a00:	4640      	mov	r0, r8
 8005a02:	4649      	mov	r1, r9
 8005a04:	f7fa fc68 	bl	80002d8 <__aeabi_uldivmod>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a16:	d308      	bcc.n	8005a2a <UART_SetConfig+0x79a>
 8005a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a1e:	d204      	bcs.n	8005a2a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a26:	60da      	str	r2, [r3, #12]
 8005a28:	e17c      	b.n	8005d24 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005a30:	e178      	b.n	8005d24 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	69db      	ldr	r3, [r3, #28]
 8005a36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a3a:	f040 80c5 	bne.w	8005bc8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005a3e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005a42:	2b20      	cmp	r3, #32
 8005a44:	dc48      	bgt.n	8005ad8 <UART_SetConfig+0x848>
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	db7b      	blt.n	8005b42 <UART_SetConfig+0x8b2>
 8005a4a:	2b20      	cmp	r3, #32
 8005a4c:	d879      	bhi.n	8005b42 <UART_SetConfig+0x8b2>
 8005a4e:	a201      	add	r2, pc, #4	; (adr r2, 8005a54 <UART_SetConfig+0x7c4>)
 8005a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a54:	08005adf 	.word	0x08005adf
 8005a58:	08005ae7 	.word	0x08005ae7
 8005a5c:	08005b43 	.word	0x08005b43
 8005a60:	08005b43 	.word	0x08005b43
 8005a64:	08005aef 	.word	0x08005aef
 8005a68:	08005b43 	.word	0x08005b43
 8005a6c:	08005b43 	.word	0x08005b43
 8005a70:	08005b43 	.word	0x08005b43
 8005a74:	08005aff 	.word	0x08005aff
 8005a78:	08005b43 	.word	0x08005b43
 8005a7c:	08005b43 	.word	0x08005b43
 8005a80:	08005b43 	.word	0x08005b43
 8005a84:	08005b43 	.word	0x08005b43
 8005a88:	08005b43 	.word	0x08005b43
 8005a8c:	08005b43 	.word	0x08005b43
 8005a90:	08005b43 	.word	0x08005b43
 8005a94:	08005b0f 	.word	0x08005b0f
 8005a98:	08005b43 	.word	0x08005b43
 8005a9c:	08005b43 	.word	0x08005b43
 8005aa0:	08005b43 	.word	0x08005b43
 8005aa4:	08005b43 	.word	0x08005b43
 8005aa8:	08005b43 	.word	0x08005b43
 8005aac:	08005b43 	.word	0x08005b43
 8005ab0:	08005b43 	.word	0x08005b43
 8005ab4:	08005b43 	.word	0x08005b43
 8005ab8:	08005b43 	.word	0x08005b43
 8005abc:	08005b43 	.word	0x08005b43
 8005ac0:	08005b43 	.word	0x08005b43
 8005ac4:	08005b43 	.word	0x08005b43
 8005ac8:	08005b43 	.word	0x08005b43
 8005acc:	08005b43 	.word	0x08005b43
 8005ad0:	08005b43 	.word	0x08005b43
 8005ad4:	08005b35 	.word	0x08005b35
 8005ad8:	2b40      	cmp	r3, #64	; 0x40
 8005ada:	d02e      	beq.n	8005b3a <UART_SetConfig+0x8aa>
 8005adc:	e031      	b.n	8005b42 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ade:	f7fd f8c7 	bl	8002c70 <HAL_RCC_GetPCLK1Freq>
 8005ae2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005ae4:	e033      	b.n	8005b4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ae6:	f7fd f8d9 	bl	8002c9c <HAL_RCC_GetPCLK2Freq>
 8005aea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005aec:	e02f      	b.n	8005b4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7fe fb08 	bl	8004108 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005afc:	e027      	b.n	8005b4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005afe:	f107 0318 	add.w	r3, r7, #24
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7fe fc54 	bl	80043b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b0c:	e01f      	b.n	8005b4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b0e:	4b2d      	ldr	r3, [pc, #180]	; (8005bc4 <UART_SetConfig+0x934>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0320 	and.w	r3, r3, #32
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d009      	beq.n	8005b2e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005b1a:	4b2a      	ldr	r3, [pc, #168]	; (8005bc4 <UART_SetConfig+0x934>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	08db      	lsrs	r3, r3, #3
 8005b20:	f003 0303 	and.w	r3, r3, #3
 8005b24:	4a24      	ldr	r2, [pc, #144]	; (8005bb8 <UART_SetConfig+0x928>)
 8005b26:	fa22 f303 	lsr.w	r3, r2, r3
 8005b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b2c:	e00f      	b.n	8005b4e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005b2e:	4b22      	ldr	r3, [pc, #136]	; (8005bb8 <UART_SetConfig+0x928>)
 8005b30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b32:	e00c      	b.n	8005b4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005b34:	4b21      	ldr	r3, [pc, #132]	; (8005bbc <UART_SetConfig+0x92c>)
 8005b36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b38:	e009      	b.n	8005b4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b40:	e005      	b.n	8005b4e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005b42:	2300      	movs	r3, #0
 8005b44:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005b4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f000 80e7 	beq.w	8005d24 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5a:	4a19      	ldr	r2, [pc, #100]	; (8005bc0 <UART_SetConfig+0x930>)
 8005b5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b60:	461a      	mov	r2, r3
 8005b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b64:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b68:	005a      	lsls	r2, r3, #1
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	085b      	lsrs	r3, r3, #1
 8005b70:	441a      	add	r2, r3
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b7a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7e:	2b0f      	cmp	r3, #15
 8005b80:	d916      	bls.n	8005bb0 <UART_SetConfig+0x920>
 8005b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b88:	d212      	bcs.n	8005bb0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	f023 030f 	bic.w	r3, r3, #15
 8005b92:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b96:	085b      	lsrs	r3, r3, #1
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	f003 0307 	and.w	r3, r3, #7
 8005b9e:	b29a      	uxth	r2, r3
 8005ba0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005bac:	60da      	str	r2, [r3, #12]
 8005bae:	e0b9      	b.n	8005d24 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005bb6:	e0b5      	b.n	8005d24 <UART_SetConfig+0xa94>
 8005bb8:	03d09000 	.word	0x03d09000
 8005bbc:	003d0900 	.word	0x003d0900
 8005bc0:	080064f4 	.word	0x080064f4
 8005bc4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bc8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005bcc:	2b20      	cmp	r3, #32
 8005bce:	dc49      	bgt.n	8005c64 <UART_SetConfig+0x9d4>
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	db7c      	blt.n	8005cce <UART_SetConfig+0xa3e>
 8005bd4:	2b20      	cmp	r3, #32
 8005bd6:	d87a      	bhi.n	8005cce <UART_SetConfig+0xa3e>
 8005bd8:	a201      	add	r2, pc, #4	; (adr r2, 8005be0 <UART_SetConfig+0x950>)
 8005bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bde:	bf00      	nop
 8005be0:	08005c6b 	.word	0x08005c6b
 8005be4:	08005c73 	.word	0x08005c73
 8005be8:	08005ccf 	.word	0x08005ccf
 8005bec:	08005ccf 	.word	0x08005ccf
 8005bf0:	08005c7b 	.word	0x08005c7b
 8005bf4:	08005ccf 	.word	0x08005ccf
 8005bf8:	08005ccf 	.word	0x08005ccf
 8005bfc:	08005ccf 	.word	0x08005ccf
 8005c00:	08005c8b 	.word	0x08005c8b
 8005c04:	08005ccf 	.word	0x08005ccf
 8005c08:	08005ccf 	.word	0x08005ccf
 8005c0c:	08005ccf 	.word	0x08005ccf
 8005c10:	08005ccf 	.word	0x08005ccf
 8005c14:	08005ccf 	.word	0x08005ccf
 8005c18:	08005ccf 	.word	0x08005ccf
 8005c1c:	08005ccf 	.word	0x08005ccf
 8005c20:	08005c9b 	.word	0x08005c9b
 8005c24:	08005ccf 	.word	0x08005ccf
 8005c28:	08005ccf 	.word	0x08005ccf
 8005c2c:	08005ccf 	.word	0x08005ccf
 8005c30:	08005ccf 	.word	0x08005ccf
 8005c34:	08005ccf 	.word	0x08005ccf
 8005c38:	08005ccf 	.word	0x08005ccf
 8005c3c:	08005ccf 	.word	0x08005ccf
 8005c40:	08005ccf 	.word	0x08005ccf
 8005c44:	08005ccf 	.word	0x08005ccf
 8005c48:	08005ccf 	.word	0x08005ccf
 8005c4c:	08005ccf 	.word	0x08005ccf
 8005c50:	08005ccf 	.word	0x08005ccf
 8005c54:	08005ccf 	.word	0x08005ccf
 8005c58:	08005ccf 	.word	0x08005ccf
 8005c5c:	08005ccf 	.word	0x08005ccf
 8005c60:	08005cc1 	.word	0x08005cc1
 8005c64:	2b40      	cmp	r3, #64	; 0x40
 8005c66:	d02e      	beq.n	8005cc6 <UART_SetConfig+0xa36>
 8005c68:	e031      	b.n	8005cce <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c6a:	f7fd f801 	bl	8002c70 <HAL_RCC_GetPCLK1Freq>
 8005c6e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005c70:	e033      	b.n	8005cda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c72:	f7fd f813 	bl	8002c9c <HAL_RCC_GetPCLK2Freq>
 8005c76:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005c78:	e02f      	b.n	8005cda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7fe fa42 	bl	8004108 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c88:	e027      	b.n	8005cda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c8a:	f107 0318 	add.w	r3, r7, #24
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7fe fb8e 	bl	80043b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c98:	e01f      	b.n	8005cda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c9a:	4b2d      	ldr	r3, [pc, #180]	; (8005d50 <UART_SetConfig+0xac0>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0320 	and.w	r3, r3, #32
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d009      	beq.n	8005cba <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005ca6:	4b2a      	ldr	r3, [pc, #168]	; (8005d50 <UART_SetConfig+0xac0>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	08db      	lsrs	r3, r3, #3
 8005cac:	f003 0303 	and.w	r3, r3, #3
 8005cb0:	4a28      	ldr	r2, [pc, #160]	; (8005d54 <UART_SetConfig+0xac4>)
 8005cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8005cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005cb8:	e00f      	b.n	8005cda <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005cba:	4b26      	ldr	r3, [pc, #152]	; (8005d54 <UART_SetConfig+0xac4>)
 8005cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cbe:	e00c      	b.n	8005cda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005cc0:	4b25      	ldr	r3, [pc, #148]	; (8005d58 <UART_SetConfig+0xac8>)
 8005cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cc4:	e009      	b.n	8005cda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ccc:	e005      	b.n	8005cda <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005cd8:	bf00      	nop
    }

    if (pclk != 0U)
 8005cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d021      	beq.n	8005d24 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce4:	4a1d      	ldr	r2, [pc, #116]	; (8005d5c <UART_SetConfig+0xacc>)
 8005ce6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cea:	461a      	mov	r2, r3
 8005cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cee:	fbb3 f2f2 	udiv	r2, r3, r2
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	085b      	lsrs	r3, r3, #1
 8005cf8:	441a      	add	r2, r3
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d02:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d06:	2b0f      	cmp	r3, #15
 8005d08:	d909      	bls.n	8005d1e <UART_SetConfig+0xa8e>
 8005d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d10:	d205      	bcs.n	8005d1e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	60da      	str	r2, [r3, #12]
 8005d1c:	e002      	b.n	8005d24 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	2200      	movs	r2, #0
 8005d38:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005d40:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3748      	adds	r7, #72	; 0x48
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d4e:	bf00      	nop
 8005d50:	58024400 	.word	0x58024400
 8005d54:	03d09000 	.word	0x03d09000
 8005d58:	003d0900 	.word	0x003d0900
 8005d5c:	080064f4 	.word	0x080064f4

08005d60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6c:	f003 0308 	and.w	r3, r3, #8
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00a      	beq.n	8005d8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	430a      	orrs	r2, r1
 8005d88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00a      	beq.n	8005dac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	430a      	orrs	r2, r1
 8005daa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db0:	f003 0302 	and.w	r3, r3, #2
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00a      	beq.n	8005dce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd2:	f003 0304 	and.w	r3, r3, #4
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00a      	beq.n	8005df0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	430a      	orrs	r2, r1
 8005dee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df4:	f003 0310 	and.w	r3, r3, #16
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00a      	beq.n	8005e12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e16:	f003 0320 	and.w	r3, r3, #32
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00a      	beq.n	8005e34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	430a      	orrs	r2, r1
 8005e32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d01a      	beq.n	8005e76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	430a      	orrs	r2, r1
 8005e54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e5e:	d10a      	bne.n	8005e76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	430a      	orrs	r2, r1
 8005e74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00a      	beq.n	8005e98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	430a      	orrs	r2, r1
 8005e96:	605a      	str	r2, [r3, #4]
  }
}
 8005e98:	bf00      	nop
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b098      	sub	sp, #96	; 0x60
 8005ea8:	af02      	add	r7, sp, #8
 8005eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005eb4:	f7fa feac 	bl	8000c10 <HAL_GetTick>
 8005eb8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0308 	and.w	r3, r3, #8
 8005ec4:	2b08      	cmp	r3, #8
 8005ec6:	d12f      	bne.n	8005f28 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ec8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ecc:	9300      	str	r3, [sp, #0]
 8005ece:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 f88e 	bl	8005ff8 <UART_WaitOnFlagUntilTimeout>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d022      	beq.n	8005f28 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eea:	e853 3f00 	ldrex	r3, [r3]
 8005eee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ef2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ef6:	653b      	str	r3, [r7, #80]	; 0x50
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	461a      	mov	r2, r3
 8005efe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f00:	647b      	str	r3, [r7, #68]	; 0x44
 8005f02:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f08:	e841 2300 	strex	r3, r2, [r1]
 8005f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1e6      	bne.n	8005ee2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2220      	movs	r2, #32
 8005f18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f24:	2303      	movs	r3, #3
 8005f26:	e063      	b.n	8005ff0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0304 	and.w	r3, r3, #4
 8005f32:	2b04      	cmp	r3, #4
 8005f34:	d149      	bne.n	8005fca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f36:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 f857 	bl	8005ff8 <UART_WaitOnFlagUntilTimeout>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d03c      	beq.n	8005fca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f58:	e853 3f00 	ldrex	r3, [r3]
 8005f5c:	623b      	str	r3, [r7, #32]
   return(result);
 8005f5e:	6a3b      	ldr	r3, [r7, #32]
 8005f60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f6e:	633b      	str	r3, [r7, #48]	; 0x30
 8005f70:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f76:	e841 2300 	strex	r3, r2, [r1]
 8005f7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1e6      	bne.n	8005f50 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	3308      	adds	r3, #8
 8005f88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	e853 3f00 	ldrex	r3, [r3]
 8005f90:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f023 0301 	bic.w	r3, r3, #1
 8005f98:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	3308      	adds	r3, #8
 8005fa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fa2:	61fa      	str	r2, [r7, #28]
 8005fa4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa6:	69b9      	ldr	r1, [r7, #24]
 8005fa8:	69fa      	ldr	r2, [r7, #28]
 8005faa:	e841 2300 	strex	r3, r2, [r1]
 8005fae:	617b      	str	r3, [r7, #20]
   return(result);
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1e5      	bne.n	8005f82 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2220      	movs	r2, #32
 8005fba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e012      	b.n	8005ff0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2220      	movs	r2, #32
 8005fce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2220      	movs	r2, #32
 8005fd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3758      	adds	r7, #88	; 0x58
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	603b      	str	r3, [r7, #0]
 8006004:	4613      	mov	r3, r2
 8006006:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006008:	e04f      	b.n	80060aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006010:	d04b      	beq.n	80060aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006012:	f7fa fdfd 	bl	8000c10 <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	69ba      	ldr	r2, [r7, #24]
 800601e:	429a      	cmp	r2, r3
 8006020:	d302      	bcc.n	8006028 <UART_WaitOnFlagUntilTimeout+0x30>
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d101      	bne.n	800602c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006028:	2303      	movs	r3, #3
 800602a:	e04e      	b.n	80060ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0304 	and.w	r3, r3, #4
 8006036:	2b00      	cmp	r3, #0
 8006038:	d037      	beq.n	80060aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	2b80      	cmp	r3, #128	; 0x80
 800603e:	d034      	beq.n	80060aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	2b40      	cmp	r3, #64	; 0x40
 8006044:	d031      	beq.n	80060aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	69db      	ldr	r3, [r3, #28]
 800604c:	f003 0308 	and.w	r3, r3, #8
 8006050:	2b08      	cmp	r3, #8
 8006052:	d110      	bne.n	8006076 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2208      	movs	r2, #8
 800605a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f000 f839 	bl	80060d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2208      	movs	r2, #8
 8006066:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e029      	b.n	80060ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	69db      	ldr	r3, [r3, #28]
 800607c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006080:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006084:	d111      	bne.n	80060aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800608e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006090:	68f8      	ldr	r0, [r7, #12]
 8006092:	f000 f81f 	bl	80060d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2220      	movs	r2, #32
 800609a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e00f      	b.n	80060ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	69da      	ldr	r2, [r3, #28]
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	4013      	ands	r3, r2
 80060b4:	68ba      	ldr	r2, [r7, #8]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	bf0c      	ite	eq
 80060ba:	2301      	moveq	r3, #1
 80060bc:	2300      	movne	r3, #0
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	461a      	mov	r2, r3
 80060c2:	79fb      	ldrb	r3, [r7, #7]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d0a0      	beq.n	800600a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
	...

080060d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b095      	sub	sp, #84	; 0x54
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060e4:	e853 3f00 	ldrex	r3, [r3]
 80060e8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80060ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	461a      	mov	r2, r3
 80060f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060fa:	643b      	str	r3, [r7, #64]	; 0x40
 80060fc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006100:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006102:	e841 2300 	strex	r3, r2, [r1]
 8006106:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1e6      	bne.n	80060dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	3308      	adds	r3, #8
 8006114:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	e853 3f00 	ldrex	r3, [r3]
 800611c:	61fb      	str	r3, [r7, #28]
   return(result);
 800611e:	69fa      	ldr	r2, [r7, #28]
 8006120:	4b1e      	ldr	r3, [pc, #120]	; (800619c <UART_EndRxTransfer+0xc8>)
 8006122:	4013      	ands	r3, r2
 8006124:	64bb      	str	r3, [r7, #72]	; 0x48
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	3308      	adds	r3, #8
 800612c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800612e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006130:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006132:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006134:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006136:	e841 2300 	strex	r3, r2, [r1]
 800613a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800613c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613e:	2b00      	cmp	r3, #0
 8006140:	d1e5      	bne.n	800610e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006146:	2b01      	cmp	r3, #1
 8006148:	d118      	bne.n	800617c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	e853 3f00 	ldrex	r3, [r3]
 8006156:	60bb      	str	r3, [r7, #8]
   return(result);
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	f023 0310 	bic.w	r3, r3, #16
 800615e:	647b      	str	r3, [r7, #68]	; 0x44
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	461a      	mov	r2, r3
 8006166:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006168:	61bb      	str	r3, [r7, #24]
 800616a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616c:	6979      	ldr	r1, [r7, #20]
 800616e:	69ba      	ldr	r2, [r7, #24]
 8006170:	e841 2300 	strex	r3, r2, [r1]
 8006174:	613b      	str	r3, [r7, #16]
   return(result);
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1e6      	bne.n	800614a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2220      	movs	r2, #32
 8006180:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006190:	bf00      	nop
 8006192:	3754      	adds	r7, #84	; 0x54
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr
 800619c:	effffffe 	.word	0xeffffffe

080061a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f7ff f850 	bl	8005264 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061c4:	bf00      	nop
 80061c6:	3710      	adds	r7, #16
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b088      	sub	sp, #32
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	e853 3f00 	ldrex	r3, [r3]
 80061e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061e8:	61fb      	str	r3, [r7, #28]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	461a      	mov	r2, r3
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	61bb      	str	r3, [r7, #24]
 80061f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f6:	6979      	ldr	r1, [r7, #20]
 80061f8:	69ba      	ldr	r2, [r7, #24]
 80061fa:	e841 2300 	strex	r3, r2, [r1]
 80061fe:	613b      	str	r3, [r7, #16]
   return(result);
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1e6      	bne.n	80061d4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2220      	movs	r2, #32
 800620a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f7ff f81b 	bl	8005250 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800621a:	bf00      	nop
 800621c:	3720      	adds	r7, #32
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006222:	b480      	push	{r7}
 8006224:	b083      	sub	sp, #12
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800622a:	bf00      	nop
 800622c:	370c      	adds	r7, #12
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr

08006236 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006236:	b480      	push	{r7}
 8006238:	b083      	sub	sp, #12
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800623e:	bf00      	nop
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr

0800624a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800624a:	b480      	push	{r7}
 800624c:	b083      	sub	sp, #12
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006252:	bf00      	nop
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800625e:	b480      	push	{r7}
 8006260:	b085      	sub	sp, #20
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800626c:	2b01      	cmp	r3, #1
 800626e:	d101      	bne.n	8006274 <HAL_UARTEx_DisableFifoMode+0x16>
 8006270:	2302      	movs	r3, #2
 8006272:	e027      	b.n	80062c4 <HAL_UARTEx_DisableFifoMode+0x66>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2224      	movs	r2, #36	; 0x24
 8006280:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f022 0201 	bic.w	r2, r2, #1
 800629a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80062a2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2220      	movs	r2, #32
 80062b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3714      	adds	r7, #20
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d101      	bne.n	80062e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80062e4:	2302      	movs	r3, #2
 80062e6:	e02d      	b.n	8006344 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2224      	movs	r2, #36	; 0x24
 80062f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f022 0201 	bic.w	r2, r2, #1
 800630e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	683a      	ldr	r2, [r7, #0]
 8006320:	430a      	orrs	r2, r1
 8006322:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 f84f 	bl	80063c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2220      	movs	r2, #32
 8006336:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800635c:	2b01      	cmp	r3, #1
 800635e:	d101      	bne.n	8006364 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006360:	2302      	movs	r3, #2
 8006362:	e02d      	b.n	80063c0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2224      	movs	r2, #36	; 0x24
 8006370:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f022 0201 	bic.w	r2, r2, #1
 800638a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	683a      	ldr	r2, [r7, #0]
 800639c:	430a      	orrs	r2, r1
 800639e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 f811 	bl	80063c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2220      	movs	r2, #32
 80063b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3710      	adds	r7, #16
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d108      	bne.n	80063ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80063e8:	e031      	b.n	800644e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80063ea:	2310      	movs	r3, #16
 80063ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80063ee:	2310      	movs	r3, #16
 80063f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	0e5b      	lsrs	r3, r3, #25
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	f003 0307 	and.w	r3, r3, #7
 8006400:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	0f5b      	lsrs	r3, r3, #29
 800640a:	b2db      	uxtb	r3, r3
 800640c:	f003 0307 	and.w	r3, r3, #7
 8006410:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006412:	7bbb      	ldrb	r3, [r7, #14]
 8006414:	7b3a      	ldrb	r2, [r7, #12]
 8006416:	4911      	ldr	r1, [pc, #68]	; (800645c <UARTEx_SetNbDataToProcess+0x94>)
 8006418:	5c8a      	ldrb	r2, [r1, r2]
 800641a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800641e:	7b3a      	ldrb	r2, [r7, #12]
 8006420:	490f      	ldr	r1, [pc, #60]	; (8006460 <UARTEx_SetNbDataToProcess+0x98>)
 8006422:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006424:	fb93 f3f2 	sdiv	r3, r3, r2
 8006428:	b29a      	uxth	r2, r3
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006430:	7bfb      	ldrb	r3, [r7, #15]
 8006432:	7b7a      	ldrb	r2, [r7, #13]
 8006434:	4909      	ldr	r1, [pc, #36]	; (800645c <UARTEx_SetNbDataToProcess+0x94>)
 8006436:	5c8a      	ldrb	r2, [r1, r2]
 8006438:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800643c:	7b7a      	ldrb	r2, [r7, #13]
 800643e:	4908      	ldr	r1, [pc, #32]	; (8006460 <UARTEx_SetNbDataToProcess+0x98>)
 8006440:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006442:	fb93 f3f2 	sdiv	r3, r3, r2
 8006446:	b29a      	uxth	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800644e:	bf00      	nop
 8006450:	3714      	adds	r7, #20
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	0800650c 	.word	0x0800650c
 8006460:	08006514 	.word	0x08006514

08006464 <memset>:
 8006464:	4402      	add	r2, r0
 8006466:	4603      	mov	r3, r0
 8006468:	4293      	cmp	r3, r2
 800646a:	d100      	bne.n	800646e <memset+0xa>
 800646c:	4770      	bx	lr
 800646e:	f803 1b01 	strb.w	r1, [r3], #1
 8006472:	e7f9      	b.n	8006468 <memset+0x4>

08006474 <__libc_init_array>:
 8006474:	b570      	push	{r4, r5, r6, lr}
 8006476:	4d0d      	ldr	r5, [pc, #52]	; (80064ac <__libc_init_array+0x38>)
 8006478:	4c0d      	ldr	r4, [pc, #52]	; (80064b0 <__libc_init_array+0x3c>)
 800647a:	1b64      	subs	r4, r4, r5
 800647c:	10a4      	asrs	r4, r4, #2
 800647e:	2600      	movs	r6, #0
 8006480:	42a6      	cmp	r6, r4
 8006482:	d109      	bne.n	8006498 <__libc_init_array+0x24>
 8006484:	4d0b      	ldr	r5, [pc, #44]	; (80064b4 <__libc_init_array+0x40>)
 8006486:	4c0c      	ldr	r4, [pc, #48]	; (80064b8 <__libc_init_array+0x44>)
 8006488:	f000 f818 	bl	80064bc <_init>
 800648c:	1b64      	subs	r4, r4, r5
 800648e:	10a4      	asrs	r4, r4, #2
 8006490:	2600      	movs	r6, #0
 8006492:	42a6      	cmp	r6, r4
 8006494:	d105      	bne.n	80064a2 <__libc_init_array+0x2e>
 8006496:	bd70      	pop	{r4, r5, r6, pc}
 8006498:	f855 3b04 	ldr.w	r3, [r5], #4
 800649c:	4798      	blx	r3
 800649e:	3601      	adds	r6, #1
 80064a0:	e7ee      	b.n	8006480 <__libc_init_array+0xc>
 80064a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80064a6:	4798      	blx	r3
 80064a8:	3601      	adds	r6, #1
 80064aa:	e7f2      	b.n	8006492 <__libc_init_array+0x1e>
 80064ac:	08006524 	.word	0x08006524
 80064b0:	08006524 	.word	0x08006524
 80064b4:	08006524 	.word	0x08006524
 80064b8:	08006528 	.word	0x08006528

080064bc <_init>:
 80064bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064be:	bf00      	nop
 80064c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064c2:	bc08      	pop	{r3}
 80064c4:	469e      	mov	lr, r3
 80064c6:	4770      	bx	lr

080064c8 <_fini>:
 80064c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ca:	bf00      	nop
 80064cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ce:	bc08      	pop	{r3}
 80064d0:	469e      	mov	lr, r3
 80064d2:	4770      	bx	lr
